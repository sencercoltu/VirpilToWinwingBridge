
VirpilToWinwingBridge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006234  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000047c  080063d4  080063d4  000073d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006850  08006850  000083a4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006850  08006850  00007850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006858  08006858  000083a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006858  08006858  00007858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800685c  0800685c  0000785c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000003a4  20000000  08006860  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  200003a4  08006c04  000083a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000630  08006c04  00008630  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000083a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010c92  00000000  00000000  000083d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002770  00000000  00000000  00019066  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b0  00000000  00000000  0001b7d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d05  00000000  00000000  0001c888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017ba7  00000000  00000000  0001d58d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013255  00000000  00000000  00035134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092e0c  00000000  00000000  00048389  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000db195  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f7c  00000000  00000000  000db1d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000e0154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200003a4 	.word	0x200003a4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080063bc 	.word	0x080063bc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200003a8 	.word	0x200003a8
 80001dc:	080063bc 	.word	0x080063bc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005b4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005b8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80005bc:	f003 0301 	and.w	r3, r3, #1
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d013      	beq.n	80005ec <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005c4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005c8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80005cc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d00b      	beq.n	80005ec <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005d4:	e000      	b.n	80005d8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005d6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005d8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d0f9      	beq.n	80005d6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005e2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005e6:	687a      	ldr	r2, [r7, #4]
 80005e8:	b2d2      	uxtb	r2, r2
 80005ea:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005ec:	687b      	ldr	r3, [r7, #4]
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	370c      	adds	r7, #12
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
	...

080005fc <delay_us>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay_us(uint16_t us)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);  // set the counter value a 0
 8000606:	4b09      	ldr	r3, [pc, #36]	@ (800062c <delay_us+0x30>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	2200      	movs	r2, #0
 800060c:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us)
 800060e:	bf00      	nop
 8000610:	4b06      	ldr	r3, [pc, #24]	@ (800062c <delay_us+0x30>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000616:	88fb      	ldrh	r3, [r7, #6]
 8000618:	429a      	cmp	r2, r3
 800061a:	d3f9      	bcc.n	8000610 <delay_us+0x14>
		;  // wait for the counter to reach the us input in the parameter
}
 800061c:	bf00      	nop
 800061e:	bf00      	nop
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	20000418 	.word	0x20000418

08000630 <_write>:

int _write(int file, char *ptr, int len)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b086      	sub	sp, #24
 8000634:	af00      	add	r7, sp, #0
 8000636:	60f8      	str	r0, [r7, #12]
 8000638:	60b9      	str	r1, [r7, #8]
 800063a:	607a      	str	r2, [r7, #4]
#ifdef DEBUG
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800063c:	2300      	movs	r3, #0
 800063e:	617b      	str	r3, [r7, #20]
 8000640:	e009      	b.n	8000656 <_write+0x26>
		ITM_SendChar(*ptr++);
 8000642:	68bb      	ldr	r3, [r7, #8]
 8000644:	1c5a      	adds	r2, r3, #1
 8000646:	60ba      	str	r2, [r7, #8]
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	4618      	mov	r0, r3
 800064c:	f7ff ffae 	bl	80005ac <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000650:	697b      	ldr	r3, [r7, #20]
 8000652:	3301      	adds	r3, #1
 8000654:	617b      	str	r3, [r7, #20]
 8000656:	697a      	ldr	r2, [r7, #20]
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	429a      	cmp	r2, r3
 800065c:	dbf1      	blt.n	8000642 <_write+0x12>
#endif //DEBUG
	return len;
 800065e:	687b      	ldr	r3, [r7, #4]
}
 8000660:	4618      	mov	r0, r3
 8000662:	3718      	adds	r7, #24
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}

08000668 <printHexFrame>:

static inline void printHexFrame(const char *prefix, const uint8_t *b, size_t n)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b086      	sub	sp, #24
 800066c:	af00      	add	r7, sp, #0
 800066e:	60f8      	str	r0, [r7, #12]
 8000670:	60b9      	str	r1, [r7, #8]
 8000672:	607a      	str	r2, [r7, #4]
	printf("%s", prefix);
 8000674:	68f9      	ldr	r1, [r7, #12]
 8000676:	480e      	ldr	r0, [pc, #56]	@ (80006b0 <printHexFrame+0x48>)
 8000678:	f004 fece 	bl	8005418 <iprintf>
	for (size_t i = 0; i < n; i++)
 800067c:	2300      	movs	r3, #0
 800067e:	617b      	str	r3, [r7, #20]
 8000680:	e00a      	b.n	8000698 <printHexFrame+0x30>
	{
		printf(" 0x%02X", b[i]);
 8000682:	68ba      	ldr	r2, [r7, #8]
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	4413      	add	r3, r2
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	4619      	mov	r1, r3
 800068c:	4809      	ldr	r0, [pc, #36]	@ (80006b4 <printHexFrame+0x4c>)
 800068e:	f004 fec3 	bl	8005418 <iprintf>
	for (size_t i = 0; i < n; i++)
 8000692:	697b      	ldr	r3, [r7, #20]
 8000694:	3301      	adds	r3, #1
 8000696:	617b      	str	r3, [r7, #20]
 8000698:	697a      	ldr	r2, [r7, #20]
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	429a      	cmp	r2, r3
 800069e:	d3f0      	bcc.n	8000682 <printHexFrame+0x1a>
	}
	printf("\n");
 80006a0:	200a      	movs	r0, #10
 80006a2:	f004 fecb 	bl	800543c <putchar>
}
 80006a6:	bf00      	nop
 80006a8:	3718      	adds	r7, #24
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	080063d4 	.word	0x080063d4
 80006b4:	080063d8 	.word	0x080063d8

080006b8 <readVirpilDataSync>:
#endif //DEBUG_VIRPIL

uint32_t LastInvalidVirpilFrameTime = 0;

static uint8_t readVirpilDataSync()
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af02      	add	r7, sp, #8
	uint8_t ret = 1;
 80006be:	2301      	movs	r3, #1
 80006c0:	71fb      	strb	r3, [r7, #7]
	static const uint8_t DUMMY = 0xFF;
	HAL_GPIO_WritePin(VIRPIL_NSS_GPIO_Port, VIRPIL_NSS_Pin, GPIO_PIN_RESET);
 80006c2:	2200      	movs	r2, #0
 80006c4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006c8:	4839      	ldr	r0, [pc, #228]	@ (80007b0 <readVirpilDataSync+0xf8>)
 80006ca:	f002 fa37 	bl	8002b3c <HAL_GPIO_WritePin>
	delay_us(10);
 80006ce:	200a      	movs	r0, #10
 80006d0:	f7ff ff94 	bl	80005fc <delay_us>
//	ret = HAL_SPI_Receive(&hspi2, VP_Buffer, VIRPIL_PACKET_SIZE, 100);
	for (uint16_t i = 0; i < VIRPIL_PACKET_SIZE; i++)
 80006d4:	2300      	movs	r3, #0
 80006d6:	80bb      	strh	r3, [r7, #4]
 80006d8:	e00f      	b.n	80006fa <readVirpilDataSync+0x42>
	{
		HAL_SPI_TransmitReceive(&hspi2, (uint8_t*) &DUMMY, &VP_Buffer[i], 1, 2);
 80006da:	88bb      	ldrh	r3, [r7, #4]
 80006dc:	4a35      	ldr	r2, [pc, #212]	@ (80007b4 <readVirpilDataSync+0xfc>)
 80006de:	441a      	add	r2, r3
 80006e0:	2302      	movs	r3, #2
 80006e2:	9300      	str	r3, [sp, #0]
 80006e4:	2301      	movs	r3, #1
 80006e6:	4934      	ldr	r1, [pc, #208]	@ (80007b8 <readVirpilDataSync+0x100>)
 80006e8:	4834      	ldr	r0, [pc, #208]	@ (80007bc <readVirpilDataSync+0x104>)
 80006ea:	f002 ff3c 	bl	8003566 <HAL_SPI_TransmitReceive>
		delay_us(10);
 80006ee:	200a      	movs	r0, #10
 80006f0:	f7ff ff84 	bl	80005fc <delay_us>
	for (uint16_t i = 0; i < VIRPIL_PACKET_SIZE; i++)
 80006f4:	88bb      	ldrh	r3, [r7, #4]
 80006f6:	3301      	adds	r3, #1
 80006f8:	80bb      	strh	r3, [r7, #4]
 80006fa:	88bb      	ldrh	r3, [r7, #4]
 80006fc:	2b0d      	cmp	r3, #13
 80006fe:	d9ec      	bls.n	80006da <readVirpilDataSync+0x22>
	}
	delay_us(10);
 8000700:	200a      	movs	r0, #10
 8000702:	f7ff ff7b 	bl	80005fc <delay_us>
	HAL_GPIO_WritePin(VIRPIL_NSS_GPIO_Port, VIRPIL_NSS_Pin, GPIO_PIN_SET);
 8000706:	2201      	movs	r2, #1
 8000708:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800070c:	4828      	ldr	r0, [pc, #160]	@ (80007b0 <readVirpilDataSync+0xf8>)
 800070e:	f002 fa15 	bl	8002b3c <HAL_GPIO_WritePin>

	
	if (VP_Buffer[0] == 0 || VP_Buffer[1] == 0 || VP_Buffer[2] == 0 || VP_Buffer[3] == 0 || VP_Buffer[13] != 0)
 8000712:	4b28      	ldr	r3, [pc, #160]	@ (80007b4 <readVirpilDataSync+0xfc>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d00f      	beq.n	800073a <readVirpilDataSync+0x82>
 800071a:	4b26      	ldr	r3, [pc, #152]	@ (80007b4 <readVirpilDataSync+0xfc>)
 800071c:	785b      	ldrb	r3, [r3, #1]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d00b      	beq.n	800073a <readVirpilDataSync+0x82>
 8000722:	4b24      	ldr	r3, [pc, #144]	@ (80007b4 <readVirpilDataSync+0xfc>)
 8000724:	789b      	ldrb	r3, [r3, #2]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d007      	beq.n	800073a <readVirpilDataSync+0x82>
 800072a:	4b22      	ldr	r3, [pc, #136]	@ (80007b4 <readVirpilDataSync+0xfc>)
 800072c:	78db      	ldrb	r3, [r3, #3]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d003      	beq.n	800073a <readVirpilDataSync+0x82>
 8000732:	4b20      	ldr	r3, [pc, #128]	@ (80007b4 <readVirpilDataSync+0xfc>)
 8000734:	7b5b      	ldrb	r3, [r3, #13]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d016      	beq.n	8000768 <readVirpilDataSync+0xb0>
	{
		if (LastInvalidVirpilFrameTime == 0)
 800073a:	4b21      	ldr	r3, [pc, #132]	@ (80007c0 <readVirpilDataSync+0x108>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d107      	bne.n	8000752 <readVirpilDataSync+0x9a>
		{
			printf("Invalid Virpil frame received, pause processing.\n");
 8000742:	4820      	ldr	r0, [pc, #128]	@ (80007c4 <readVirpilDataSync+0x10c>)
 8000744:	f004 fed8 	bl	80054f8 <puts>
			printHexFrame("[VIRPIL INVALID]", VP_Buffer, VIRPIL_PACKET_SIZE);
 8000748:	220e      	movs	r2, #14
 800074a:	491a      	ldr	r1, [pc, #104]	@ (80007b4 <readVirpilDataSync+0xfc>)
 800074c:	481e      	ldr	r0, [pc, #120]	@ (80007c8 <readVirpilDataSync+0x110>)
 800074e:	f7ff ff8b 	bl	8000668 <printHexFrame>
		}
		LastInvalidVirpilFrameTime = HAL_GetTick();
 8000752:	f001 fbb7 	bl	8001ec4 <HAL_GetTick>
 8000756:	4603      	mov	r3, r0
 8000758:	4a19      	ldr	r2, [pc, #100]	@ (80007c0 <readVirpilDataSync+0x108>)
 800075a:	6013      	str	r3, [r2, #0]
		blinkDelay = 50;
 800075c:	4b1b      	ldr	r3, [pc, #108]	@ (80007cc <readVirpilDataSync+0x114>)
 800075e:	2232      	movs	r2, #50	@ 0x32
 8000760:	601a      	str	r2, [r3, #0]
		ret = 0;
 8000762:	2300      	movs	r3, #0
 8000764:	71fb      	strb	r3, [r7, #7]
 8000766:	e01e      	b.n	80007a6 <readVirpilDataSync+0xee>
	}
	else if (LastInvalidVirpilFrameTime != 0)
 8000768:	4b15      	ldr	r3, [pc, #84]	@ (80007c0 <readVirpilDataSync+0x108>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d01a      	beq.n	80007a6 <readVirpilDataSync+0xee>
	{
		if (HAL_GetTick() - LastInvalidVirpilFrameTime > VIRPIL_TIMEOUT_MS)
 8000770:	f001 fba8 	bl	8001ec4 <HAL_GetTick>
 8000774:	4602      	mov	r2, r0
 8000776:	4b12      	ldr	r3, [pc, #72]	@ (80007c0 <readVirpilDataSync+0x108>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	1ad3      	subs	r3, r2, r3
 800077c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000780:	d90f      	bls.n	80007a2 <readVirpilDataSync+0xea>
		{
			printf("Valid Virpil frame received, resuming.\n");
 8000782:	4813      	ldr	r0, [pc, #76]	@ (80007d0 <readVirpilDataSync+0x118>)
 8000784:	f004 feb8 	bl	80054f8 <puts>
			LastInvalidVirpilFrameTime = 0;
 8000788:	4b0d      	ldr	r3, [pc, #52]	@ (80007c0 <readVirpilDataSync+0x108>)
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
			blinkDelay = 0;
 800078e:	4b0f      	ldr	r3, [pc, #60]	@ (80007cc <readVirpilDataSync+0x114>)
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, SET);
 8000794:	2201      	movs	r2, #1
 8000796:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800079a:	480e      	ldr	r0, [pc, #56]	@ (80007d4 <readVirpilDataSync+0x11c>)
 800079c:	f002 f9ce 	bl	8002b3c <HAL_GPIO_WritePin>
 80007a0:	e001      	b.n	80007a6 <readVirpilDataSync+0xee>
		}
		else
			ret = 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	71fb      	strb	r3, [r7, #7]
		//	printf("VP3=0x%02X\n", virpil_byte);
		//}
	}
#endif //DEBUG
#endif //DEBUG_VIRPIL
	return ret;
 80007a6:	79fb      	ldrb	r3, [r7, #7]
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40020400 	.word	0x40020400
 80007b4:	20000020 	.word	0x20000020
 80007b8:	08006800 	.word	0x08006800
 80007bc:	200003c0 	.word	0x200003c0
 80007c0:	200004d0 	.word	0x200004d0
 80007c4:	080063e0 	.word	0x080063e0
 80007c8:	08006414 	.word	0x08006414
 80007cc:	200004b4 	.word	0x200004b4
 80007d0:	08006428 	.word	0x08006428
 80007d4:	40020800 	.word	0x40020800

080007d8 <ww_hat_code_from_index>:
uint32_t CalibrationEnterTime = 0;
uint8_t CalibrationJustEntered = 0;
uint8_t CalibrationActive = 0;

static inline uint8_t ww_hat_code_from_index(int idx)
{
 80007d8:	b480      	push	{r7}
 80007da:	b085      	sub	sp, #20
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
	if (idx < 0)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	da01      	bge.n	80007ea <ww_hat_code_from_index+0x12>
		return 0x0F;               // neutral
 80007e6:	230f      	movs	r3, #15
 80007e8:	e03f      	b.n	800086a <ww_hat_code_from_index+0x92>
	// high nibble: one (or two) cardinal bits based on idx
	uint8_t hi = 0;
 80007ea:	2300      	movs	r3, #0
 80007ec:	73fb      	strb	r3, [r7, #15]
	if (idx == 0 || idx == 1 || idx == 7)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d005      	beq.n	8000800 <ww_hat_code_from_index+0x28>
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2b01      	cmp	r3, #1
 80007f8:	d002      	beq.n	8000800 <ww_hat_code_from_index+0x28>
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	2b07      	cmp	r3, #7
 80007fe:	d103      	bne.n	8000808 <ww_hat_code_from_index+0x30>
		hi |= 0x10; // Up
 8000800:	7bfb      	ldrb	r3, [r7, #15]
 8000802:	f043 0310 	orr.w	r3, r3, #16
 8000806:	73fb      	strb	r3, [r7, #15]
	if (idx == 1 || idx == 2 || idx == 3)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	2b01      	cmp	r3, #1
 800080c:	d005      	beq.n	800081a <ww_hat_code_from_index+0x42>
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	2b02      	cmp	r3, #2
 8000812:	d002      	beq.n	800081a <ww_hat_code_from_index+0x42>
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	2b03      	cmp	r3, #3
 8000818:	d103      	bne.n	8000822 <ww_hat_code_from_index+0x4a>
		hi |= 0x20; // Right
 800081a:	7bfb      	ldrb	r3, [r7, #15]
 800081c:	f043 0320 	orr.w	r3, r3, #32
 8000820:	73fb      	strb	r3, [r7, #15]
	if (idx == 3 || idx == 4 || idx == 5)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	2b03      	cmp	r3, #3
 8000826:	d005      	beq.n	8000834 <ww_hat_code_from_index+0x5c>
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	2b04      	cmp	r3, #4
 800082c:	d002      	beq.n	8000834 <ww_hat_code_from_index+0x5c>
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	2b05      	cmp	r3, #5
 8000832:	d103      	bne.n	800083c <ww_hat_code_from_index+0x64>
		hi |= 0x40; // Down
 8000834:	7bfb      	ldrb	r3, [r7, #15]
 8000836:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800083a:	73fb      	strb	r3, [r7, #15]
	if (idx == 5 || idx == 6 || idx == 7)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	2b05      	cmp	r3, #5
 8000840:	d005      	beq.n	800084e <ww_hat_code_from_index+0x76>
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	2b06      	cmp	r3, #6
 8000846:	d002      	beq.n	800084e <ww_hat_code_from_index+0x76>
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2b07      	cmp	r3, #7
 800084c:	d103      	bne.n	8000856 <ww_hat_code_from_index+0x7e>
		hi |= 0x80; // Left
 800084e:	7bfb      	ldrb	r3, [r7, #15]
 8000850:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000854:	73fb      	strb	r3, [r7, #15]
	return (uint8_t) (hi | (idx & 0x0F));
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	b25b      	sxtb	r3, r3
 800085a:	f003 030f 	and.w	r3, r3, #15
 800085e:	b25a      	sxtb	r2, r3
 8000860:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000864:	4313      	orrs	r3, r2
 8000866:	b25b      	sxtb	r3, r3
 8000868:	b2db      	uxtb	r3, r3
}
 800086a:	4618      	mov	r0, r3
 800086c:	3714      	adds	r7, #20
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr

08000876 <ww_hat_code_from_bools>:

static inline uint8_t ww_hat_code_from_bools(int up, int right, int down,
		int left)
{
 8000876:	b580      	push	{r7, lr}
 8000878:	b088      	sub	sp, #32
 800087a:	af00      	add	r7, sp, #0
 800087c:	60f8      	str	r0, [r7, #12]
 800087e:	60b9      	str	r1, [r7, #8]
 8000880:	607a      	str	r2, [r7, #4]
 8000882:	603b      	str	r3, [r7, #0]
	// cancel opposites (if both pressed, treat as neither)
	int v = (up && !down) ? 1 : (down && !up) ? -1 : 0;
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d002      	beq.n	8000890 <ww_hat_code_from_bools+0x1a>
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d00a      	beq.n	80008a6 <ww_hat_code_from_bools+0x30>
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d005      	beq.n	80008a2 <ww_hat_code_from_bools+0x2c>
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d102      	bne.n	80008a2 <ww_hat_code_from_bools+0x2c>
 800089c:	f04f 33ff 	mov.w	r3, #4294967295
 80008a0:	e002      	b.n	80008a8 <ww_hat_code_from_bools+0x32>
 80008a2:	2300      	movs	r3, #0
 80008a4:	e000      	b.n	80008a8 <ww_hat_code_from_bools+0x32>
 80008a6:	2301      	movs	r3, #1
 80008a8:	61bb      	str	r3, [r7, #24]
	int h = (right && !left) ? 1 : (left && !right) ? -1 : 0;
 80008aa:	68bb      	ldr	r3, [r7, #8]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d002      	beq.n	80008b6 <ww_hat_code_from_bools+0x40>
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d00a      	beq.n	80008cc <ww_hat_code_from_bools+0x56>
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d005      	beq.n	80008c8 <ww_hat_code_from_bools+0x52>
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d102      	bne.n	80008c8 <ww_hat_code_from_bools+0x52>
 80008c2:	f04f 33ff 	mov.w	r3, #4294967295
 80008c6:	e002      	b.n	80008ce <ww_hat_code_from_bools+0x58>
 80008c8:	2300      	movs	r3, #0
 80008ca:	e000      	b.n	80008ce <ww_hat_code_from_bools+0x58>
 80008cc:	2301      	movs	r3, #1
 80008ce:	617b      	str	r3, [r7, #20]

	int idx = -1; // neutral by default
 80008d0:	f04f 33ff 	mov.w	r3, #4294967295
 80008d4:	61fb      	str	r3, [r7, #28]
	if (v == 0 && h == 0)
 80008d6:	69bb      	ldr	r3, [r7, #24]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d106      	bne.n	80008ea <ww_hat_code_from_bools+0x74>
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d103      	bne.n	80008ea <ww_hat_code_from_bools+0x74>
		idx = -1;
 80008e2:	f04f 33ff 	mov.w	r3, #4294967295
 80008e6:	61fb      	str	r3, [r7, #28]
 80008e8:	e046      	b.n	8000978 <ww_hat_code_from_bools+0x102>
	else if (v > 0 && h == 0)
 80008ea:	69bb      	ldr	r3, [r7, #24]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	dd05      	ble.n	80008fc <ww_hat_code_from_bools+0x86>
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d102      	bne.n	80008fc <ww_hat_code_from_bools+0x86>
		idx = HAT_IDX_UP;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61fb      	str	r3, [r7, #28]
 80008fa:	e03d      	b.n	8000978 <ww_hat_code_from_bools+0x102>
	else if (v > 0 && h > 0)
 80008fc:	69bb      	ldr	r3, [r7, #24]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	dd05      	ble.n	800090e <ww_hat_code_from_bools+0x98>
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	2b00      	cmp	r3, #0
 8000906:	dd02      	ble.n	800090e <ww_hat_code_from_bools+0x98>
		idx = HAT_IDX_UR;
 8000908:	2301      	movs	r3, #1
 800090a:	61fb      	str	r3, [r7, #28]
 800090c:	e034      	b.n	8000978 <ww_hat_code_from_bools+0x102>
	else if (v == 0 && h > 0)
 800090e:	69bb      	ldr	r3, [r7, #24]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d105      	bne.n	8000920 <ww_hat_code_from_bools+0xaa>
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	2b00      	cmp	r3, #0
 8000918:	dd02      	ble.n	8000920 <ww_hat_code_from_bools+0xaa>
		idx = HAT_IDX_R;
 800091a:	2302      	movs	r3, #2
 800091c:	61fb      	str	r3, [r7, #28]
 800091e:	e02b      	b.n	8000978 <ww_hat_code_from_bools+0x102>
	else if (v < 0 && h > 0)
 8000920:	69bb      	ldr	r3, [r7, #24]
 8000922:	2b00      	cmp	r3, #0
 8000924:	da05      	bge.n	8000932 <ww_hat_code_from_bools+0xbc>
 8000926:	697b      	ldr	r3, [r7, #20]
 8000928:	2b00      	cmp	r3, #0
 800092a:	dd02      	ble.n	8000932 <ww_hat_code_from_bools+0xbc>
		idx = HAT_IDX_DR;
 800092c:	2303      	movs	r3, #3
 800092e:	61fb      	str	r3, [r7, #28]
 8000930:	e022      	b.n	8000978 <ww_hat_code_from_bools+0x102>
	else if (v < 0 && h == 0)
 8000932:	69bb      	ldr	r3, [r7, #24]
 8000934:	2b00      	cmp	r3, #0
 8000936:	da05      	bge.n	8000944 <ww_hat_code_from_bools+0xce>
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d102      	bne.n	8000944 <ww_hat_code_from_bools+0xce>
		idx = HAT_IDX_D;
 800093e:	2304      	movs	r3, #4
 8000940:	61fb      	str	r3, [r7, #28]
 8000942:	e019      	b.n	8000978 <ww_hat_code_from_bools+0x102>
	else if (v < 0 && h < 0)
 8000944:	69bb      	ldr	r3, [r7, #24]
 8000946:	2b00      	cmp	r3, #0
 8000948:	da05      	bge.n	8000956 <ww_hat_code_from_bools+0xe0>
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	2b00      	cmp	r3, #0
 800094e:	da02      	bge.n	8000956 <ww_hat_code_from_bools+0xe0>
		idx = HAT_IDX_DL;
 8000950:	2305      	movs	r3, #5
 8000952:	61fb      	str	r3, [r7, #28]
 8000954:	e010      	b.n	8000978 <ww_hat_code_from_bools+0x102>
	else if (v == 0 && h < 0)
 8000956:	69bb      	ldr	r3, [r7, #24]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d105      	bne.n	8000968 <ww_hat_code_from_bools+0xf2>
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	2b00      	cmp	r3, #0
 8000960:	da02      	bge.n	8000968 <ww_hat_code_from_bools+0xf2>
		idx = HAT_IDX_L;
 8000962:	2306      	movs	r3, #6
 8000964:	61fb      	str	r3, [r7, #28]
 8000966:	e007      	b.n	8000978 <ww_hat_code_from_bools+0x102>
	else if (v > 0 && h < 0)
 8000968:	69bb      	ldr	r3, [r7, #24]
 800096a:	2b00      	cmp	r3, #0
 800096c:	dd04      	ble.n	8000978 <ww_hat_code_from_bools+0x102>
 800096e:	697b      	ldr	r3, [r7, #20]
 8000970:	2b00      	cmp	r3, #0
 8000972:	da01      	bge.n	8000978 <ww_hat_code_from_bools+0x102>
		idx = HAT_IDX_UL;
 8000974:	2307      	movs	r3, #7
 8000976:	61fb      	str	r3, [r7, #28]

	return ww_hat_code_from_index(idx);
 8000978:	69f8      	ldr	r0, [r7, #28]
 800097a:	f7ff ff2d 	bl	80007d8 <ww_hat_code_from_index>
 800097e:	4603      	mov	r3, r0
}
 8000980:	4618      	mov	r0, r3
 8000982:	3720      	adds	r7, #32
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}

08000988 <ww_write_hat>:

static inline void ww_write_hat(uint8_t code)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	71fb      	strb	r3, [r7, #7]
	WW_Cache[WW_A0_INDEX].Data[1] = code;   // POV code
 8000992:	4a09      	ldr	r2, [pc, #36]	@ (80009b8 <ww_write_hat+0x30>)
 8000994:	79fb      	ldrb	r3, [r7, #7]
 8000996:	f882 30cb 	strb.w	r3, [r2, #203]	@ 0xcb
	WW_Cache[WW_A0_INDEX].Data[2] = 0x00;   // per your captures
 800099a:	4b07      	ldr	r3, [pc, #28]	@ (80009b8 <ww_write_hat+0x30>)
 800099c:	2200      	movs	r2, #0
 800099e:	f883 20cc 	strb.w	r2, [r3, #204]	@ 0xcc
	WW_Cache[WW_A0_INDEX].Data[3] = 0x42;   // constant in your captures
 80009a2:	4b05      	ldr	r3, [pc, #20]	@ (80009b8 <ww_write_hat+0x30>)
 80009a4:	2242      	movs	r2, #66	@ 0x42
 80009a6:	f883 20cd 	strb.w	r2, [r3, #205]	@ 0xcd
}
 80009aa:	bf00      	nop
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	20000030 	.word	0x20000030

080009bc <map_vp_to_ww>:

static inline uint16_t map_vp_to_ww(uint16_t cur, uint16_t minv, uint16_t maxv)
{
 80009bc:	b480      	push	{r7}
 80009be:	b087      	sub	sp, #28
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	80fb      	strh	r3, [r7, #6]
 80009c6:	460b      	mov	r3, r1
 80009c8:	80bb      	strh	r3, [r7, #4]
 80009ca:	4613      	mov	r3, r2
 80009cc:	807b      	strh	r3, [r7, #2]
	if (minv == maxv)
 80009ce:	88ba      	ldrh	r2, [r7, #4]
 80009d0:	887b      	ldrh	r3, [r7, #2]
 80009d2:	429a      	cmp	r2, r3
 80009d4:	d101      	bne.n	80009da <map_vp_to_ww+0x1e>
		return 0;                 // avoid /0; treat as 0
 80009d6:	2300      	movs	r3, #0
 80009d8:	e029      	b.n	8000a2e <map_vp_to_ww+0x72>
	if (minv > maxv)
 80009da:	88ba      	ldrh	r2, [r7, #4]
 80009dc:	887b      	ldrh	r3, [r7, #2]
 80009de:	429a      	cmp	r2, r3
 80009e0:	d905      	bls.n	80009ee <map_vp_to_ww+0x32>
	{
		uint16_t t = minv;
 80009e2:	88bb      	ldrh	r3, [r7, #4]
 80009e4:	82fb      	strh	r3, [r7, #22]
		minv = maxv;
 80009e6:	887b      	ldrh	r3, [r7, #2]
 80009e8:	80bb      	strh	r3, [r7, #4]
		maxv = t;
 80009ea:	8afb      	ldrh	r3, [r7, #22]
 80009ec:	807b      	strh	r3, [r7, #2]
	} // handle reversed cal

	// clamp
	if (cur <= minv)
 80009ee:	88fa      	ldrh	r2, [r7, #6]
 80009f0:	88bb      	ldrh	r3, [r7, #4]
 80009f2:	429a      	cmp	r2, r3
 80009f4:	d801      	bhi.n	80009fa <map_vp_to_ww+0x3e>
		return 0;
 80009f6:	2300      	movs	r3, #0
 80009f8:	e019      	b.n	8000a2e <map_vp_to_ww+0x72>
	if (cur >= maxv)
 80009fa:	88fa      	ldrh	r2, [r7, #6]
 80009fc:	887b      	ldrh	r3, [r7, #2]
 80009fe:	429a      	cmp	r2, r3
 8000a00:	d302      	bcc.n	8000a08 <map_vp_to_ww+0x4c>
		return 0x0FFF;
 8000a02:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000a06:	e012      	b.n	8000a2e <map_vp_to_ww+0x72>

	// round-to-nearest: ((cur-min)/(span)) * 4095
	const uint32_t span = (uint32_t) maxv - (uint32_t) minv;
 8000a08:	887a      	ldrh	r2, [r7, #2]
 8000a0a:	88bb      	ldrh	r3, [r7, #4]
 8000a0c:	1ad3      	subs	r3, r2, r3
 8000a0e:	613b      	str	r3, [r7, #16]
	const uint32_t num = ((uint32_t) cur - (uint32_t) minv) * 0x0FFFu
 8000a10:	88fa      	ldrh	r2, [r7, #6]
 8000a12:	88bb      	ldrh	r3, [r7, #4]
 8000a14:	1ad2      	subs	r2, r2, r3
 8000a16:	4613      	mov	r3, r2
 8000a18:	031b      	lsls	r3, r3, #12
 8000a1a:	1a9a      	subs	r2, r3, r2
			+ (span >> 1);
 8000a1c:	693b      	ldr	r3, [r7, #16]
 8000a1e:	085b      	lsrs	r3, r3, #1
	const uint32_t num = ((uint32_t) cur - (uint32_t) minv) * 0x0FFFu
 8000a20:	4413      	add	r3, r2
 8000a22:	60fb      	str	r3, [r7, #12]
	return (uint16_t) (num / span);
 8000a24:	68fa      	ldr	r2, [r7, #12]
 8000a26:	693b      	ldr	r3, [r7, #16]
 8000a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a2c:	b29b      	uxth	r3, r3
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	371c      	adds	r7, #28
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
	...

08000a3c <updateWWCache>:
/* 01-> */-1, 0, 0, +1,
/* 10-> */+1, 0, 0, -1,
/* 11-> */0, -1, +1, 0 };

void updateWWCache(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08c      	sub	sp, #48	@ 0x30
 8000a40:	af00      	add	r7, sp, #0
	// 2) Reset group counters each frame
	BS_Hat = BS_Center = BS_Side = BS_Thumb = 0;
 8000a42:	4b89      	ldr	r3, [pc, #548]	@ (8000c68 <updateWWCache+0x22c>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	701a      	strb	r2, [r3, #0]
 8000a48:	4b87      	ldr	r3, [pc, #540]	@ (8000c68 <updateWWCache+0x22c>)
 8000a4a:	781a      	ldrb	r2, [r3, #0]
 8000a4c:	4b87      	ldr	r3, [pc, #540]	@ (8000c6c <updateWWCache+0x230>)
 8000a4e:	701a      	strb	r2, [r3, #0]
 8000a50:	4b86      	ldr	r3, [pc, #536]	@ (8000c6c <updateWWCache+0x230>)
 8000a52:	781a      	ldrb	r2, [r3, #0]
 8000a54:	4b86      	ldr	r3, [pc, #536]	@ (8000c70 <updateWWCache+0x234>)
 8000a56:	701a      	strb	r2, [r3, #0]
 8000a58:	4b85      	ldr	r3, [pc, #532]	@ (8000c70 <updateWWCache+0x234>)
 8000a5a:	781a      	ldrb	r2, [r3, #0]
 8000a5c:	4b85      	ldr	r3, [pc, #532]	@ (8000c74 <updateWWCache+0x238>)
 8000a5e:	701a      	strb	r2, [r3, #0]

	//process Hat first. hat is different from buttons

	int vp_up = VP_ISSET(1, 5);
 8000a60:	4b85      	ldr	r3, [pc, #532]	@ (8000c78 <updateWWCache+0x23c>)
 8000a62:	785b      	ldrb	r3, [r3, #1]
 8000a64:	095b      	lsrs	r3, r3, #5
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	f003 0301 	and.w	r3, r3, #1
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	bf0c      	ite	eq
 8000a70:	2301      	moveq	r3, #1
 8000a72:	2300      	movne	r3, #0
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	627b      	str	r3, [r7, #36]	@ 0x24
	int vp_down = VP_ISSET(1, 7);
 8000a78:	4b7f      	ldr	r3, [pc, #508]	@ (8000c78 <updateWWCache+0x23c>)
 8000a7a:	785b      	ldrb	r3, [r3, #1]
 8000a7c:	09db      	lsrs	r3, r3, #7
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	f003 0301 	and.w	r3, r3, #1
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	bf0c      	ite	eq
 8000a88:	2301      	moveq	r3, #1
 8000a8a:	2300      	movne	r3, #0
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	623b      	str	r3, [r7, #32]
	int vp_left = VP_ISSET(2, 0);
 8000a90:	4b79      	ldr	r3, [pc, #484]	@ (8000c78 <updateWWCache+0x23c>)
 8000a92:	789b      	ldrb	r3, [r3, #2]
 8000a94:	f003 0301 	and.w	r3, r3, #1
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	bf0c      	ite	eq
 8000a9c:	2301      	moveq	r3, #1
 8000a9e:	2300      	movne	r3, #0
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	61fb      	str	r3, [r7, #28]
	int vp_right = VP_ISSET(1, 6);
 8000aa4:	4b74      	ldr	r3, [pc, #464]	@ (8000c78 <updateWWCache+0x23c>)
 8000aa6:	785b      	ldrb	r3, [r3, #1]
 8000aa8:	099b      	lsrs	r3, r3, #6
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	f003 0301 	and.w	r3, r3, #1
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	bf0c      	ite	eq
 8000ab4:	2301      	moveq	r3, #1
 8000ab6:	2300      	movne	r3, #0
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	61bb      	str	r3, [r7, #24]

	uint8_t hatCode = ww_hat_code_from_bools(vp_up, vp_right, vp_down, vp_left);
 8000abc:	69fb      	ldr	r3, [r7, #28]
 8000abe:	6a3a      	ldr	r2, [r7, #32]
 8000ac0:	69b9      	ldr	r1, [r7, #24]
 8000ac2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000ac4:	f7ff fed7 	bl	8000876 <ww_hat_code_from_bools>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	75fb      	strb	r3, [r7, #23]
	ww_write_hat(hatCode);
 8000acc:	7dfb      	ldrb	r3, [r7, #23]
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f7ff ff5a 	bl	8000988 <ww_write_hat>

	if (vp_up || vp_down || vp_left || vp_right)
 8000ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d108      	bne.n	8000aec <updateWWCache+0xb0>
 8000ada:	6a3b      	ldr	r3, [r7, #32]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d105      	bne.n	8000aec <updateWWCache+0xb0>
 8000ae0:	69fb      	ldr	r3, [r7, #28]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d102      	bne.n	8000aec <updateWWCache+0xb0>
 8000ae6:	69bb      	ldr	r3, [r7, #24]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d002      	beq.n	8000af2 <updateWWCache+0xb6>
		BS_Hat = 1;
 8000aec:	4b61      	ldr	r3, [pc, #388]	@ (8000c74 <updateWWCache+0x238>)
 8000aee:	2201      	movs	r2, #1
 8000af0:	701a      	strb	r2, [r3, #0]

	// 3) First pass: compute group occupancy (boolean)
	for (size_t i = 0; i < ButtonCount; i++)
 8000af2:	2300      	movs	r3, #0
 8000af4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000af6:	e030      	b.n	8000b5a <updateWWCache+0x11e>
	{
		tButtonMap *m = &ButtonMap[i];
 8000af8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000afa:	4613      	mov	r3, r2
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	4413      	add	r3, r2
 8000b00:	009b      	lsls	r3, r3, #2
 8000b02:	4a5e      	ldr	r2, [pc, #376]	@ (8000c7c <updateWWCache+0x240>)
 8000b04:	4413      	add	r3, r2
 8000b06:	607b      	str	r3, [r7, #4]
		if (m->pButton)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	691b      	ldr	r3, [r3, #16]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d003      	beq.n	8000b18 <updateWWCache+0xdc>
			*(m->pButton) = 0;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	691b      	ldr	r3, [r3, #16]
 8000b14:	2200      	movs	r2, #0
 8000b16:	701a      	strb	r2, [r3, #0]
		if (!m->pBS)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d016      	beq.n	8000b4e <updateWWCache+0x112>
			continue;
		if (m->WW_Push)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	7a1b      	ldrb	r3, [r3, #8]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d114      	bne.n	8000b52 <updateWWCache+0x116>
			continue;                 // only non-push members contribute
		if (VP_ISSET(m->VP_Byte, m->VP_Bit))
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	791b      	ldrb	r3, [r3, #4]
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	4b52      	ldr	r3, [pc, #328]	@ (8000c78 <updateWWCache+0x23c>)
 8000b30:	5c9b      	ldrb	r3, [r3, r2]
 8000b32:	461a      	mov	r2, r3
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	795b      	ldrb	r3, [r3, #5]
 8000b38:	fa42 f303 	asr.w	r3, r2, r3
 8000b3c:	f003 0301 	and.w	r3, r3, #1
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d107      	bne.n	8000b54 <updateWWCache+0x118>
		{
			*m->pBS = 1;                   // boolean “someone in group is held”
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	2201      	movs	r2, #1
 8000b4a:	701a      	strb	r2, [r3, #0]
 8000b4c:	e002      	b.n	8000b54 <updateWWCache+0x118>
			continue;
 8000b4e:	bf00      	nop
 8000b50:	e000      	b.n	8000b54 <updateWWCache+0x118>
			continue;                 // only non-push members contribute
 8000b52:	bf00      	nop
	for (size_t i = 0; i < ButtonCount; i++)
 8000b54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b56:	3301      	adds	r3, #1
 8000b58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000b5a:	4b49      	ldr	r3, [pc, #292]	@ (8000c80 <updateWWCache+0x244>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d3c9      	bcc.n	8000af8 <updateWWCache+0xbc>
		}
	}

	// 4) Second pass: write WW cache
	for (size_t i = 0; i < ButtonCount; i++)
 8000b64:	2300      	movs	r3, #0
 8000b66:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000b68:	e0a7      	b.n	8000cba <updateWWCache+0x27e>
	{
		tButtonMap *m = &ButtonMap[i];
 8000b6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000b6c:	4613      	mov	r3, r2
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	4413      	add	r3, r2
 8000b72:	009b      	lsls	r3, r3, #2
 8000b74:	4a41      	ldr	r2, [pc, #260]	@ (8000c7c <updateWWCache+0x240>)
 8000b76:	4413      	add	r3, r2
 8000b78:	60fb      	str	r3, [r7, #12]
		const uint8_t mask = m->WW_Mask;
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	79db      	ldrb	r3, [r3, #7]
 8000b7e:	72fb      	strb	r3, [r7, #11]

		if (!m->WW_Push)
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	7a1b      	ldrb	r3, [r3, #8]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d13e      	bne.n	8000c06 <updateWWCache+0x1ca>
		{
			if (VP_ISSET(m->VP_Byte, m->VP_Bit))
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	791b      	ldrb	r3, [r3, #4]
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	4b3a      	ldr	r3, [pc, #232]	@ (8000c78 <updateWWCache+0x23c>)
 8000b90:	5c9b      	ldrb	r3, [r3, r2]
 8000b92:	461a      	mov	r2, r3
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	795b      	ldrb	r3, [r3, #5]
 8000b98:	fa42 f303 	asr.w	r3, r2, r3
 8000b9c:	f003 0301 	and.w	r3, r3, #1
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d119      	bne.n	8000bd8 <updateWWCache+0x19c>
			{
				WW_SET(m->WW_Byte, mask);
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	799b      	ldrb	r3, [r3, #6]
 8000ba8:	461a      	mov	r2, r3
 8000baa:	4b36      	ldr	r3, [pc, #216]	@ (8000c84 <updateWWCache+0x248>)
 8000bac:	4413      	add	r3, r2
 8000bae:	f893 20ca 	ldrb.w	r2, [r3, #202]	@ 0xca
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	799b      	ldrb	r3, [r3, #6]
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	7afb      	ldrb	r3, [r7, #11]
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	b2da      	uxtb	r2, r3
 8000bbe:	4b31      	ldr	r3, [pc, #196]	@ (8000c84 <updateWWCache+0x248>)
 8000bc0:	440b      	add	r3, r1
 8000bc2:	f883 20ca 	strb.w	r2, [r3, #202]	@ 0xca
				if (m->pButton)
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	691b      	ldr	r3, [r3, #16]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d072      	beq.n	8000cb4 <updateWWCache+0x278>
					*(m->pButton) = 1;
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	691b      	ldr	r3, [r3, #16]
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	701a      	strb	r2, [r3, #0]
 8000bd6:	e06d      	b.n	8000cb4 <updateWWCache+0x278>
			}
			else
			{
				WW_RESET(m->WW_Byte, mask);
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	799b      	ldrb	r3, [r3, #6]
 8000bdc:	461a      	mov	r2, r3
 8000bde:	4b29      	ldr	r3, [pc, #164]	@ (8000c84 <updateWWCache+0x248>)
 8000be0:	4413      	add	r3, r2
 8000be2:	f893 30ca 	ldrb.w	r3, [r3, #202]	@ 0xca
 8000be6:	b25a      	sxtb	r2, r3
 8000be8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000bec:	43db      	mvns	r3, r3
 8000bee:	b25b      	sxtb	r3, r3
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	b25a      	sxtb	r2, r3
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	799b      	ldrb	r3, [r3, #6]
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	b2d2      	uxtb	r2, r2
 8000bfc:	4b21      	ldr	r3, [pc, #132]	@ (8000c84 <updateWWCache+0x248>)
 8000bfe:	440b      	add	r3, r1
 8000c00:	f883 20ca 	strb.w	r2, [r3, #202]	@ 0xca
 8000c04:	e056      	b.n	8000cb4 <updateWWCache+0x278>
		}
		else
		{
			// Push in same group is falsely reported as pressed by Virpil when any dir is held.
			// Suppress push if any other in group is down.
			if (VP_ISSET(m->VP_Byte, m->VP_Bit) && m->pBS && *m->pBS == 0)
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	791b      	ldrb	r3, [r3, #4]
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	4b1a      	ldr	r3, [pc, #104]	@ (8000c78 <updateWWCache+0x23c>)
 8000c0e:	5c9b      	ldrb	r3, [r3, r2]
 8000c10:	461a      	mov	r2, r3
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	795b      	ldrb	r3, [r3, #5]
 8000c16:	fa42 f303 	asr.w	r3, r2, r3
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d132      	bne.n	8000c88 <updateWWCache+0x24c>
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	68db      	ldr	r3, [r3, #12]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d02e      	beq.n	8000c88 <updateWWCache+0x24c>
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	68db      	ldr	r3, [r3, #12]
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d129      	bne.n	8000c88 <updateWWCache+0x24c>
			{
				WW_SET(m->WW_Byte, mask);
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	799b      	ldrb	r3, [r3, #6]
 8000c38:	461a      	mov	r2, r3
 8000c3a:	4b12      	ldr	r3, [pc, #72]	@ (8000c84 <updateWWCache+0x248>)
 8000c3c:	4413      	add	r3, r2
 8000c3e:	f893 20ca 	ldrb.w	r2, [r3, #202]	@ 0xca
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	799b      	ldrb	r3, [r3, #6]
 8000c46:	4619      	mov	r1, r3
 8000c48:	7afb      	ldrb	r3, [r7, #11]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	b2da      	uxtb	r2, r3
 8000c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8000c84 <updateWWCache+0x248>)
 8000c50:	440b      	add	r3, r1
 8000c52:	f883 20ca 	strb.w	r2, [r3, #202]	@ 0xca
				if (m->pButton)
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	691b      	ldr	r3, [r3, #16]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d02a      	beq.n	8000cb4 <updateWWCache+0x278>
					*(m->pButton) = 1;
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	691b      	ldr	r3, [r3, #16]
 8000c62:	2201      	movs	r2, #1
 8000c64:	701a      	strb	r2, [r3, #0]
				if (m->pButton)
 8000c66:	e025      	b.n	8000cb4 <updateWWCache+0x278>
 8000c68:	200004c0 	.word	0x200004c0
 8000c6c:	200004bf 	.word	0x200004bf
 8000c70:	200004be 	.word	0x200004be
 8000c74:	200004bd 	.word	0x200004bd
 8000c78:	20000020 	.word	0x20000020
 8000c7c:	20000160 	.word	0x20000160
 8000c80:	20000318 	.word	0x20000318
 8000c84:	20000030 	.word	0x20000030
			}
			else
			{
				WW_RESET(m->WW_Byte, mask);
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	799b      	ldrb	r3, [r3, #6]
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	4b8f      	ldr	r3, [pc, #572]	@ (8000ecc <updateWWCache+0x490>)
 8000c90:	4413      	add	r3, r2
 8000c92:	f893 30ca 	ldrb.w	r3, [r3, #202]	@ 0xca
 8000c96:	b25a      	sxtb	r2, r3
 8000c98:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000c9c:	43db      	mvns	r3, r3
 8000c9e:	b25b      	sxtb	r3, r3
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	b25a      	sxtb	r2, r3
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	799b      	ldrb	r3, [r3, #6]
 8000ca8:	4619      	mov	r1, r3
 8000caa:	b2d2      	uxtb	r2, r2
 8000cac:	4b87      	ldr	r3, [pc, #540]	@ (8000ecc <updateWWCache+0x490>)
 8000cae:	440b      	add	r3, r1
 8000cb0:	f883 20ca 	strb.w	r2, [r3, #202]	@ 0xca
	for (size_t i = 0; i < ButtonCount; i++)
 8000cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000cba:	4b85      	ldr	r3, [pc, #532]	@ (8000ed0 <updateWWCache+0x494>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	f4ff af52 	bcc.w	8000b6a <updateWWCache+0x12e>
			}
		}
	}

	WW_RESET(3, 0x02); //get rid of z-axis detetn buttons
 8000cc6:	4b81      	ldr	r3, [pc, #516]	@ (8000ecc <updateWWCache+0x490>)
 8000cc8:	f893 30cd 	ldrb.w	r3, [r3, #205]	@ 0xcd
 8000ccc:	f023 0302 	bic.w	r3, r3, #2
 8000cd0:	b2da      	uxtb	r2, r3
 8000cd2:	4b7e      	ldr	r3, [pc, #504]	@ (8000ecc <updateWWCache+0x490>)
 8000cd4:	f883 20cd 	strb.w	r2, [r3, #205]	@ 0xcd

	uint8_t CurrDialBits = (VP_Buffer[2] >> 6) & 0x03;
 8000cd8:	4b7e      	ldr	r3, [pc, #504]	@ (8000ed4 <updateWWCache+0x498>)
 8000cda:	789b      	ldrb	r3, [r3, #2]
 8000cdc:	099b      	lsrs	r3, r3, #6
 8000cde:	75bb      	strb	r3, [r7, #22]
	int8_t dir = DialDirections[(PrevDialBits << 2) | CurrDialBits];
 8000ce0:	4b7d      	ldr	r3, [pc, #500]	@ (8000ed8 <updateWWCache+0x49c>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	009a      	lsls	r2, r3, #2
 8000ce6:	7dbb      	ldrb	r3, [r7, #22]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	4a7c      	ldr	r2, [pc, #496]	@ (8000edc <updateWWCache+0x4a0>)
 8000cec:	5cd3      	ldrb	r3, [r2, r3]
 8000cee:	757b      	strb	r3, [r7, #21]
	PrevDialBits = CurrDialBits;
 8000cf0:	4a79      	ldr	r2, [pc, #484]	@ (8000ed8 <updateWWCache+0x49c>)
 8000cf2:	7dbb      	ldrb	r3, [r7, #22]
 8000cf4:	7013      	strb	r3, [r2, #0]

	DialDirection += dir;
 8000cf6:	4b7a      	ldr	r3, [pc, #488]	@ (8000ee0 <updateWWCache+0x4a4>)
 8000cf8:	f993 3000 	ldrsb.w	r3, [r3]
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	7d7b      	ldrb	r3, [r7, #21]
 8000d00:	4413      	add	r3, r2
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	b25a      	sxtb	r2, r3
 8000d06:	4b76      	ldr	r3, [pc, #472]	@ (8000ee0 <updateWWCache+0x4a4>)
 8000d08:	701a      	strb	r2, [r3, #0]

	//analog axes
	//sometimes MSB byte get corrupted and is copied from previous byte. in cese both are equal, juıst skip updating that axis

	//if (VP_Buffer[8] != VP_Buffer[7] && VP_Buffer[6] != VP_Buffer[5])
		CurrSlider = VP_Buffer[6] + ((VP_Buffer[8] & 0x3F) << 8);
 8000d0a:	4b72      	ldr	r3, [pc, #456]	@ (8000ed4 <updateWWCache+0x498>)
 8000d0c:	799b      	ldrb	r3, [r3, #6]
 8000d0e:	461a      	mov	r2, r3
 8000d10:	4b70      	ldr	r3, [pc, #448]	@ (8000ed4 <updateWWCache+0x498>)
 8000d12:	7a1b      	ldrb	r3, [r3, #8]
 8000d14:	021b      	lsls	r3, r3, #8
 8000d16:	b29b      	uxth	r3, r3
 8000d18:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8000d1c:	b29b      	uxth	r3, r3
 8000d1e:	4413      	add	r3, r2
 8000d20:	b29a      	uxth	r2, r3
 8000d22:	4b70      	ldr	r3, [pc, #448]	@ (8000ee4 <updateWWCache+0x4a8>)
 8000d24:	801a      	strh	r2, [r3, #0]
	//if (VP_Buffer[5] != VP_Buffer[4] && VP_Buffer[4] != VP_Buffer[3])
		CurrTwistZ = VP_Buffer[4] + ((VP_Buffer[5] & 0x3F) << 8);
 8000d26:	4b6b      	ldr	r3, [pc, #428]	@ (8000ed4 <updateWWCache+0x498>)
 8000d28:	791b      	ldrb	r3, [r3, #4]
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	4b69      	ldr	r3, [pc, #420]	@ (8000ed4 <updateWWCache+0x498>)
 8000d2e:	795b      	ldrb	r3, [r3, #5]
 8000d30:	021b      	lsls	r3, r3, #8
 8000d32:	b29b      	uxth	r3, r3
 8000d34:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8000d38:	b29b      	uxth	r3, r3
 8000d3a:	4413      	add	r3, r2
 8000d3c:	b29a      	uxth	r2, r3
 8000d3e:	4b6a      	ldr	r3, [pc, #424]	@ (8000ee8 <updateWWCache+0x4ac>)
 8000d40:	801a      	strh	r2, [r3, #0]
	//if (VP_Buffer[12] != VP_Buffer[11]) {
		CurrThumbStickX = ((uint16_t) (((VP_Buffer[12] >> 2) & 0x03) << 8) | VP_Buffer[11]);
 8000d42:	4b64      	ldr	r3, [pc, #400]	@ (8000ed4 <updateWWCache+0x498>)
 8000d44:	7b1b      	ldrb	r3, [r3, #12]
 8000d46:	089b      	lsrs	r3, r3, #2
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	b21b      	sxth	r3, r3
 8000d4c:	021b      	lsls	r3, r3, #8
 8000d4e:	b21b      	sxth	r3, r3
 8000d50:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8000d54:	b21a      	sxth	r2, r3
 8000d56:	4b5f      	ldr	r3, [pc, #380]	@ (8000ed4 <updateWWCache+0x498>)
 8000d58:	7adb      	ldrb	r3, [r3, #11]
 8000d5a:	b21b      	sxth	r3, r3
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	b21b      	sxth	r3, r3
 8000d60:	b29a      	uxth	r2, r3
 8000d62:	4b62      	ldr	r3, [pc, #392]	@ (8000eec <updateWWCache+0x4b0>)
 8000d64:	801a      	strh	r2, [r3, #0]
		CurrThumbStickY = ((uint16_t) ((VP_Buffer[12] & 0x03) << 8) | VP_Buffer[10]);
 8000d66:	4b5b      	ldr	r3, [pc, #364]	@ (8000ed4 <updateWWCache+0x498>)
 8000d68:	7b1b      	ldrb	r3, [r3, #12]
 8000d6a:	b21b      	sxth	r3, r3
 8000d6c:	021b      	lsls	r3, r3, #8
 8000d6e:	b21b      	sxth	r3, r3
 8000d70:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8000d74:	b21a      	sxth	r2, r3
 8000d76:	4b57      	ldr	r3, [pc, #348]	@ (8000ed4 <updateWWCache+0x498>)
 8000d78:	7a9b      	ldrb	r3, [r3, #10]
 8000d7a:	b21b      	sxth	r3, r3
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	b21b      	sxth	r3, r3
 8000d80:	b29a      	uxth	r2, r3
 8000d82:	4b5b      	ldr	r3, [pc, #364]	@ (8000ef0 <updateWWCache+0x4b4>)
 8000d84:	801a      	strh	r2, [r3, #0]
//	PrevThumbStickY = CurrThumbStickY;
//#endif //DEBUG

#define SET_MIN_MAX(a,b,c,d) if (b > calibData.c) {calibData.c = b; printf("%s max = %d\n", a, b);} else if (b < calibData.d) {calibData.d = b; printf("%s min = %d\n", a, b);}

	if (CalibrationActive)
 8000d86:	4b5b      	ldr	r3, [pc, #364]	@ (8000ef4 <updateWWCache+0x4b8>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	f000 80c6 	beq.w	8000f1c <updateWWCache+0x4e0>
	{
		SET_MIN_MAX("Slider", CurrSlider, MaxSlider, MinSlider);
 8000d90:	4b59      	ldr	r3, [pc, #356]	@ (8000ef8 <updateWWCache+0x4bc>)
 8000d92:	89da      	ldrh	r2, [r3, #14]
 8000d94:	4b53      	ldr	r3, [pc, #332]	@ (8000ee4 <updateWWCache+0x4a8>)
 8000d96:	881b      	ldrh	r3, [r3, #0]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d20b      	bcs.n	8000db4 <updateWWCache+0x378>
 8000d9c:	4b51      	ldr	r3, [pc, #324]	@ (8000ee4 <updateWWCache+0x4a8>)
 8000d9e:	881a      	ldrh	r2, [r3, #0]
 8000da0:	4b55      	ldr	r3, [pc, #340]	@ (8000ef8 <updateWWCache+0x4bc>)
 8000da2:	81da      	strh	r2, [r3, #14]
 8000da4:	4b4f      	ldr	r3, [pc, #316]	@ (8000ee4 <updateWWCache+0x4a8>)
 8000da6:	881b      	ldrh	r3, [r3, #0]
 8000da8:	461a      	mov	r2, r3
 8000daa:	4954      	ldr	r1, [pc, #336]	@ (8000efc <updateWWCache+0x4c0>)
 8000dac:	4854      	ldr	r0, [pc, #336]	@ (8000f00 <updateWWCache+0x4c4>)
 8000dae:	f004 fb33 	bl	8005418 <iprintf>
 8000db2:	e010      	b.n	8000dd6 <updateWWCache+0x39a>
 8000db4:	4b50      	ldr	r3, [pc, #320]	@ (8000ef8 <updateWWCache+0x4bc>)
 8000db6:	899a      	ldrh	r2, [r3, #12]
 8000db8:	4b4a      	ldr	r3, [pc, #296]	@ (8000ee4 <updateWWCache+0x4a8>)
 8000dba:	881b      	ldrh	r3, [r3, #0]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d90a      	bls.n	8000dd6 <updateWWCache+0x39a>
 8000dc0:	4b48      	ldr	r3, [pc, #288]	@ (8000ee4 <updateWWCache+0x4a8>)
 8000dc2:	881a      	ldrh	r2, [r3, #0]
 8000dc4:	4b4c      	ldr	r3, [pc, #304]	@ (8000ef8 <updateWWCache+0x4bc>)
 8000dc6:	819a      	strh	r2, [r3, #12]
 8000dc8:	4b46      	ldr	r3, [pc, #280]	@ (8000ee4 <updateWWCache+0x4a8>)
 8000dca:	881b      	ldrh	r3, [r3, #0]
 8000dcc:	461a      	mov	r2, r3
 8000dce:	494b      	ldr	r1, [pc, #300]	@ (8000efc <updateWWCache+0x4c0>)
 8000dd0:	484c      	ldr	r0, [pc, #304]	@ (8000f04 <updateWWCache+0x4c8>)
 8000dd2:	f004 fb21 	bl	8005418 <iprintf>
		SET_MIN_MAX("TwistZ", CurrTwistZ, MaxTwistZ, MinTwistZ);
 8000dd6:	4b48      	ldr	r3, [pc, #288]	@ (8000ef8 <updateWWCache+0x4bc>)
 8000dd8:	895a      	ldrh	r2, [r3, #10]
 8000dda:	4b43      	ldr	r3, [pc, #268]	@ (8000ee8 <updateWWCache+0x4ac>)
 8000ddc:	881b      	ldrh	r3, [r3, #0]
 8000dde:	429a      	cmp	r2, r3
 8000de0:	d20b      	bcs.n	8000dfa <updateWWCache+0x3be>
 8000de2:	4b41      	ldr	r3, [pc, #260]	@ (8000ee8 <updateWWCache+0x4ac>)
 8000de4:	881a      	ldrh	r2, [r3, #0]
 8000de6:	4b44      	ldr	r3, [pc, #272]	@ (8000ef8 <updateWWCache+0x4bc>)
 8000de8:	815a      	strh	r2, [r3, #10]
 8000dea:	4b3f      	ldr	r3, [pc, #252]	@ (8000ee8 <updateWWCache+0x4ac>)
 8000dec:	881b      	ldrh	r3, [r3, #0]
 8000dee:	461a      	mov	r2, r3
 8000df0:	4945      	ldr	r1, [pc, #276]	@ (8000f08 <updateWWCache+0x4cc>)
 8000df2:	4843      	ldr	r0, [pc, #268]	@ (8000f00 <updateWWCache+0x4c4>)
 8000df4:	f004 fb10 	bl	8005418 <iprintf>
 8000df8:	e010      	b.n	8000e1c <updateWWCache+0x3e0>
 8000dfa:	4b3f      	ldr	r3, [pc, #252]	@ (8000ef8 <updateWWCache+0x4bc>)
 8000dfc:	891a      	ldrh	r2, [r3, #8]
 8000dfe:	4b3a      	ldr	r3, [pc, #232]	@ (8000ee8 <updateWWCache+0x4ac>)
 8000e00:	881b      	ldrh	r3, [r3, #0]
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d90a      	bls.n	8000e1c <updateWWCache+0x3e0>
 8000e06:	4b38      	ldr	r3, [pc, #224]	@ (8000ee8 <updateWWCache+0x4ac>)
 8000e08:	881a      	ldrh	r2, [r3, #0]
 8000e0a:	4b3b      	ldr	r3, [pc, #236]	@ (8000ef8 <updateWWCache+0x4bc>)
 8000e0c:	811a      	strh	r2, [r3, #8]
 8000e0e:	4b36      	ldr	r3, [pc, #216]	@ (8000ee8 <updateWWCache+0x4ac>)
 8000e10:	881b      	ldrh	r3, [r3, #0]
 8000e12:	461a      	mov	r2, r3
 8000e14:	493c      	ldr	r1, [pc, #240]	@ (8000f08 <updateWWCache+0x4cc>)
 8000e16:	483b      	ldr	r0, [pc, #236]	@ (8000f04 <updateWWCache+0x4c8>)
 8000e18:	f004 fafe 	bl	8005418 <iprintf>
		SET_MIN_MAX("ThumbStickX", CurrThumbStickX, MaxThumbStickX, MinThumbStickX);
 8000e1c:	4b36      	ldr	r3, [pc, #216]	@ (8000ef8 <updateWWCache+0x4bc>)
 8000e1e:	885a      	ldrh	r2, [r3, #2]
 8000e20:	4b32      	ldr	r3, [pc, #200]	@ (8000eec <updateWWCache+0x4b0>)
 8000e22:	881b      	ldrh	r3, [r3, #0]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d20b      	bcs.n	8000e40 <updateWWCache+0x404>
 8000e28:	4b30      	ldr	r3, [pc, #192]	@ (8000eec <updateWWCache+0x4b0>)
 8000e2a:	881a      	ldrh	r2, [r3, #0]
 8000e2c:	4b32      	ldr	r3, [pc, #200]	@ (8000ef8 <updateWWCache+0x4bc>)
 8000e2e:	805a      	strh	r2, [r3, #2]
 8000e30:	4b2e      	ldr	r3, [pc, #184]	@ (8000eec <updateWWCache+0x4b0>)
 8000e32:	881b      	ldrh	r3, [r3, #0]
 8000e34:	461a      	mov	r2, r3
 8000e36:	4935      	ldr	r1, [pc, #212]	@ (8000f0c <updateWWCache+0x4d0>)
 8000e38:	4831      	ldr	r0, [pc, #196]	@ (8000f00 <updateWWCache+0x4c4>)
 8000e3a:	f004 faed 	bl	8005418 <iprintf>
 8000e3e:	e010      	b.n	8000e62 <updateWWCache+0x426>
 8000e40:	4b2d      	ldr	r3, [pc, #180]	@ (8000ef8 <updateWWCache+0x4bc>)
 8000e42:	881a      	ldrh	r2, [r3, #0]
 8000e44:	4b29      	ldr	r3, [pc, #164]	@ (8000eec <updateWWCache+0x4b0>)
 8000e46:	881b      	ldrh	r3, [r3, #0]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d90a      	bls.n	8000e62 <updateWWCache+0x426>
 8000e4c:	4b27      	ldr	r3, [pc, #156]	@ (8000eec <updateWWCache+0x4b0>)
 8000e4e:	881a      	ldrh	r2, [r3, #0]
 8000e50:	4b29      	ldr	r3, [pc, #164]	@ (8000ef8 <updateWWCache+0x4bc>)
 8000e52:	801a      	strh	r2, [r3, #0]
 8000e54:	4b25      	ldr	r3, [pc, #148]	@ (8000eec <updateWWCache+0x4b0>)
 8000e56:	881b      	ldrh	r3, [r3, #0]
 8000e58:	461a      	mov	r2, r3
 8000e5a:	492c      	ldr	r1, [pc, #176]	@ (8000f0c <updateWWCache+0x4d0>)
 8000e5c:	4829      	ldr	r0, [pc, #164]	@ (8000f04 <updateWWCache+0x4c8>)
 8000e5e:	f004 fadb 	bl	8005418 <iprintf>
		SET_MIN_MAX("ThumbStickY", CurrThumbStickY, MaxThumbStickY, MinThumbStickY);
 8000e62:	4b25      	ldr	r3, [pc, #148]	@ (8000ef8 <updateWWCache+0x4bc>)
 8000e64:	88da      	ldrh	r2, [r3, #6]
 8000e66:	4b22      	ldr	r3, [pc, #136]	@ (8000ef0 <updateWWCache+0x4b4>)
 8000e68:	881b      	ldrh	r3, [r3, #0]
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	d20b      	bcs.n	8000e86 <updateWWCache+0x44a>
 8000e6e:	4b20      	ldr	r3, [pc, #128]	@ (8000ef0 <updateWWCache+0x4b4>)
 8000e70:	881a      	ldrh	r2, [r3, #0]
 8000e72:	4b21      	ldr	r3, [pc, #132]	@ (8000ef8 <updateWWCache+0x4bc>)
 8000e74:	80da      	strh	r2, [r3, #6]
 8000e76:	4b1e      	ldr	r3, [pc, #120]	@ (8000ef0 <updateWWCache+0x4b4>)
 8000e78:	881b      	ldrh	r3, [r3, #0]
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	4924      	ldr	r1, [pc, #144]	@ (8000f10 <updateWWCache+0x4d4>)
 8000e7e:	4820      	ldr	r0, [pc, #128]	@ (8000f00 <updateWWCache+0x4c4>)
 8000e80:	f004 faca 	bl	8005418 <iprintf>
 8000e84:	e010      	b.n	8000ea8 <updateWWCache+0x46c>
 8000e86:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef8 <updateWWCache+0x4bc>)
 8000e88:	889a      	ldrh	r2, [r3, #4]
 8000e8a:	4b19      	ldr	r3, [pc, #100]	@ (8000ef0 <updateWWCache+0x4b4>)
 8000e8c:	881b      	ldrh	r3, [r3, #0]
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	d90a      	bls.n	8000ea8 <updateWWCache+0x46c>
 8000e92:	4b17      	ldr	r3, [pc, #92]	@ (8000ef0 <updateWWCache+0x4b4>)
 8000e94:	881a      	ldrh	r2, [r3, #0]
 8000e96:	4b18      	ldr	r3, [pc, #96]	@ (8000ef8 <updateWWCache+0x4bc>)
 8000e98:	809a      	strh	r2, [r3, #4]
 8000e9a:	4b15      	ldr	r3, [pc, #84]	@ (8000ef0 <updateWWCache+0x4b4>)
 8000e9c:	881b      	ldrh	r3, [r3, #0]
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	491b      	ldr	r1, [pc, #108]	@ (8000f10 <updateWWCache+0x4d4>)
 8000ea2:	4818      	ldr	r0, [pc, #96]	@ (8000f04 <updateWWCache+0x4c8>)
 8000ea4:	f004 fab8 	bl	8005418 <iprintf>
		if (RedDown)
 8000ea8:	4b1a      	ldr	r3, [pc, #104]	@ (8000f14 <updateWWCache+0x4d8>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d003      	beq.n	8000eb8 <updateWWCache+0x47c>
			calibData.SliderDetent1 = CurrSlider;
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee4 <updateWWCache+0x4a8>)
 8000eb2:	881a      	ldrh	r2, [r3, #0]
 8000eb4:	4b10      	ldr	r3, [pc, #64]	@ (8000ef8 <updateWWCache+0x4bc>)
 8000eb6:	821a      	strh	r2, [r3, #16]
		if (BlackDown)
 8000eb8:	4b17      	ldr	r3, [pc, #92]	@ (8000f18 <updateWWCache+0x4dc>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	f000 80ef 	beq.w	80010a0 <updateWWCache+0x664>
			calibData.SliderDetent2 = CurrSlider;
 8000ec2:	4b08      	ldr	r3, [pc, #32]	@ (8000ee4 <updateWWCache+0x4a8>)
 8000ec4:	881a      	ldrh	r2, [r3, #0]
 8000ec6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef8 <updateWWCache+0x4bc>)
 8000ec8:	825a      	strh	r2, [r3, #18]
		val = 4096 - map_vp_to_ww(CurrThumbStickY, calibData.MinThumbStickY, calibData.MaxThumbStickY);
		WW_WRITE_AXIS(WW_THUMBY_INDEX, 2, val);
		WW_WRITE_AXIS(WW_THUMBY_INDEX+4, 2, CurrThumbStickY);
	}

}
 8000eca:	e0e9      	b.n	80010a0 <updateWWCache+0x664>
 8000ecc:	20000030 	.word	0x20000030
 8000ed0:	20000318 	.word	0x20000318
 8000ed4:	20000020 	.word	0x20000020
 8000ed8:	200004a8 	.word	0x200004a8
 8000edc:	080067f0 	.word	0x080067f0
 8000ee0:	200004da 	.word	0x200004da
 8000ee4:	2000001e 	.word	0x2000001e
 8000ee8:	2000001c 	.word	0x2000001c
 8000eec:	20000018 	.word	0x20000018
 8000ef0:	2000001a 	.word	0x2000001a
 8000ef4:	200004d9 	.word	0x200004d9
 8000ef8:	20000000 	.word	0x20000000
 8000efc:	080065a4 	.word	0x080065a4
 8000f00:	080065ac 	.word	0x080065ac
 8000f04:	080065bc 	.word	0x080065bc
 8000f08:	080065cc 	.word	0x080065cc
 8000f0c:	080065d4 	.word	0x080065d4
 8000f10:	080065e0 	.word	0x080065e0
 8000f14:	200004a9 	.word	0x200004a9
 8000f18:	200004aa 	.word	0x200004aa
		uint16_t val = 4096 - map_vp_to_ww(CurrSlider, calibData.MinSlider, calibData.MaxSlider);
 8000f1c:	4b62      	ldr	r3, [pc, #392]	@ (80010a8 <updateWWCache+0x66c>)
 8000f1e:	881b      	ldrh	r3, [r3, #0]
 8000f20:	4a62      	ldr	r2, [pc, #392]	@ (80010ac <updateWWCache+0x670>)
 8000f22:	8991      	ldrh	r1, [r2, #12]
 8000f24:	4a61      	ldr	r2, [pc, #388]	@ (80010ac <updateWWCache+0x670>)
 8000f26:	89d2      	ldrh	r2, [r2, #14]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff fd47 	bl	80009bc <map_vp_to_ww>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8000f34:	827b      	strh	r3, [r7, #18]
		WW_WRITE_AXIS(WW_SLIDER_INDEX, 2, val);
 8000f36:	8a7b      	ldrh	r3, [r7, #18]
 8000f38:	b2da      	uxtb	r2, r3
 8000f3a:	4b5d      	ldr	r3, [pc, #372]	@ (80010b0 <updateWWCache+0x674>)
 8000f3c:	f883 20fe 	strb.w	r2, [r3, #254]	@ 0xfe
 8000f40:	8a7b      	ldrh	r3, [r7, #18]
 8000f42:	0a1b      	lsrs	r3, r3, #8
 8000f44:	b29b      	uxth	r3, r3
 8000f46:	b2da      	uxtb	r2, r3
 8000f48:	4b59      	ldr	r3, [pc, #356]	@ (80010b0 <updateWWCache+0x674>)
 8000f4a:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff
		WW_WRITE_AXIS(WW_SLIDER_INDEX+4, 2, CurrSlider);
 8000f4e:	4b56      	ldr	r3, [pc, #344]	@ (80010a8 <updateWWCache+0x66c>)
 8000f50:	881b      	ldrh	r3, [r3, #0]
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	4b56      	ldr	r3, [pc, #344]	@ (80010b0 <updateWWCache+0x674>)
 8000f56:	f883 2126 	strb.w	r2, [r3, #294]	@ 0x126
 8000f5a:	4b53      	ldr	r3, [pc, #332]	@ (80010a8 <updateWWCache+0x66c>)
 8000f5c:	881b      	ldrh	r3, [r3, #0]
 8000f5e:	0a1b      	lsrs	r3, r3, #8
 8000f60:	b29b      	uxth	r3, r3
 8000f62:	b2da      	uxtb	r2, r3
 8000f64:	4b52      	ldr	r3, [pc, #328]	@ (80010b0 <updateWWCache+0x674>)
 8000f66:	f883 2127 	strb.w	r2, [r3, #295]	@ 0x127
		WW_RESET(3, 0xC0);
 8000f6a:	4b51      	ldr	r3, [pc, #324]	@ (80010b0 <updateWWCache+0x674>)
 8000f6c:	f893 30cd 	ldrb.w	r3, [r3, #205]	@ 0xcd
 8000f70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000f74:	b2da      	uxtb	r2, r3
 8000f76:	4b4e      	ldr	r3, [pc, #312]	@ (80010b0 <updateWWCache+0x674>)
 8000f78:	f883 20cd 	strb.w	r2, [r3, #205]	@ 0xcd
		if (val > 3400) //trigger secont pinky detent
 8000f7c:	8a7b      	ldrh	r3, [r7, #18]
 8000f7e:	f640 5248 	movw	r2, #3400	@ 0xd48
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d909      	bls.n	8000f9a <updateWWCache+0x55e>
			WW_SET(3, 0xC0);
 8000f86:	4b4a      	ldr	r3, [pc, #296]	@ (80010b0 <updateWWCache+0x674>)
 8000f88:	f893 30cd 	ldrb.w	r3, [r3, #205]	@ 0xcd
 8000f8c:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8000f90:	b2da      	uxtb	r2, r3
 8000f92:	4b47      	ldr	r3, [pc, #284]	@ (80010b0 <updateWWCache+0x674>)
 8000f94:	f883 20cd 	strb.w	r2, [r3, #205]	@ 0xcd
 8000f98:	e00d      	b.n	8000fb6 <updateWWCache+0x57a>
		else if (val > 1250)
 8000f9a:	8a7b      	ldrh	r3, [r7, #18]
 8000f9c:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d908      	bls.n	8000fb6 <updateWWCache+0x57a>
			WW_SET(3, 0x40);
 8000fa4:	4b42      	ldr	r3, [pc, #264]	@ (80010b0 <updateWWCache+0x674>)
 8000fa6:	f893 30cd 	ldrb.w	r3, [r3, #205]	@ 0xcd
 8000faa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fae:	b2da      	uxtb	r2, r3
 8000fb0:	4b3f      	ldr	r3, [pc, #252]	@ (80010b0 <updateWWCache+0x674>)
 8000fb2:	f883 20cd 	strb.w	r2, [r3, #205]	@ 0xcd
		val = 4096 - map_vp_to_ww(CurrTwistZ, calibData.MinTwistZ, calibData.MaxTwistZ);
 8000fb6:	4b3f      	ldr	r3, [pc, #252]	@ (80010b4 <updateWWCache+0x678>)
 8000fb8:	881b      	ldrh	r3, [r3, #0]
 8000fba:	4a3c      	ldr	r2, [pc, #240]	@ (80010ac <updateWWCache+0x670>)
 8000fbc:	8911      	ldrh	r1, [r2, #8]
 8000fbe:	4a3b      	ldr	r2, [pc, #236]	@ (80010ac <updateWWCache+0x670>)
 8000fc0:	8952      	ldrh	r2, [r2, #10]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff fcfa 	bl	80009bc <map_vp_to_ww>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8000fce:	827b      	strh	r3, [r7, #18]
		WW_WRITE_AXIS(WW_ZAXIS_INDEX, 2, val);
 8000fd0:	8a7b      	ldrh	r3, [r7, #18]
 8000fd2:	b2da      	uxtb	r2, r3
 8000fd4:	4b36      	ldr	r3, [pc, #216]	@ (80010b0 <updateWWCache+0x674>)
 8000fd6:	f883 20f4 	strb.w	r2, [r3, #244]	@ 0xf4
 8000fda:	8a7b      	ldrh	r3, [r7, #18]
 8000fdc:	0a1b      	lsrs	r3, r3, #8
 8000fde:	b29b      	uxth	r3, r3
 8000fe0:	b2da      	uxtb	r2, r3
 8000fe2:	4b33      	ldr	r3, [pc, #204]	@ (80010b0 <updateWWCache+0x674>)
 8000fe4:	f883 20f5 	strb.w	r2, [r3, #245]	@ 0xf5
		WW_WRITE_AXIS(WW_ZAXIS_INDEX+4, 2, CurrTwistZ);
 8000fe8:	4b32      	ldr	r3, [pc, #200]	@ (80010b4 <updateWWCache+0x678>)
 8000fea:	881b      	ldrh	r3, [r3, #0]
 8000fec:	b2da      	uxtb	r2, r3
 8000fee:	4b30      	ldr	r3, [pc, #192]	@ (80010b0 <updateWWCache+0x674>)
 8000ff0:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
 8000ff4:	4b2f      	ldr	r3, [pc, #188]	@ (80010b4 <updateWWCache+0x678>)
 8000ff6:	881b      	ldrh	r3, [r3, #0]
 8000ff8:	0a1b      	lsrs	r3, r3, #8
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	b2da      	uxtb	r2, r3
 8000ffe:	4b2c      	ldr	r3, [pc, #176]	@ (80010b0 <updateWWCache+0x674>)
 8001000:	f883 211d 	strb.w	r2, [r3, #285]	@ 0x11d
		val = 4096 - map_vp_to_ww(CurrThumbStickX, calibData.MinThumbStickX, calibData.MaxThumbStickX);
 8001004:	4b2c      	ldr	r3, [pc, #176]	@ (80010b8 <updateWWCache+0x67c>)
 8001006:	881b      	ldrh	r3, [r3, #0]
 8001008:	4a28      	ldr	r2, [pc, #160]	@ (80010ac <updateWWCache+0x670>)
 800100a:	8811      	ldrh	r1, [r2, #0]
 800100c:	4a27      	ldr	r2, [pc, #156]	@ (80010ac <updateWWCache+0x670>)
 800100e:	8852      	ldrh	r2, [r2, #2]
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff fcd3 	bl	80009bc <map_vp_to_ww>
 8001016:	4603      	mov	r3, r0
 8001018:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 800101c:	827b      	strh	r3, [r7, #18]
		WW_WRITE_AXIS(WW_THUMBX_INDEX, 2, val);
 800101e:	8a7b      	ldrh	r3, [r7, #18]
 8001020:	b2da      	uxtb	r2, r3
 8001022:	4b23      	ldr	r3, [pc, #140]	@ (80010b0 <updateWWCache+0x674>)
 8001024:	f883 20e0 	strb.w	r2, [r3, #224]	@ 0xe0
 8001028:	8a7b      	ldrh	r3, [r7, #18]
 800102a:	0a1b      	lsrs	r3, r3, #8
 800102c:	b29b      	uxth	r3, r3
 800102e:	b2da      	uxtb	r2, r3
 8001030:	4b1f      	ldr	r3, [pc, #124]	@ (80010b0 <updateWWCache+0x674>)
 8001032:	f883 20e1 	strb.w	r2, [r3, #225]	@ 0xe1
		WW_WRITE_AXIS(WW_THUMBX_INDEX+4, 2, CurrThumbStickX);
 8001036:	4b20      	ldr	r3, [pc, #128]	@ (80010b8 <updateWWCache+0x67c>)
 8001038:	881b      	ldrh	r3, [r3, #0]
 800103a:	b2da      	uxtb	r2, r3
 800103c:	4b1c      	ldr	r3, [pc, #112]	@ (80010b0 <updateWWCache+0x674>)
 800103e:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
 8001042:	4b1d      	ldr	r3, [pc, #116]	@ (80010b8 <updateWWCache+0x67c>)
 8001044:	881b      	ldrh	r3, [r3, #0]
 8001046:	0a1b      	lsrs	r3, r3, #8
 8001048:	b29b      	uxth	r3, r3
 800104a:	b2da      	uxtb	r2, r3
 800104c:	4b18      	ldr	r3, [pc, #96]	@ (80010b0 <updateWWCache+0x674>)
 800104e:	f883 2109 	strb.w	r2, [r3, #265]	@ 0x109
		val = 4096 - map_vp_to_ww(CurrThumbStickY, calibData.MinThumbStickY, calibData.MaxThumbStickY);
 8001052:	4b1a      	ldr	r3, [pc, #104]	@ (80010bc <updateWWCache+0x680>)
 8001054:	881b      	ldrh	r3, [r3, #0]
 8001056:	4a15      	ldr	r2, [pc, #84]	@ (80010ac <updateWWCache+0x670>)
 8001058:	8891      	ldrh	r1, [r2, #4]
 800105a:	4a14      	ldr	r2, [pc, #80]	@ (80010ac <updateWWCache+0x670>)
 800105c:	88d2      	ldrh	r2, [r2, #6]
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff fcac 	bl	80009bc <map_vp_to_ww>
 8001064:	4603      	mov	r3, r0
 8001066:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 800106a:	827b      	strh	r3, [r7, #18]
		WW_WRITE_AXIS(WW_THUMBY_INDEX, 2, val);
 800106c:	8a7b      	ldrh	r3, [r7, #18]
 800106e:	b2da      	uxtb	r2, r3
 8001070:	4b0f      	ldr	r3, [pc, #60]	@ (80010b0 <updateWWCache+0x674>)
 8001072:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
 8001076:	8a7b      	ldrh	r3, [r7, #18]
 8001078:	0a1b      	lsrs	r3, r3, #8
 800107a:	b29b      	uxth	r3, r3
 800107c:	b2da      	uxtb	r2, r3
 800107e:	4b0c      	ldr	r3, [pc, #48]	@ (80010b0 <updateWWCache+0x674>)
 8001080:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
		WW_WRITE_AXIS(WW_THUMBY_INDEX+4, 2, CurrThumbStickY);
 8001084:	4b0d      	ldr	r3, [pc, #52]	@ (80010bc <updateWWCache+0x680>)
 8001086:	881b      	ldrh	r3, [r3, #0]
 8001088:	b2da      	uxtb	r2, r3
 800108a:	4b09      	ldr	r3, [pc, #36]	@ (80010b0 <updateWWCache+0x674>)
 800108c:	f883 2112 	strb.w	r2, [r3, #274]	@ 0x112
 8001090:	4b0a      	ldr	r3, [pc, #40]	@ (80010bc <updateWWCache+0x680>)
 8001092:	881b      	ldrh	r3, [r3, #0]
 8001094:	0a1b      	lsrs	r3, r3, #8
 8001096:	b29b      	uxth	r3, r3
 8001098:	b2da      	uxtb	r2, r3
 800109a:	4b05      	ldr	r3, [pc, #20]	@ (80010b0 <updateWWCache+0x674>)
 800109c:	f883 2113 	strb.w	r2, [r3, #275]	@ 0x113
}
 80010a0:	bf00      	nop
 80010a2:	3730      	adds	r7, #48	@ 0x30
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	2000001e 	.word	0x2000001e
 80010ac:	20000000 	.word	0x20000000
 80010b0:	20000030 	.word	0x20000030
 80010b4:	2000001c 	.word	0x2000001c
 80010b8:	20000018 	.word	0x20000018
 80010bc:	2000001a 	.word	0x2000001a

080010c0 <writeWinwingDataSync>:

void writeWinwingDataSync(const uint8_t *data, uint16_t size)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	460b      	mov	r3, r1
 80010ca:	807b      	strh	r3, [r7, #2]
	//printHexFrame("[TO WW]", data, size);
	// Enable TX (Half-Duplex Mode)
	HAL_HalfDuplex_EnableTransmitter(&huart1);
 80010cc:	4807      	ldr	r0, [pc, #28]	@ (80010ec <writeWinwingDataSync+0x2c>)
 80010ce:	f003 fbd7 	bl	8004880 <HAL_HalfDuplex_EnableTransmitter>
	// Send The Data You Want!
	HAL_UART_Transmit(&huart1, data, size, 100);
 80010d2:	887a      	ldrh	r2, [r7, #2]
 80010d4:	2364      	movs	r3, #100	@ 0x64
 80010d6:	6879      	ldr	r1, [r7, #4]
 80010d8:	4804      	ldr	r0, [pc, #16]	@ (80010ec <writeWinwingDataSync+0x2c>)
 80010da:	f003 f821 	bl	8004120 <HAL_UART_Transmit>
	// Switch Back To RX (Receiver Mode)
	HAL_HalfDuplex_EnableReceiver(&huart1);
 80010de:	4803      	ldr	r0, [pc, #12]	@ (80010ec <writeWinwingDataSync+0x2c>)
 80010e0:	f003 fc02 	bl	80048e8 <HAL_HalfDuplex_EnableReceiver>
}
 80010e4:	bf00      	nop
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20000460 	.word	0x20000460

080010f0 <HandleDial>:


static void HandleDial()
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
	//handle dial action here
	if (HAL_GetTick() - DialHandleTime < DIAL_HANDLE_INTERVAL_MS)
 80010f4:	f000 fee6 	bl	8001ec4 <HAL_GetTick>
 80010f8:	4602      	mov	r2, r0
 80010fa:	4b30      	ldr	r3, [pc, #192]	@ (80011bc <HandleDial+0xcc>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	1ad3      	subs	r3, r2, r3
 8001100:	2b09      	cmp	r3, #9
 8001102:	d958      	bls.n	80011b6 <HandleDial+0xc6>
		return;
	DialHandleTime = HAL_GetTick();
 8001104:	f000 fede 	bl	8001ec4 <HAL_GetTick>
 8001108:	4603      	mov	r3, r0
 800110a:	4a2c      	ldr	r2, [pc, #176]	@ (80011bc <HandleDial+0xcc>)
 800110c:	6013      	str	r3, [r2, #0]
	WW_RESET(5, 0xA0);
 800110e:	4b2c      	ldr	r3, [pc, #176]	@ (80011c0 <HandleDial+0xd0>)
 8001110:	f893 30cf 	ldrb.w	r3, [r3, #207]	@ 0xcf
 8001114:	f003 035f 	and.w	r3, r3, #95	@ 0x5f
 8001118:	b2da      	uxtb	r2, r3
 800111a:	4b29      	ldr	r3, [pc, #164]	@ (80011c0 <HandleDial+0xd0>)
 800111c:	f883 20cf 	strb.w	r2, [r3, #207]	@ 0xcf
	if (DialHandleTicks % 2)
 8001120:	4b28      	ldr	r3, [pc, #160]	@ (80011c4 <HandleDial+0xd4>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	f003 0301 	and.w	r3, r3, #1
 8001128:	b2db      	uxtb	r3, r3
 800112a:	2b00      	cmp	r3, #0
 800112c:	d03c      	beq.n	80011a8 <HandleDial+0xb8>
	{
		if (DialDirection > 0)
 800112e:	4b26      	ldr	r3, [pc, #152]	@ (80011c8 <HandleDial+0xd8>)
 8001130:	f993 3000 	ldrsb.w	r3, [r3]
 8001134:	2b00      	cmp	r3, #0
 8001136:	dd19      	ble.n	800116c <HandleDial+0x7c>
		{
			WW_SET(5, 0x20);
 8001138:	4b21      	ldr	r3, [pc, #132]	@ (80011c0 <HandleDial+0xd0>)
 800113a:	f893 30cf 	ldrb.w	r3, [r3, #207]	@ 0xcf
 800113e:	f043 0320 	orr.w	r3, r3, #32
 8001142:	b2da      	uxtb	r2, r3
 8001144:	4b1e      	ldr	r3, [pc, #120]	@ (80011c0 <HandleDial+0xd0>)
 8001146:	f883 20cf 	strb.w	r2, [r3, #207]	@ 0xcf
			DialDirection--;
 800114a:	4b1f      	ldr	r3, [pc, #124]	@ (80011c8 <HandleDial+0xd8>)
 800114c:	f993 3000 	ldrsb.w	r3, [r3]
 8001150:	b2db      	uxtb	r3, r3
 8001152:	3b01      	subs	r3, #1
 8001154:	b2db      	uxtb	r3, r3
 8001156:	b25a      	sxtb	r2, r3
 8001158:	4b1b      	ldr	r3, [pc, #108]	@ (80011c8 <HandleDial+0xd8>)
 800115a:	701a      	strb	r2, [r3, #0]
			printf("UP %d\n", DialDirection);
 800115c:	4b1a      	ldr	r3, [pc, #104]	@ (80011c8 <HandleDial+0xd8>)
 800115e:	f993 3000 	ldrsb.w	r3, [r3]
 8001162:	4619      	mov	r1, r3
 8001164:	4819      	ldr	r0, [pc, #100]	@ (80011cc <HandleDial+0xdc>)
 8001166:	f004 f957 	bl	8005418 <iprintf>
 800116a:	e01d      	b.n	80011a8 <HandleDial+0xb8>
		}
		else if (DialDirection < 0)
 800116c:	4b16      	ldr	r3, [pc, #88]	@ (80011c8 <HandleDial+0xd8>)
 800116e:	f993 3000 	ldrsb.w	r3, [r3]
 8001172:	2b00      	cmp	r3, #0
 8001174:	da18      	bge.n	80011a8 <HandleDial+0xb8>
		{
			WW_SET(5, 0x80);
 8001176:	4b12      	ldr	r3, [pc, #72]	@ (80011c0 <HandleDial+0xd0>)
 8001178:	f893 30cf 	ldrb.w	r3, [r3, #207]	@ 0xcf
 800117c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001180:	b2da      	uxtb	r2, r3
 8001182:	4b0f      	ldr	r3, [pc, #60]	@ (80011c0 <HandleDial+0xd0>)
 8001184:	f883 20cf 	strb.w	r2, [r3, #207]	@ 0xcf
			DialDirection++;
 8001188:	4b0f      	ldr	r3, [pc, #60]	@ (80011c8 <HandleDial+0xd8>)
 800118a:	f993 3000 	ldrsb.w	r3, [r3]
 800118e:	b2db      	uxtb	r3, r3
 8001190:	3301      	adds	r3, #1
 8001192:	b2db      	uxtb	r3, r3
 8001194:	b25a      	sxtb	r2, r3
 8001196:	4b0c      	ldr	r3, [pc, #48]	@ (80011c8 <HandleDial+0xd8>)
 8001198:	701a      	strb	r2, [r3, #0]
			printf("DOWN %d\n", DialDirection);
 800119a:	4b0b      	ldr	r3, [pc, #44]	@ (80011c8 <HandleDial+0xd8>)
 800119c:	f993 3000 	ldrsb.w	r3, [r3]
 80011a0:	4619      	mov	r1, r3
 80011a2:	480b      	ldr	r0, [pc, #44]	@ (80011d0 <HandleDial+0xe0>)
 80011a4:	f004 f938 	bl	8005418 <iprintf>
		}
	}
	DialHandleTicks++;
 80011a8:	4b06      	ldr	r3, [pc, #24]	@ (80011c4 <HandleDial+0xd4>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	3301      	adds	r3, #1
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	4b04      	ldr	r3, [pc, #16]	@ (80011c4 <HandleDial+0xd4>)
 80011b2:	701a      	strb	r2, [r3, #0]
 80011b4:	e000      	b.n	80011b8 <HandleDial+0xc8>
		return;
 80011b6:	bf00      	nop
}
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	200004b8 	.word	0x200004b8
 80011c0:	20000030 	.word	0x20000030
 80011c4:	200004bc 	.word	0x200004bc
 80011c8:	200004da 	.word	0x200004da
 80011cc:	080065ec 	.word	0x080065ec
 80011d0:	080065f4 	.word	0x080065f4

080011d4 <WW_HandleData>:

static void WW_HandleData()
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
	tCache *pCache;
	for (int i = 0; i < cache_count; i++)
 80011da:	2300      	movs	r3, #0
 80011dc:	607b      	str	r3, [r7, #4]
 80011de:	e02a      	b.n	8001236 <WW_HandleData+0x62>
	{
		pCache = &WW_Cache[i];
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	4613      	mov	r3, r2
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	4413      	add	r3, r2
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	4a1e      	ldr	r2, [pc, #120]	@ (8001264 <WW_HandleData+0x90>)
 80011ec:	4413      	add	r3, r2
 80011ee:	603b      	str	r3, [r7, #0]
		if (WWRequestLen == pCache->ReqSize && pCache->RespSize > 0
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	461a      	mov	r2, r3
 80011f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001268 <WW_HandleData+0x94>)
 80011f8:	881b      	ldrh	r3, [r3, #0]
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d117      	bne.n	8001230 <WW_HandleData+0x5c>
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	785b      	ldrb	r3, [r3, #1]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d013      	beq.n	8001230 <WW_HandleData+0x5c>
				&& memcmp(WW_Request, pCache->Data, pCache->ReqSize) == 0)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	1c99      	adds	r1, r3, #2
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	461a      	mov	r2, r3
 8001212:	4816      	ldr	r0, [pc, #88]	@ (800126c <WW_HandleData+0x98>)
 8001214:	f004 fb04 	bl	8005820 <memcmp>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d108      	bne.n	8001230 <WW_HandleData+0x5c>
		{
			//printHexFrame("[FROM WW]", WW_Request, WWRequestLen);
			writeWinwingDataSync(pCache->Data, pCache->RespSize);
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	1c9a      	adds	r2, r3, #2
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	785b      	ldrb	r3, [r3, #1]
 8001226:	4619      	mov	r1, r3
 8001228:	4610      	mov	r0, r2
 800122a:	f7ff ff49 	bl	80010c0 <writeWinwingDataSync>
			return;
 800122e:	e016      	b.n	800125e <WW_HandleData+0x8a>
	for (int i = 0; i < cache_count; i++)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3301      	adds	r3, #1
 8001234:	607b      	str	r3, [r7, #4]
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	4b0d      	ldr	r3, [pc, #52]	@ (8001270 <WW_HandleData+0x9c>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	429a      	cmp	r2, r3
 800123e:	d3cf      	bcc.n	80011e0 <WW_HandleData+0xc>
		}
	}
	printHexFrame("[FROM WW - UNHANDLED]", WW_Request, WWRequestLen);
 8001240:	4b09      	ldr	r3, [pc, #36]	@ (8001268 <WW_HandleData+0x94>)
 8001242:	881b      	ldrh	r3, [r3, #0]
 8001244:	b29b      	uxth	r3, r3
 8001246:	461a      	mov	r2, r3
 8001248:	4908      	ldr	r1, [pc, #32]	@ (800126c <WW_HandleData+0x98>)
 800124a:	480a      	ldr	r0, [pc, #40]	@ (8001274 <WW_HandleData+0xa0>)
 800124c:	f7ff fa0c 	bl	8000668 <printHexFrame>
	writeWinwingDataSync(WW_Request, WWRequestLen);
 8001250:	4b05      	ldr	r3, [pc, #20]	@ (8001268 <WW_HandleData+0x94>)
 8001252:	881b      	ldrh	r3, [r3, #0]
 8001254:	b29b      	uxth	r3, r3
 8001256:	4619      	mov	r1, r3
 8001258:	4804      	ldr	r0, [pc, #16]	@ (800126c <WW_HandleData+0x98>)
 800125a:	f7ff ff31 	bl	80010c0 <writeWinwingDataSync>
}
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20000030 	.word	0x20000030
 8001268:	200004cc 	.word	0x200004cc
 800126c:	200004c4 	.word	0x200004c4
 8001270:	2000015c 	.word	0x2000015c
 8001274:	08006600 	.word	0x08006600

08001278 <crc32_calc>:

// Helper: Calculate CRC32 (simple implementation, replace with HAL if available)
uint32_t crc32_calc(const uint8_t *data, size_t len) {
 8001278:	b480      	push	{r7}
 800127a:	b087      	sub	sp, #28
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]
    uint32_t crc = 0xFFFFFFFF;
 8001282:	f04f 33ff 	mov.w	r3, #4294967295
 8001286:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < len; i++) {
 8001288:	2300      	movs	r3, #0
 800128a:	613b      	str	r3, [r7, #16]
 800128c:	e021      	b.n	80012d2 <crc32_calc+0x5a>
        crc ^= data[i];
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	4413      	add	r3, r2
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	461a      	mov	r2, r3
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	4053      	eors	r3, r2
 800129c:	617b      	str	r3, [r7, #20]
        for (uint8_t j = 0; j < 8; j++) {
 800129e:	2300      	movs	r3, #0
 80012a0:	73fb      	strb	r3, [r7, #15]
 80012a2:	e010      	b.n	80012c6 <crc32_calc+0x4e>
            if (crc & 1)
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d005      	beq.n	80012ba <crc32_calc+0x42>
                crc = (crc >> 1) ^ 0xEDB88320;
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	085a      	lsrs	r2, r3, #1
 80012b2:	4b0e      	ldr	r3, [pc, #56]	@ (80012ec <crc32_calc+0x74>)
 80012b4:	4053      	eors	r3, r2
 80012b6:	617b      	str	r3, [r7, #20]
 80012b8:	e002      	b.n	80012c0 <crc32_calc+0x48>
            else
                crc >>= 1;
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	085b      	lsrs	r3, r3, #1
 80012be:	617b      	str	r3, [r7, #20]
        for (uint8_t j = 0; j < 8; j++) {
 80012c0:	7bfb      	ldrb	r3, [r7, #15]
 80012c2:	3301      	adds	r3, #1
 80012c4:	73fb      	strb	r3, [r7, #15]
 80012c6:	7bfb      	ldrb	r3, [r7, #15]
 80012c8:	2b07      	cmp	r3, #7
 80012ca:	d9eb      	bls.n	80012a4 <crc32_calc+0x2c>
    for (size_t i = 0; i < len; i++) {
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	3301      	adds	r3, #1
 80012d0:	613b      	str	r3, [r7, #16]
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d3d9      	bcc.n	800128e <crc32_calc+0x16>
        }
    }
    return ~crc;
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	43db      	mvns	r3, r3
}
 80012de:	4618      	mov	r0, r3
 80012e0:	371c      	adds	r7, #28
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	edb88320 	.word	0xedb88320

080012f0 <SaveCalibrationToFlash>:

// Save calibration data to flash
void SaveCalibrationToFlash(void) {
 80012f0:	b5b0      	push	{r4, r5, r7, lr}
 80012f2:	b08a      	sub	sp, #40	@ 0x28
 80012f4:	af00      	add	r7, sp, #0
    HAL_FLASH_Unlock();
 80012f6:	f001 f80b 	bl	8002310 <HAL_FLASH_Unlock>
    // Erase sector
    FLASH_EraseInitTypeDef eraseInitStruct = {0};
 80012fa:	f107 0308 	add.w	r3, r7, #8
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	605a      	str	r2, [r3, #4]
 8001304:	609a      	str	r2, [r3, #8]
 8001306:	60da      	str	r2, [r3, #12]
 8001308:	611a      	str	r2, [r3, #16]
    uint32_t sectorError = 0;
 800130a:	2300      	movs	r3, #0
 800130c:	607b      	str	r3, [r7, #4]
    eraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800130e:	2300      	movs	r3, #0
 8001310:	60bb      	str	r3, [r7, #8]
    eraseInitStruct.Sector = FLASH_SECTOR_7;
 8001312:	2307      	movs	r3, #7
 8001314:	613b      	str	r3, [r7, #16]
    eraseInitStruct.NbSectors = 1;
 8001316:	2301      	movs	r3, #1
 8001318:	617b      	str	r3, [r7, #20]
    eraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800131a:	2302      	movs	r3, #2
 800131c:	61bb      	str	r3, [r7, #24]
    HAL_FLASHEx_Erase(&eraseInitStruct, &sectorError);
 800131e:	1d3a      	adds	r2, r7, #4
 8001320:	f107 0308 	add.w	r3, r7, #8
 8001324:	4611      	mov	r1, r2
 8001326:	4618      	mov	r0, r3
 8001328:	f001 f964 	bl	80025f4 <HAL_FLASHEx_Erase>
    // Calculate CRC
    calibData.crc32 = crc32_calc((uint8_t*)&calibData, sizeof(CalibrationData) - sizeof(uint32_t));
 800132c:	2114      	movs	r1, #20
 800132e:	4815      	ldr	r0, [pc, #84]	@ (8001384 <SaveCalibrationToFlash+0x94>)
 8001330:	f7ff ffa2 	bl	8001278 <crc32_calc>
 8001334:	4603      	mov	r3, r0
 8001336:	4a13      	ldr	r2, [pc, #76]	@ (8001384 <SaveCalibrationToFlash+0x94>)
 8001338:	6153      	str	r3, [r2, #20]
    // Program data
    uint32_t *src = (uint32_t*)&calibData;
 800133a:	4b12      	ldr	r3, [pc, #72]	@ (8001384 <SaveCalibrationToFlash+0x94>)
 800133c:	61fb      	str	r3, [r7, #28]
    uint32_t addr = CALIBRATION_FLASH_ADDR;
 800133e:	4b12      	ldr	r3, [pc, #72]	@ (8001388 <SaveCalibrationToFlash+0x98>)
 8001340:	627b      	str	r3, [r7, #36]	@ 0x24
    for (size_t i = 0; i < sizeof(CalibrationData)/4; i++) {
 8001342:	2300      	movs	r3, #0
 8001344:	623b      	str	r3, [r7, #32]
 8001346:	e013      	b.n	8001370 <SaveCalibrationToFlash+0x80>
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, addr, src[i]);
 8001348:	6a3b      	ldr	r3, [r7, #32]
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	69fa      	ldr	r2, [r7, #28]
 800134e:	4413      	add	r3, r2
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	2200      	movs	r2, #0
 8001354:	461c      	mov	r4, r3
 8001356:	4615      	mov	r5, r2
 8001358:	4622      	mov	r2, r4
 800135a:	462b      	mov	r3, r5
 800135c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800135e:	2002      	movs	r0, #2
 8001360:	f000 ff84 	bl	800226c <HAL_FLASH_Program>
        addr += 4;
 8001364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001366:	3304      	adds	r3, #4
 8001368:	627b      	str	r3, [r7, #36]	@ 0x24
    for (size_t i = 0; i < sizeof(CalibrationData)/4; i++) {
 800136a:	6a3b      	ldr	r3, [r7, #32]
 800136c:	3301      	adds	r3, #1
 800136e:	623b      	str	r3, [r7, #32]
 8001370:	6a3b      	ldr	r3, [r7, #32]
 8001372:	2b05      	cmp	r3, #5
 8001374:	d9e8      	bls.n	8001348 <SaveCalibrationToFlash+0x58>
    }
    HAL_FLASH_Lock();
 8001376:	f000 ffed 	bl	8002354 <HAL_FLASH_Lock>
}
 800137a:	bf00      	nop
 800137c:	3728      	adds	r7, #40	@ 0x28
 800137e:	46bd      	mov	sp, r7
 8001380:	bdb0      	pop	{r4, r5, r7, pc}
 8001382:	bf00      	nop
 8001384:	20000000 	.word	0x20000000
 8001388:	08060000 	.word	0x08060000

0800138c <LoadCalibrationFromFlash>:

// Load calibration data from flash
void LoadCalibrationFromFlash(void) {
 800138c:	b5b0      	push	{r4, r5, r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
    CalibrationData *flashData = (CalibrationData*)CALIBRATION_FLASH_ADDR;
 8001392:	4b0d      	ldr	r3, [pc, #52]	@ (80013c8 <LoadCalibrationFromFlash+0x3c>)
 8001394:	607b      	str	r3, [r7, #4]
    uint32_t crc = crc32_calc((uint8_t*)flashData, sizeof(CalibrationData) - sizeof(uint32_t));
 8001396:	2114      	movs	r1, #20
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f7ff ff6d 	bl	8001278 <crc32_calc>
 800139e:	6038      	str	r0, [r7, #0]
    if (flashData->crc32 == crc) {
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	695b      	ldr	r3, [r3, #20]
 80013a4:	683a      	ldr	r2, [r7, #0]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d109      	bne.n	80013be <LoadCalibrationFromFlash+0x32>
        calibData = *flashData;
 80013aa:	4a08      	ldr	r2, [pc, #32]	@ (80013cc <LoadCalibrationFromFlash+0x40>)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	4614      	mov	r4, r2
 80013b0:	461d      	mov	r5, r3
 80013b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013b6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80013ba:	e884 0003 	stmia.w	r4, {r0, r1}
    }
    // else keep defaults
}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bdb0      	pop	{r4, r5, r7, pc}
 80013c6:	bf00      	nop
 80013c8:	08060000 	.word	0x08060000
 80013cc:	20000000 	.word	0x20000000

080013d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013d4:	b08a      	sub	sp, #40	@ 0x28
 80013d6:	af08      	add	r7, sp, #32

  /* USER CODE BEGIN 1 */
	setvbuf(stdout, NULL, _IONBF, 0);
 80013d8:	4b99      	ldr	r3, [pc, #612]	@ (8001640 <main+0x270>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	6898      	ldr	r0, [r3, #8]
 80013de:	2300      	movs	r3, #0
 80013e0:	2202      	movs	r2, #2
 80013e2:	2100      	movs	r1, #0
 80013e4:	f004 f890 	bl	8005508 <setvbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013e8:	f000 fd06 	bl	8001df8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013ec:	f000 f972 	bl	80016d4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	LoadCalibrationFromFlash();
 80013f0:	f7ff ffcc 	bl	800138c <LoadCalibrationFromFlash>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013f4:	f000 fa86 	bl	8001904 <MX_GPIO_Init>
  MX_SPI2_Init();
 80013f8:	f000 f9d4 	bl	80017a4 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80013fc:	f000 fa58 	bl	80018b0 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001400:	f000 fa06 	bl	8001810 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim1);
 8001404:	488f      	ldr	r0, [pc, #572]	@ (8001644 <main+0x274>)
 8001406:	f002 fb83 	bl	8003b10 <HAL_TIM_Base_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	HAL_HalfDuplex_EnableReceiver(&huart1);
 800140a:	488f      	ldr	r0, [pc, #572]	@ (8001648 <main+0x278>)
 800140c:	f003 fa6c 	bl	80048e8 <HAL_HalfDuplex_EnableReceiver>
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, WW_Request, WINWING_MAX_PACKET_SIZE);
 8001410:	2208      	movs	r2, #8
 8001412:	498e      	ldr	r1, [pc, #568]	@ (800164c <main+0x27c>)
 8001414:	488c      	ldr	r0, [pc, #560]	@ (8001648 <main+0x278>)
 8001416:	f002 ff0e 	bl	8004236 <HAL_UARTEx_ReceiveToIdle_IT>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, SET);
 800141a:	2201      	movs	r2, #1
 800141c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001420:	488b      	ldr	r0, [pc, #556]	@ (8001650 <main+0x280>)
 8001422:	f001 fb8b 	bl	8002b3c <HAL_GPIO_WritePin>
	printf("Virpil Grip to WinWing Base Bridge\n");
 8001426:	488b      	ldr	r0, [pc, #556]	@ (8001654 <main+0x284>)
 8001428:	f004 f866 	bl	80054f8 <puts>


	while (1)
	{
		uint32_t now = HAL_GetTick();
 800142c:	f000 fd4a 	bl	8001ec4 <HAL_GetTick>
 8001430:	6078      	str	r0, [r7, #4]
		uint8_t virpilOK = readVirpilDataSync();
 8001432:	f7ff f941 	bl	80006b8 <readVirpilDataSync>
 8001436:	4603      	mov	r3, r0
 8001438:	70fb      	strb	r3, [r7, #3]

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (blinkDelay && (now - lastBlink > blinkDelay))
 800143a:	4b87      	ldr	r3, [pc, #540]	@ (8001658 <main+0x288>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d00f      	beq.n	8001462 <main+0x92>
 8001442:	4b86      	ldr	r3, [pc, #536]	@ (800165c <main+0x28c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	1ad2      	subs	r2, r2, r3
 800144a:	4b83      	ldr	r3, [pc, #524]	@ (8001658 <main+0x288>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	429a      	cmp	r2, r3
 8001450:	d907      	bls.n	8001462 <main+0x92>
		{
			lastBlink = now;
 8001452:	4a82      	ldr	r2, [pc, #520]	@ (800165c <main+0x28c>)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001458:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800145c:	487c      	ldr	r0, [pc, #496]	@ (8001650 <main+0x280>)
 800145e:	f001 fb86 	bl	8002b6e <HAL_GPIO_TogglePin>
		}

		if (virpilOK && (now - lastCheck >= CALIBRATION_CHECK_INTERVAL))
 8001462:	78fb      	ldrb	r3, [r7, #3]
 8001464:	2b00      	cmp	r3, #0
 8001466:	f000 8114 	beq.w	8001692 <main+0x2c2>
 800146a:	4b7d      	ldr	r3, [pc, #500]	@ (8001660 <main+0x290>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001476:	f0c0 810c 	bcc.w	8001692 <main+0x2c2>
		{
			lastCheck = now;
 800147a:	4a79      	ldr	r2, [pc, #484]	@ (8001660 <main+0x290>)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6013      	str	r3, [r2, #0]
			if (CalibrationActive)
 8001480:	4b78      	ldr	r3, [pc, #480]	@ (8001664 <main+0x294>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d046      	beq.n	8001516 <main+0x146>
			{
				if (now - CalibrationEnterTime >= MIN_CALIBRATION_DURATION) //allow exit at least 5 seconds afrter enter
 8001488:	4b77      	ldr	r3, [pc, #476]	@ (8001668 <main+0x298>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001494:	4293      	cmp	r3, r2
 8001496:	f240 80fc 	bls.w	8001692 <main+0x2c2>
				{
					// Exit calibration if any of the 3 buttons is pressed
					if (DialDown)
 800149a:	4b74      	ldr	r3, [pc, #464]	@ (800166c <main+0x29c>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	f000 80f7 	beq.w	8001692 <main+0x2c2>
					{
						CalibrationActive = 0;
 80014a4:	4b6f      	ldr	r3, [pc, #444]	@ (8001664 <main+0x294>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	701a      	strb	r2, [r3, #0]
						blinkDelay = 0;
 80014aa:	4b6b      	ldr	r3, [pc, #428]	@ (8001658 <main+0x288>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
						HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, SET);
 80014b0:	2201      	movs	r2, #1
 80014b2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014b6:	4866      	ldr	r0, [pc, #408]	@ (8001650 <main+0x280>)
 80014b8:	f001 fb40 	bl	8002b3c <HAL_GPIO_WritePin>
								"\tMaxTwistZ=%d\n"
								"\tMinSlider=%d\n"
								"\tMaxSlider=%d\n"
								"\tSliderDetent1=%d\n"
								"\tSliderDetent2=%d\n",
								calibData.MinThumbStickX, calibData.MaxThumbStickX,
 80014bc:	4b6c      	ldr	r3, [pc, #432]	@ (8001670 <main+0x2a0>)
 80014be:	881b      	ldrh	r3, [r3, #0]
						printf("Exit calibration mode\n"
 80014c0:	469c      	mov	ip, r3
								calibData.MinThumbStickX, calibData.MaxThumbStickX,
 80014c2:	4b6b      	ldr	r3, [pc, #428]	@ (8001670 <main+0x2a0>)
 80014c4:	885b      	ldrh	r3, [r3, #2]
						printf("Exit calibration mode\n"
 80014c6:	469e      	mov	lr, r3
								calibData.MinThumbStickY, calibData.MaxThumbStickY,
 80014c8:	4b69      	ldr	r3, [pc, #420]	@ (8001670 <main+0x2a0>)
 80014ca:	889b      	ldrh	r3, [r3, #4]
						printf("Exit calibration mode\n"
 80014cc:	4698      	mov	r8, r3
								calibData.MinThumbStickY, calibData.MaxThumbStickY,
 80014ce:	4b68      	ldr	r3, [pc, #416]	@ (8001670 <main+0x2a0>)
 80014d0:	88db      	ldrh	r3, [r3, #6]
						printf("Exit calibration mode\n"
 80014d2:	461a      	mov	r2, r3
								calibData.MinTwistZ, calibData.MaxTwistZ,
 80014d4:	4b66      	ldr	r3, [pc, #408]	@ (8001670 <main+0x2a0>)
 80014d6:	891b      	ldrh	r3, [r3, #8]
						printf("Exit calibration mode\n"
 80014d8:	4619      	mov	r1, r3
								calibData.MinTwistZ, calibData.MaxTwistZ,
 80014da:	4b65      	ldr	r3, [pc, #404]	@ (8001670 <main+0x2a0>)
 80014dc:	895b      	ldrh	r3, [r3, #10]
						printf("Exit calibration mode\n"
 80014de:	4618      	mov	r0, r3
								calibData.MinSlider, calibData.MaxSlider,
 80014e0:	4b63      	ldr	r3, [pc, #396]	@ (8001670 <main+0x2a0>)
 80014e2:	899b      	ldrh	r3, [r3, #12]
						printf("Exit calibration mode\n"
 80014e4:	461c      	mov	r4, r3
								calibData.MinSlider, calibData.MaxSlider,
 80014e6:	4b62      	ldr	r3, [pc, #392]	@ (8001670 <main+0x2a0>)
 80014e8:	89db      	ldrh	r3, [r3, #14]
						printf("Exit calibration mode\n"
 80014ea:	461d      	mov	r5, r3
								calibData.SliderDetent1, calibData.SliderDetent2
 80014ec:	4b60      	ldr	r3, [pc, #384]	@ (8001670 <main+0x2a0>)
 80014ee:	8a1b      	ldrh	r3, [r3, #16]
						printf("Exit calibration mode\n"
 80014f0:	461e      	mov	r6, r3
								calibData.SliderDetent1, calibData.SliderDetent2
 80014f2:	4b5f      	ldr	r3, [pc, #380]	@ (8001670 <main+0x2a0>)
 80014f4:	8a5b      	ldrh	r3, [r3, #18]
						printf("Exit calibration mode\n"
 80014f6:	9306      	str	r3, [sp, #24]
 80014f8:	9605      	str	r6, [sp, #20]
 80014fa:	9504      	str	r5, [sp, #16]
 80014fc:	9403      	str	r4, [sp, #12]
 80014fe:	9002      	str	r0, [sp, #8]
 8001500:	9101      	str	r1, [sp, #4]
 8001502:	9200      	str	r2, [sp, #0]
 8001504:	4643      	mov	r3, r8
 8001506:	4672      	mov	r2, lr
 8001508:	4661      	mov	r1, ip
 800150a:	485a      	ldr	r0, [pc, #360]	@ (8001674 <main+0x2a4>)
 800150c:	f003 ff84 	bl	8005418 <iprintf>
								);

						SaveCalibrationToFlash(); // save values
 8001510:	f7ff feee 	bl	80012f0 <SaveCalibrationToFlash>
 8001514:	e0bd      	b.n	8001692 <main+0x2c2>
				}
			}
			else
			{
				// Wait for combo to be held for 2 seconds
				if (RedDown && BlackDown && DialDown)
 8001516:	4b58      	ldr	r3, [pc, #352]	@ (8001678 <main+0x2a8>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d079      	beq.n	8001612 <main+0x242>
 800151e:	4b57      	ldr	r3, [pc, #348]	@ (800167c <main+0x2ac>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d075      	beq.n	8001612 <main+0x242>
 8001526:	4b51      	ldr	r3, [pc, #324]	@ (800166c <main+0x29c>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d071      	beq.n	8001612 <main+0x242>
				{
					if (CalibrationEnterTime == 0)
 800152e:	4b4e      	ldr	r3, [pc, #312]	@ (8001668 <main+0x298>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d10f      	bne.n	8001556 <main+0x186>
					{
						printf("Pre-calibration enter.\n");
 8001536:	4852      	ldr	r0, [pc, #328]	@ (8001680 <main+0x2b0>)
 8001538:	f003 ffde 	bl	80054f8 <puts>
						CalibrationEnterTime = now;
 800153c:	4a4a      	ldr	r2, [pc, #296]	@ (8001668 <main+0x298>)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6013      	str	r3, [r2, #0]
						blinkDelay = 0;
 8001542:	4b45      	ldr	r3, [pc, #276]	@ (8001658 <main+0x288>)
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
						HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, RESET);
 8001548:	2200      	movs	r2, #0
 800154a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800154e:	4840      	ldr	r0, [pc, #256]	@ (8001650 <main+0x280>)
 8001550:	f001 faf4 	bl	8002b3c <HAL_GPIO_WritePin>
					if (CalibrationEnterTime == 0)
 8001554:	e09c      	b.n	8001690 <main+0x2c0>
					}
					else if (now - CalibrationEnterTime >= 2000)
 8001556:	4b44      	ldr	r3, [pc, #272]	@ (8001668 <main+0x298>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001562:	f0c0 8095 	bcc.w	8001690 <main+0x2c0>
					{
						CalibrationActive = 1;
 8001566:	4b3f      	ldr	r3, [pc, #252]	@ (8001664 <main+0x294>)
 8001568:	2201      	movs	r2, #1
 800156a:	701a      	strb	r2, [r3, #0]
						CalibrationEnterTime = now;
 800156c:	4a3e      	ldr	r2, [pc, #248]	@ (8001668 <main+0x298>)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6013      	str	r3, [r2, #0]
						blinkDelay = 200;
 8001572:	4b39      	ldr	r3, [pc, #228]	@ (8001658 <main+0x288>)
 8001574:	22c8      	movs	r2, #200	@ 0xc8
 8001576:	601a      	str	r2, [r3, #0]
						HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, RESET);
 8001578:	2200      	movs	r2, #0
 800157a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800157e:	4834      	ldr	r0, [pc, #208]	@ (8001650 <main+0x280>)
 8001580:	f001 fadc 	bl	8002b3c <HAL_GPIO_WritePin>
							"\tMaxTwistZ=%d\n"
							"\tMinSlider=%d\n"
							"\tMaxSlider=%d\n"
							"\tSliderDetent1=%d\n"
							"\tSliderDetent2=%d\n",
							calibData.MinThumbStickX, calibData.MaxThumbStickX,
 8001584:	4b3a      	ldr	r3, [pc, #232]	@ (8001670 <main+0x2a0>)
 8001586:	881b      	ldrh	r3, [r3, #0]
						printf("Enter calibration mode.\n"
 8001588:	469c      	mov	ip, r3
							calibData.MinThumbStickX, calibData.MaxThumbStickX,
 800158a:	4b39      	ldr	r3, [pc, #228]	@ (8001670 <main+0x2a0>)
 800158c:	885b      	ldrh	r3, [r3, #2]
						printf("Enter calibration mode.\n"
 800158e:	469e      	mov	lr, r3
							calibData.MinThumbStickY, calibData.MaxThumbStickY,
 8001590:	4b37      	ldr	r3, [pc, #220]	@ (8001670 <main+0x2a0>)
 8001592:	889b      	ldrh	r3, [r3, #4]
						printf("Enter calibration mode.\n"
 8001594:	4698      	mov	r8, r3
							calibData.MinThumbStickY, calibData.MaxThumbStickY,
 8001596:	4b36      	ldr	r3, [pc, #216]	@ (8001670 <main+0x2a0>)
 8001598:	88db      	ldrh	r3, [r3, #6]
						printf("Enter calibration mode.\n"
 800159a:	461a      	mov	r2, r3
							calibData.MinTwistZ, calibData.MaxTwistZ,
 800159c:	4b34      	ldr	r3, [pc, #208]	@ (8001670 <main+0x2a0>)
 800159e:	891b      	ldrh	r3, [r3, #8]
						printf("Enter calibration mode.\n"
 80015a0:	4619      	mov	r1, r3
							calibData.MinTwistZ, calibData.MaxTwistZ,
 80015a2:	4b33      	ldr	r3, [pc, #204]	@ (8001670 <main+0x2a0>)
 80015a4:	895b      	ldrh	r3, [r3, #10]
						printf("Enter calibration mode.\n"
 80015a6:	4618      	mov	r0, r3
							calibData.MinSlider, calibData.MaxSlider,
 80015a8:	4b31      	ldr	r3, [pc, #196]	@ (8001670 <main+0x2a0>)
 80015aa:	899b      	ldrh	r3, [r3, #12]
						printf("Enter calibration mode.\n"
 80015ac:	461c      	mov	r4, r3
							calibData.MinSlider, calibData.MaxSlider,
 80015ae:	4b30      	ldr	r3, [pc, #192]	@ (8001670 <main+0x2a0>)
 80015b0:	89db      	ldrh	r3, [r3, #14]
						printf("Enter calibration mode.\n"
 80015b2:	461d      	mov	r5, r3
							calibData.SliderDetent1, calibData.SliderDetent2
 80015b4:	4b2e      	ldr	r3, [pc, #184]	@ (8001670 <main+0x2a0>)
 80015b6:	8a1b      	ldrh	r3, [r3, #16]
						printf("Enter calibration mode.\n"
 80015b8:	461e      	mov	r6, r3
							calibData.SliderDetent1, calibData.SliderDetent2
 80015ba:	4b2d      	ldr	r3, [pc, #180]	@ (8001670 <main+0x2a0>)
 80015bc:	8a5b      	ldrh	r3, [r3, #18]
						printf("Enter calibration mode.\n"
 80015be:	9306      	str	r3, [sp, #24]
 80015c0:	9605      	str	r6, [sp, #20]
 80015c2:	9504      	str	r5, [sp, #16]
 80015c4:	9403      	str	r4, [sp, #12]
 80015c6:	9002      	str	r0, [sp, #8]
 80015c8:	9101      	str	r1, [sp, #4]
 80015ca:	9200      	str	r2, [sp, #0]
 80015cc:	4643      	mov	r3, r8
 80015ce:	4672      	mov	r2, lr
 80015d0:	4661      	mov	r1, ip
 80015d2:	482c      	ldr	r0, [pc, #176]	@ (8001684 <main+0x2b4>)
 80015d4:	f003 ff20 	bl	8005418 <iprintf>
							);

						calibData.MinThumbStickX = 0xffff;
 80015d8:	4b25      	ldr	r3, [pc, #148]	@ (8001670 <main+0x2a0>)
 80015da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015de:	801a      	strh	r2, [r3, #0]
						calibData.MaxThumbStickX = 0;
 80015e0:	4b23      	ldr	r3, [pc, #140]	@ (8001670 <main+0x2a0>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	805a      	strh	r2, [r3, #2]
						calibData.MinThumbStickY = 0xffff;
 80015e6:	4b22      	ldr	r3, [pc, #136]	@ (8001670 <main+0x2a0>)
 80015e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015ec:	809a      	strh	r2, [r3, #4]
						calibData.MaxThumbStickY = 0;
 80015ee:	4b20      	ldr	r3, [pc, #128]	@ (8001670 <main+0x2a0>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	80da      	strh	r2, [r3, #6]
						calibData.MinTwistZ = 0xffff;
 80015f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001670 <main+0x2a0>)
 80015f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015fa:	811a      	strh	r2, [r3, #8]
						calibData.MaxTwistZ = 0;
 80015fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001670 <main+0x2a0>)
 80015fe:	2200      	movs	r2, #0
 8001600:	815a      	strh	r2, [r3, #10]
						calibData.MinSlider = 0xffff;
 8001602:	4b1b      	ldr	r3, [pc, #108]	@ (8001670 <main+0x2a0>)
 8001604:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001608:	819a      	strh	r2, [r3, #12]
						calibData.MaxSlider = 0;
 800160a:	4b19      	ldr	r3, [pc, #100]	@ (8001670 <main+0x2a0>)
 800160c:	2200      	movs	r2, #0
 800160e:	81da      	strh	r2, [r3, #14]
					if (CalibrationEnterTime == 0)
 8001610:	e03e      	b.n	8001690 <main+0x2c0>
						//calibData.SliderDetent1 = 0;
						//calibData.SliderDetent2 = 0;
					}
				}
				else if (CalibrationEnterTime)
 8001612:	4b15      	ldr	r3, [pc, #84]	@ (8001668 <main+0x298>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d03b      	beq.n	8001692 <main+0x2c2>
				{
					printf("Pre-calibration exit.\n");
 800161a:	481b      	ldr	r0, [pc, #108]	@ (8001688 <main+0x2b8>)
 800161c:	f003 ff6c 	bl	80054f8 <puts>
					CalibrationEnterTime = 0;
 8001620:	4b11      	ldr	r3, [pc, #68]	@ (8001668 <main+0x298>)
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
					CalibrationJustEntered = 0;
 8001626:	4b19      	ldr	r3, [pc, #100]	@ (800168c <main+0x2bc>)
 8001628:	2200      	movs	r2, #0
 800162a:	701a      	strb	r2, [r3, #0]
					blinkDelay = 0;
 800162c:	4b0a      	ldr	r3, [pc, #40]	@ (8001658 <main+0x288>)
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, RESET);
 8001632:	2200      	movs	r2, #0
 8001634:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001638:	4805      	ldr	r0, [pc, #20]	@ (8001650 <main+0x280>)
 800163a:	f001 fa7f 	bl	8002b3c <HAL_GPIO_WritePin>
 800163e:	e028      	b.n	8001692 <main+0x2c2>
 8001640:	20000354 	.word	0x20000354
 8001644:	20000418 	.word	0x20000418
 8001648:	20000460 	.word	0x20000460
 800164c:	200004c4 	.word	0x200004c4
 8001650:	40020800 	.word	0x40020800
 8001654:	08006618 	.word	0x08006618
 8001658:	200004b4 	.word	0x200004b4
 800165c:	200004ac 	.word	0x200004ac
 8001660:	200004b0 	.word	0x200004b0
 8001664:	200004d9 	.word	0x200004d9
 8001668:	200004d4 	.word	0x200004d4
 800166c:	200004ab 	.word	0x200004ab
 8001670:	20000000 	.word	0x20000000
 8001674:	0800663c 	.word	0x0800663c
 8001678:	200004a9 	.word	0x200004a9
 800167c:	200004aa 	.word	0x200004aa
 8001680:	080066fc 	.word	0x080066fc
 8001684:	08006714 	.word	0x08006714
 8001688:	080067d8 	.word	0x080067d8
 800168c:	200004d8 	.word	0x200004d8
					if (CalibrationEnterTime == 0)
 8001690:	bf00      	nop
				}
			}
		}

		if (virpilOK)
 8001692:	78fb      	ldrb	r3, [r7, #3]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <main+0x2cc>
			updateWWCache(); //update WW cache with virpil data
 8001698:	f7ff f9d0 	bl	8000a3c <updateWWCache>

		if (WWRequestLen > 0)
 800169c:	4b0a      	ldr	r3, [pc, #40]	@ (80016c8 <main+0x2f8>)
 800169e:	881b      	ldrh	r3, [r3, #0]
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d00b      	beq.n	80016be <main+0x2ee>
		{
			HandleDial();
 80016a6:	f7ff fd23 	bl	80010f0 <HandleDial>
			WW_HandleData();
 80016aa:	f7ff fd93 	bl	80011d4 <WW_HandleData>
			WWRequestLen = 0;
 80016ae:	4b06      	ldr	r3, [pc, #24]	@ (80016c8 <main+0x2f8>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	801a      	strh	r2, [r3, #0]
			HAL_UARTEx_ReceiveToIdle_IT(&huart1, WW_Request, WINWING_MAX_PACKET_SIZE);
 80016b4:	2208      	movs	r2, #8
 80016b6:	4905      	ldr	r1, [pc, #20]	@ (80016cc <main+0x2fc>)
 80016b8:	4805      	ldr	r0, [pc, #20]	@ (80016d0 <main+0x300>)
 80016ba:	f002 fdbc 	bl	8004236 <HAL_UARTEx_ReceiveToIdle_IT>
		}
//		else
		delay_us(400);
 80016be:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80016c2:	f7fe ff9b 	bl	80005fc <delay_us>
	{
 80016c6:	e6b1      	b.n	800142c <main+0x5c>
 80016c8:	200004cc 	.word	0x200004cc
 80016cc:	200004c4 	.word	0x200004c4
 80016d0:	20000460 	.word	0x20000460

080016d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b094      	sub	sp, #80	@ 0x50
 80016d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016da:	f107 0320 	add.w	r3, r7, #32
 80016de:	2230      	movs	r2, #48	@ 0x30
 80016e0:	2100      	movs	r1, #0
 80016e2:	4618      	mov	r0, r3
 80016e4:	f004 f8ac 	bl	8005840 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016e8:	f107 030c 	add.w	r3, r7, #12
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
 80016f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016f8:	2300      	movs	r3, #0
 80016fa:	60bb      	str	r3, [r7, #8]
 80016fc:	4b27      	ldr	r3, [pc, #156]	@ (800179c <SystemClock_Config+0xc8>)
 80016fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001700:	4a26      	ldr	r2, [pc, #152]	@ (800179c <SystemClock_Config+0xc8>)
 8001702:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001706:	6413      	str	r3, [r2, #64]	@ 0x40
 8001708:	4b24      	ldr	r3, [pc, #144]	@ (800179c <SystemClock_Config+0xc8>)
 800170a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800170c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001710:	60bb      	str	r3, [r7, #8]
 8001712:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001714:	2300      	movs	r3, #0
 8001716:	607b      	str	r3, [r7, #4]
 8001718:	4b21      	ldr	r3, [pc, #132]	@ (80017a0 <SystemClock_Config+0xcc>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a20      	ldr	r2, [pc, #128]	@ (80017a0 <SystemClock_Config+0xcc>)
 800171e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001722:	6013      	str	r3, [r2, #0]
 8001724:	4b1e      	ldr	r3, [pc, #120]	@ (80017a0 <SystemClock_Config+0xcc>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800172c:	607b      	str	r3, [r7, #4]
 800172e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001730:	2301      	movs	r3, #1
 8001732:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001734:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001738:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800173a:	2302      	movs	r3, #2
 800173c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800173e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001742:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001744:	2319      	movs	r3, #25
 8001746:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001748:	23c0      	movs	r3, #192	@ 0xc0
 800174a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800174c:	2302      	movs	r3, #2
 800174e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001750:	2304      	movs	r3, #4
 8001752:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001754:	f107 0320 	add.w	r3, r7, #32
 8001758:	4618      	mov	r0, r3
 800175a:	f001 fa23 	bl	8002ba4 <HAL_RCC_OscConfig>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001764:	f000 f958 	bl	8001a18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001768:	230f      	movs	r3, #15
 800176a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800176c:	2302      	movs	r3, #2
 800176e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001770:	2300      	movs	r3, #0
 8001772:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001774:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001778:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800177a:	2300      	movs	r3, #0
 800177c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800177e:	f107 030c 	add.w	r3, r7, #12
 8001782:	2103      	movs	r1, #3
 8001784:	4618      	mov	r0, r3
 8001786:	f001 fc85 	bl	8003094 <HAL_RCC_ClockConfig>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001790:	f000 f942 	bl	8001a18 <Error_Handler>
  }
}
 8001794:	bf00      	nop
 8001796:	3750      	adds	r7, #80	@ 0x50
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40023800 	.word	0x40023800
 80017a0:	40007000 	.word	0x40007000

080017a4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80017a8:	4b17      	ldr	r3, [pc, #92]	@ (8001808 <MX_SPI2_Init+0x64>)
 80017aa:	4a18      	ldr	r2, [pc, #96]	@ (800180c <MX_SPI2_Init+0x68>)
 80017ac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80017ae:	4b16      	ldr	r3, [pc, #88]	@ (8001808 <MX_SPI2_Init+0x64>)
 80017b0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80017b4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80017b6:	4b14      	ldr	r3, [pc, #80]	@ (8001808 <MX_SPI2_Init+0x64>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80017bc:	4b12      	ldr	r3, [pc, #72]	@ (8001808 <MX_SPI2_Init+0x64>)
 80017be:	2200      	movs	r2, #0
 80017c0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017c2:	4b11      	ldr	r3, [pc, #68]	@ (8001808 <MX_SPI2_Init+0x64>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001808 <MX_SPI2_Init+0x64>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80017ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001808 <MX_SPI2_Init+0x64>)
 80017d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017d4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80017d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001808 <MX_SPI2_Init+0x64>)
 80017d8:	2228      	movs	r2, #40	@ 0x28
 80017da:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001808 <MX_SPI2_Init+0x64>)
 80017de:	2200      	movs	r2, #0
 80017e0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80017e2:	4b09      	ldr	r3, [pc, #36]	@ (8001808 <MX_SPI2_Init+0x64>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017e8:	4b07      	ldr	r3, [pc, #28]	@ (8001808 <MX_SPI2_Init+0x64>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80017ee:	4b06      	ldr	r3, [pc, #24]	@ (8001808 <MX_SPI2_Init+0x64>)
 80017f0:	220a      	movs	r2, #10
 80017f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80017f4:	4804      	ldr	r0, [pc, #16]	@ (8001808 <MX_SPI2_Init+0x64>)
 80017f6:	f001 fe2d 	bl	8003454 <HAL_SPI_Init>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001800:	f000 f90a 	bl	8001a18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001804:	bf00      	nop
 8001806:	bd80      	pop	{r7, pc}
 8001808:	200003c0 	.word	0x200003c0
 800180c:	40003800 	.word	0x40003800

08001810 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001816:	f107 0308 	add.w	r3, r7, #8
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	605a      	str	r2, [r3, #4]
 8001820:	609a      	str	r2, [r3, #8]
 8001822:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001824:	463b      	mov	r3, r7
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800182c:	4b1e      	ldr	r3, [pc, #120]	@ (80018a8 <MX_TIM1_Init+0x98>)
 800182e:	4a1f      	ldr	r2, [pc, #124]	@ (80018ac <MX_TIM1_Init+0x9c>)
 8001830:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 96-1;
 8001832:	4b1d      	ldr	r3, [pc, #116]	@ (80018a8 <MX_TIM1_Init+0x98>)
 8001834:	225f      	movs	r2, #95	@ 0x5f
 8001836:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001838:	4b1b      	ldr	r3, [pc, #108]	@ (80018a8 <MX_TIM1_Init+0x98>)
 800183a:	2200      	movs	r2, #0
 800183c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800183e:	4b1a      	ldr	r3, [pc, #104]	@ (80018a8 <MX_TIM1_Init+0x98>)
 8001840:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001844:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001846:	4b18      	ldr	r3, [pc, #96]	@ (80018a8 <MX_TIM1_Init+0x98>)
 8001848:	2200      	movs	r2, #0
 800184a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800184c:	4b16      	ldr	r3, [pc, #88]	@ (80018a8 <MX_TIM1_Init+0x98>)
 800184e:	2200      	movs	r2, #0
 8001850:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001852:	4b15      	ldr	r3, [pc, #84]	@ (80018a8 <MX_TIM1_Init+0x98>)
 8001854:	2200      	movs	r2, #0
 8001856:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001858:	4813      	ldr	r0, [pc, #76]	@ (80018a8 <MX_TIM1_Init+0x98>)
 800185a:	f002 f909 	bl	8003a70 <HAL_TIM_Base_Init>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001864:	f000 f8d8 	bl	8001a18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001868:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800186c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800186e:	f107 0308 	add.w	r3, r7, #8
 8001872:	4619      	mov	r1, r3
 8001874:	480c      	ldr	r0, [pc, #48]	@ (80018a8 <MX_TIM1_Init+0x98>)
 8001876:	f002 f9a5 	bl	8003bc4 <HAL_TIM_ConfigClockSource>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001880:	f000 f8ca 	bl	8001a18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001884:	2300      	movs	r3, #0
 8001886:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001888:	2300      	movs	r3, #0
 800188a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800188c:	463b      	mov	r3, r7
 800188e:	4619      	mov	r1, r3
 8001890:	4805      	ldr	r0, [pc, #20]	@ (80018a8 <MX_TIM1_Init+0x98>)
 8001892:	f002 fb7f 	bl	8003f94 <HAL_TIMEx_MasterConfigSynchronization>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800189c:	f000 f8bc 	bl	8001a18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80018a0:	bf00      	nop
 80018a2:	3718      	adds	r7, #24
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	20000418 	.word	0x20000418
 80018ac:	40010000 	.word	0x40010000

080018b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018b4:	4b11      	ldr	r3, [pc, #68]	@ (80018fc <MX_USART1_UART_Init+0x4c>)
 80018b6:	4a12      	ldr	r2, [pc, #72]	@ (8001900 <MX_USART1_UART_Init+0x50>)
 80018b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 80018ba:	4b10      	ldr	r3, [pc, #64]	@ (80018fc <MX_USART1_UART_Init+0x4c>)
 80018bc:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 80018c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018c2:	4b0e      	ldr	r3, [pc, #56]	@ (80018fc <MX_USART1_UART_Init+0x4c>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018c8:	4b0c      	ldr	r3, [pc, #48]	@ (80018fc <MX_USART1_UART_Init+0x4c>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018ce:	4b0b      	ldr	r3, [pc, #44]	@ (80018fc <MX_USART1_UART_Init+0x4c>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018d4:	4b09      	ldr	r3, [pc, #36]	@ (80018fc <MX_USART1_UART_Init+0x4c>)
 80018d6:	220c      	movs	r2, #12
 80018d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018da:	4b08      	ldr	r3, [pc, #32]	@ (80018fc <MX_USART1_UART_Init+0x4c>)
 80018dc:	2200      	movs	r2, #0
 80018de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018e0:	4b06      	ldr	r3, [pc, #24]	@ (80018fc <MX_USART1_UART_Init+0x4c>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 80018e6:	4805      	ldr	r0, [pc, #20]	@ (80018fc <MX_USART1_UART_Init+0x4c>)
 80018e8:	f002 fbc2 	bl	8004070 <HAL_HalfDuplex_Init>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80018f2:	f000 f891 	bl	8001a18 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	20000460 	.word	0x20000460
 8001900:	40011000 	.word	0x40011000

08001904 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b08a      	sub	sp, #40	@ 0x28
 8001908:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800190a:	f107 0314 	add.w	r3, r7, #20
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	605a      	str	r2, [r3, #4]
 8001914:	609a      	str	r2, [r3, #8]
 8001916:	60da      	str	r2, [r3, #12]
 8001918:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	613b      	str	r3, [r7, #16]
 800191e:	4b32      	ldr	r3, [pc, #200]	@ (80019e8 <MX_GPIO_Init+0xe4>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001922:	4a31      	ldr	r2, [pc, #196]	@ (80019e8 <MX_GPIO_Init+0xe4>)
 8001924:	f043 0304 	orr.w	r3, r3, #4
 8001928:	6313      	str	r3, [r2, #48]	@ 0x30
 800192a:	4b2f      	ldr	r3, [pc, #188]	@ (80019e8 <MX_GPIO_Init+0xe4>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192e:	f003 0304 	and.w	r3, r3, #4
 8001932:	613b      	str	r3, [r7, #16]
 8001934:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	4b2b      	ldr	r3, [pc, #172]	@ (80019e8 <MX_GPIO_Init+0xe4>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193e:	4a2a      	ldr	r2, [pc, #168]	@ (80019e8 <MX_GPIO_Init+0xe4>)
 8001940:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001944:	6313      	str	r3, [r2, #48]	@ 0x30
 8001946:	4b28      	ldr	r3, [pc, #160]	@ (80019e8 <MX_GPIO_Init+0xe4>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	60bb      	str	r3, [r7, #8]
 8001956:	4b24      	ldr	r3, [pc, #144]	@ (80019e8 <MX_GPIO_Init+0xe4>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195a:	4a23      	ldr	r2, [pc, #140]	@ (80019e8 <MX_GPIO_Init+0xe4>)
 800195c:	f043 0302 	orr.w	r3, r3, #2
 8001960:	6313      	str	r3, [r2, #48]	@ 0x30
 8001962:	4b21      	ldr	r3, [pc, #132]	@ (80019e8 <MX_GPIO_Init+0xe4>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	60bb      	str	r3, [r7, #8]
 800196c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	607b      	str	r3, [r7, #4]
 8001972:	4b1d      	ldr	r3, [pc, #116]	@ (80019e8 <MX_GPIO_Init+0xe4>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001976:	4a1c      	ldr	r2, [pc, #112]	@ (80019e8 <MX_GPIO_Init+0xe4>)
 8001978:	f043 0301 	orr.w	r3, r3, #1
 800197c:	6313      	str	r3, [r2, #48]	@ 0x30
 800197e:	4b1a      	ldr	r3, [pc, #104]	@ (80019e8 <MX_GPIO_Init+0xe4>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	607b      	str	r3, [r7, #4]
 8001988:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800198a:	2200      	movs	r2, #0
 800198c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001990:	4816      	ldr	r0, [pc, #88]	@ (80019ec <MX_GPIO_Init+0xe8>)
 8001992:	f001 f8d3 	bl	8002b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VIRPIL_NSS_GPIO_Port, VIRPIL_NSS_Pin, GPIO_PIN_SET);
 8001996:	2201      	movs	r2, #1
 8001998:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800199c:	4814      	ldr	r0, [pc, #80]	@ (80019f0 <MX_GPIO_Init+0xec>)
 800199e:	f001 f8cd 	bl	8002b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80019a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a8:	2301      	movs	r3, #1
 80019aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b0:	2300      	movs	r3, #0
 80019b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80019b4:	f107 0314 	add.w	r3, r7, #20
 80019b8:	4619      	mov	r1, r3
 80019ba:	480c      	ldr	r0, [pc, #48]	@ (80019ec <MX_GPIO_Init+0xe8>)
 80019bc:	f000 ff3a 	bl	8002834 <HAL_GPIO_Init>

  /*Configure GPIO pin : VIRPIL_NSS_Pin */
  GPIO_InitStruct.Pin = VIRPIL_NSS_Pin;
 80019c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c6:	2301      	movs	r3, #1
 80019c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ca:	2300      	movs	r3, #0
 80019cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ce:	2303      	movs	r3, #3
 80019d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VIRPIL_NSS_GPIO_Port, &GPIO_InitStruct);
 80019d2:	f107 0314 	add.w	r3, r7, #20
 80019d6:	4619      	mov	r1, r3
 80019d8:	4805      	ldr	r0, [pc, #20]	@ (80019f0 <MX_GPIO_Init+0xec>)
 80019da:	f000 ff2b 	bl	8002834 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80019de:	bf00      	nop
 80019e0:	3728      	adds	r7, #40	@ 0x28
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40023800 	.word	0x40023800
 80019ec:	40020800 	.word	0x40020800
 80019f0:	40020400 	.word	0x40020400

080019f4 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	460b      	mov	r3, r1
 80019fe:	807b      	strh	r3, [r7, #2]
	WWRequestLen = size;
 8001a00:	4a04      	ldr	r2, [pc, #16]	@ (8001a14 <HAL_UARTEx_RxEventCallback+0x20>)
 8001a02:	887b      	ldrh	r3, [r7, #2]
 8001a04:	8013      	strh	r3, [r2, #0]
}
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	200004cc 	.word	0x200004cc

08001a18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a1c:	b672      	cpsid	i
}
 8001a1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
	{
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001a20:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a24:	4803      	ldr	r0, [pc, #12]	@ (8001a34 <Error_Handler+0x1c>)
 8001a26:	f001 f8a2 	bl	8002b6e <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8001a2a:	2064      	movs	r0, #100	@ 0x64
 8001a2c:	f000 fa56 	bl	8001edc <HAL_Delay>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001a30:	bf00      	nop
 8001a32:	e7f5      	b.n	8001a20 <Error_Handler+0x8>
 8001a34:	40020800 	.word	0x40020800

08001a38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	607b      	str	r3, [r7, #4]
 8001a42:	4b10      	ldr	r3, [pc, #64]	@ (8001a84 <HAL_MspInit+0x4c>)
 8001a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a46:	4a0f      	ldr	r2, [pc, #60]	@ (8001a84 <HAL_MspInit+0x4c>)
 8001a48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8001a84 <HAL_MspInit+0x4c>)
 8001a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a56:	607b      	str	r3, [r7, #4]
 8001a58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	603b      	str	r3, [r7, #0]
 8001a5e:	4b09      	ldr	r3, [pc, #36]	@ (8001a84 <HAL_MspInit+0x4c>)
 8001a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a62:	4a08      	ldr	r2, [pc, #32]	@ (8001a84 <HAL_MspInit+0x4c>)
 8001a64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a68:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a6a:	4b06      	ldr	r3, [pc, #24]	@ (8001a84 <HAL_MspInit+0x4c>)
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a72:	603b      	str	r3, [r7, #0]
 8001a74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a76:	bf00      	nop
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	40023800 	.word	0x40023800

08001a88 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b08a      	sub	sp, #40	@ 0x28
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a90:	f107 0314 	add.w	r3, r7, #20
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	60da      	str	r2, [r3, #12]
 8001a9e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a19      	ldr	r2, [pc, #100]	@ (8001b0c <HAL_SPI_MspInit+0x84>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d12c      	bne.n	8001b04 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	613b      	str	r3, [r7, #16]
 8001aae:	4b18      	ldr	r3, [pc, #96]	@ (8001b10 <HAL_SPI_MspInit+0x88>)
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab2:	4a17      	ldr	r2, [pc, #92]	@ (8001b10 <HAL_SPI_MspInit+0x88>)
 8001ab4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ab8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aba:	4b15      	ldr	r3, [pc, #84]	@ (8001b10 <HAL_SPI_MspInit+0x88>)
 8001abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001abe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ac2:	613b      	str	r3, [r7, #16]
 8001ac4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	60fb      	str	r3, [r7, #12]
 8001aca:	4b11      	ldr	r3, [pc, #68]	@ (8001b10 <HAL_SPI_MspInit+0x88>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ace:	4a10      	ldr	r2, [pc, #64]	@ (8001b10 <HAL_SPI_MspInit+0x88>)
 8001ad0:	f043 0302 	orr.w	r3, r3, #2
 8001ad4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ad6:	4b0e      	ldr	r3, [pc, #56]	@ (8001b10 <HAL_SPI_MspInit+0x88>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = VIRPIL_SCK_Pin|VIRPIL_MISO_Pin|VIRPIL_MOSI_Pin;
 8001ae2:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001ae6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af0:	2303      	movs	r3, #3
 8001af2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001af4:	2305      	movs	r3, #5
 8001af6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af8:	f107 0314 	add.w	r3, r7, #20
 8001afc:	4619      	mov	r1, r3
 8001afe:	4805      	ldr	r0, [pc, #20]	@ (8001b14 <HAL_SPI_MspInit+0x8c>)
 8001b00:	f000 fe98 	bl	8002834 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001b04:	bf00      	nop
 8001b06:	3728      	adds	r7, #40	@ 0x28
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	40003800 	.word	0x40003800
 8001b10:	40023800 	.word	0x40023800
 8001b14:	40020400 	.word	0x40020400

08001b18 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a0b      	ldr	r2, [pc, #44]	@ (8001b54 <HAL_TIM_Base_MspInit+0x3c>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d10d      	bne.n	8001b46 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60fb      	str	r3, [r7, #12]
 8001b2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b58 <HAL_TIM_Base_MspInit+0x40>)
 8001b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b32:	4a09      	ldr	r2, [pc, #36]	@ (8001b58 <HAL_TIM_Base_MspInit+0x40>)
 8001b34:	f043 0301 	orr.w	r3, r3, #1
 8001b38:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b3a:	4b07      	ldr	r3, [pc, #28]	@ (8001b58 <HAL_TIM_Base_MspInit+0x40>)
 8001b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001b46:	bf00      	nop
 8001b48:	3714      	adds	r7, #20
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	40010000 	.word	0x40010000
 8001b58:	40023800 	.word	0x40023800

08001b5c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b08a      	sub	sp, #40	@ 0x28
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b64:	f107 0314 	add.w	r3, r7, #20
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	605a      	str	r2, [r3, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	60da      	str	r2, [r3, #12]
 8001b72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a1d      	ldr	r2, [pc, #116]	@ (8001bf0 <HAL_UART_MspInit+0x94>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d134      	bne.n	8001be8 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	613b      	str	r3, [r7, #16]
 8001b82:	4b1c      	ldr	r3, [pc, #112]	@ (8001bf4 <HAL_UART_MspInit+0x98>)
 8001b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b86:	4a1b      	ldr	r2, [pc, #108]	@ (8001bf4 <HAL_UART_MspInit+0x98>)
 8001b88:	f043 0310 	orr.w	r3, r3, #16
 8001b8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b8e:	4b19      	ldr	r3, [pc, #100]	@ (8001bf4 <HAL_UART_MspInit+0x98>)
 8001b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b92:	f003 0310 	and.w	r3, r3, #16
 8001b96:	613b      	str	r3, [r7, #16]
 8001b98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	4b15      	ldr	r3, [pc, #84]	@ (8001bf4 <HAL_UART_MspInit+0x98>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba2:	4a14      	ldr	r2, [pc, #80]	@ (8001bf4 <HAL_UART_MspInit+0x98>)
 8001ba4:	f043 0301 	orr.w	r3, r3, #1
 8001ba8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001baa:	4b12      	ldr	r3, [pc, #72]	@ (8001bf4 <HAL_UART_MspInit+0x98>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = WINWING_TX_RX_Pin;
 8001bb6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001bba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bbc:	2312      	movs	r3, #18
 8001bbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001bc8:	2307      	movs	r3, #7
 8001bca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(WINWING_TX_RX_GPIO_Port, &GPIO_InitStruct);
 8001bcc:	f107 0314 	add.w	r3, r7, #20
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4809      	ldr	r0, [pc, #36]	@ (8001bf8 <HAL_UART_MspInit+0x9c>)
 8001bd4:	f000 fe2e 	bl	8002834 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001bd8:	2200      	movs	r2, #0
 8001bda:	2100      	movs	r1, #0
 8001bdc:	2025      	movs	r0, #37	@ 0x25
 8001bde:	f000 fa7c 	bl	80020da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001be2:	2025      	movs	r0, #37	@ 0x25
 8001be4:	f000 fa95 	bl	8002112 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001be8:	bf00      	nop
 8001bea:	3728      	adds	r7, #40	@ 0x28
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40011000 	.word	0x40011000
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	40020000 	.word	0x40020000

08001bfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c00:	bf00      	nop
 8001c02:	e7fd      	b.n	8001c00 <NMI_Handler+0x4>

08001c04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c08:	bf00      	nop
 8001c0a:	e7fd      	b.n	8001c08 <HardFault_Handler+0x4>

08001c0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c10:	bf00      	nop
 8001c12:	e7fd      	b.n	8001c10 <MemManage_Handler+0x4>

08001c14 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c18:	bf00      	nop
 8001c1a:	e7fd      	b.n	8001c18 <BusFault_Handler+0x4>

08001c1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c20:	bf00      	nop
 8001c22:	e7fd      	b.n	8001c20 <UsageFault_Handler+0x4>

08001c24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c28:	bf00      	nop
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr

08001c32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c32:	b480      	push	{r7}
 8001c34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c36:	bf00      	nop
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c44:	bf00      	nop
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr

08001c4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c52:	f000 f923 	bl	8001e9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c56:	bf00      	nop
 8001c58:	bd80      	pop	{r7, pc}
	...

08001c5c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c60:	4802      	ldr	r0, [pc, #8]	@ (8001c6c <USART1_IRQHandler+0x10>)
 8001c62:	f002 fb45 	bl	80042f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c66:	bf00      	nop
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	20000460 	.word	0x20000460

08001c70 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	617b      	str	r3, [r7, #20]
 8001c80:	e00a      	b.n	8001c98 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c82:	f3af 8000 	nop.w
 8001c86:	4601      	mov	r1, r0
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	1c5a      	adds	r2, r3, #1
 8001c8c:	60ba      	str	r2, [r7, #8]
 8001c8e:	b2ca      	uxtb	r2, r1
 8001c90:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	3301      	adds	r3, #1
 8001c96:	617b      	str	r3, [r7, #20]
 8001c98:	697a      	ldr	r2, [r7, #20]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	dbf0      	blt.n	8001c82 <_read+0x12>
  }

  return len;
 8001ca0:	687b      	ldr	r3, [r7, #4]
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3718      	adds	r7, #24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <_close>:
  }
  return len;
}

int _close(int file)
{
 8001caa:	b480      	push	{r7}
 8001cac:	b083      	sub	sp, #12
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	b083      	sub	sp, #12
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
 8001cca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cd2:	605a      	str	r2, [r3, #4]
  return 0;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <_isatty>:

int _isatty(int file)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	b083      	sub	sp, #12
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cea:	2301      	movs	r3, #1
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3714      	adds	r7, #20
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
	...

08001d14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d1c:	4a14      	ldr	r2, [pc, #80]	@ (8001d70 <_sbrk+0x5c>)
 8001d1e:	4b15      	ldr	r3, [pc, #84]	@ (8001d74 <_sbrk+0x60>)
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d28:	4b13      	ldr	r3, [pc, #76]	@ (8001d78 <_sbrk+0x64>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d102      	bne.n	8001d36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d30:	4b11      	ldr	r3, [pc, #68]	@ (8001d78 <_sbrk+0x64>)
 8001d32:	4a12      	ldr	r2, [pc, #72]	@ (8001d7c <_sbrk+0x68>)
 8001d34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d36:	4b10      	ldr	r3, [pc, #64]	@ (8001d78 <_sbrk+0x64>)
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d207      	bcs.n	8001d54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d44:	f003 fdca 	bl	80058dc <__errno>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	220c      	movs	r2, #12
 8001d4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d52:	e009      	b.n	8001d68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d54:	4b08      	ldr	r3, [pc, #32]	@ (8001d78 <_sbrk+0x64>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d5a:	4b07      	ldr	r3, [pc, #28]	@ (8001d78 <_sbrk+0x64>)
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4413      	add	r3, r2
 8001d62:	4a05      	ldr	r2, [pc, #20]	@ (8001d78 <_sbrk+0x64>)
 8001d64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d66:	68fb      	ldr	r3, [r7, #12]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3718      	adds	r7, #24
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	20020000 	.word	0x20020000
 8001d74:	00000400 	.word	0x00000400
 8001d78:	200004dc 	.word	0x200004dc
 8001d7c:	20000630 	.word	0x20000630

08001d80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d84:	4b06      	ldr	r3, [pc, #24]	@ (8001da0 <SystemInit+0x20>)
 8001d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d8a:	4a05      	ldr	r2, [pc, #20]	@ (8001da0 <SystemInit+0x20>)
 8001d8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d94:	bf00      	nop
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	e000ed00 	.word	0xe000ed00

08001da4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001da4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ddc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001da8:	f7ff ffea 	bl	8001d80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001dac:	480c      	ldr	r0, [pc, #48]	@ (8001de0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001dae:	490d      	ldr	r1, [pc, #52]	@ (8001de4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001db0:	4a0d      	ldr	r2, [pc, #52]	@ (8001de8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001db2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001db4:	e002      	b.n	8001dbc <LoopCopyDataInit>

08001db6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001db6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001db8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dba:	3304      	adds	r3, #4

08001dbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dc0:	d3f9      	bcc.n	8001db6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dc2:	4a0a      	ldr	r2, [pc, #40]	@ (8001dec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001dc4:	4c0a      	ldr	r4, [pc, #40]	@ (8001df0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001dc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dc8:	e001      	b.n	8001dce <LoopFillZerobss>

08001dca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dcc:	3204      	adds	r2, #4

08001dce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dd0:	d3fb      	bcc.n	8001dca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dd2:	f003 fd89 	bl	80058e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dd6:	f7ff fafb 	bl	80013d0 <main>
  bx  lr    
 8001dda:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ddc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001de0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001de4:	200003a4 	.word	0x200003a4
  ldr r2, =_sidata
 8001de8:	08006860 	.word	0x08006860
  ldr r2, =_sbss
 8001dec:	200003a4 	.word	0x200003a4
  ldr r4, =_ebss
 8001df0:	20000630 	.word	0x20000630

08001df4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001df4:	e7fe      	b.n	8001df4 <ADC_IRQHandler>
	...

08001df8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dfc:	4b0e      	ldr	r3, [pc, #56]	@ (8001e38 <HAL_Init+0x40>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a0d      	ldr	r2, [pc, #52]	@ (8001e38 <HAL_Init+0x40>)
 8001e02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e08:	4b0b      	ldr	r3, [pc, #44]	@ (8001e38 <HAL_Init+0x40>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a0a      	ldr	r2, [pc, #40]	@ (8001e38 <HAL_Init+0x40>)
 8001e0e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e14:	4b08      	ldr	r3, [pc, #32]	@ (8001e38 <HAL_Init+0x40>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a07      	ldr	r2, [pc, #28]	@ (8001e38 <HAL_Init+0x40>)
 8001e1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e20:	2003      	movs	r0, #3
 8001e22:	f000 f94f 	bl	80020c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e26:	200f      	movs	r0, #15
 8001e28:	f000 f808 	bl	8001e3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e2c:	f7ff fe04 	bl	8001a38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	40023c00 	.word	0x40023c00

08001e3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e44:	4b12      	ldr	r3, [pc, #72]	@ (8001e90 <HAL_InitTick+0x54>)
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	4b12      	ldr	r3, [pc, #72]	@ (8001e94 <HAL_InitTick+0x58>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f000 f967 	bl	800212e <HAL_SYSTICK_Config>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e00e      	b.n	8001e88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2b0f      	cmp	r3, #15
 8001e6e:	d80a      	bhi.n	8001e86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e70:	2200      	movs	r2, #0
 8001e72:	6879      	ldr	r1, [r7, #4]
 8001e74:	f04f 30ff 	mov.w	r0, #4294967295
 8001e78:	f000 f92f 	bl	80020da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e7c:	4a06      	ldr	r2, [pc, #24]	@ (8001e98 <HAL_InitTick+0x5c>)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e82:	2300      	movs	r3, #0
 8001e84:	e000      	b.n	8001e88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3708      	adds	r7, #8
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	2000031c 	.word	0x2000031c
 8001e94:	20000324 	.word	0x20000324
 8001e98:	20000320 	.word	0x20000320

08001e9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ea0:	4b06      	ldr	r3, [pc, #24]	@ (8001ebc <HAL_IncTick+0x20>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	4b06      	ldr	r3, [pc, #24]	@ (8001ec0 <HAL_IncTick+0x24>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4413      	add	r3, r2
 8001eac:	4a04      	ldr	r2, [pc, #16]	@ (8001ec0 <HAL_IncTick+0x24>)
 8001eae:	6013      	str	r3, [r2, #0]
}
 8001eb0:	bf00      	nop
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	20000324 	.word	0x20000324
 8001ec0:	200004e0 	.word	0x200004e0

08001ec4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ec8:	4b03      	ldr	r3, [pc, #12]	@ (8001ed8 <HAL_GetTick+0x14>)
 8001eca:	681b      	ldr	r3, [r3, #0]
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	200004e0 	.word	0x200004e0

08001edc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ee4:	f7ff ffee 	bl	8001ec4 <HAL_GetTick>
 8001ee8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ef4:	d005      	beq.n	8001f02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ef6:	4b0a      	ldr	r3, [pc, #40]	@ (8001f20 <HAL_Delay+0x44>)
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	461a      	mov	r2, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	4413      	add	r3, r2
 8001f00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f02:	bf00      	nop
 8001f04:	f7ff ffde 	bl	8001ec4 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d8f7      	bhi.n	8001f04 <HAL_Delay+0x28>
  {
  }
}
 8001f14:	bf00      	nop
 8001f16:	bf00      	nop
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	20000324 	.word	0x20000324

08001f24 <__NVIC_SetPriorityGrouping>:
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f34:	4b0c      	ldr	r3, [pc, #48]	@ (8001f68 <__NVIC_SetPriorityGrouping+0x44>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f3a:	68ba      	ldr	r2, [r7, #8]
 8001f3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f40:	4013      	ands	r3, r2
 8001f42:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f56:	4a04      	ldr	r2, [pc, #16]	@ (8001f68 <__NVIC_SetPriorityGrouping+0x44>)
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	60d3      	str	r3, [r2, #12]
}
 8001f5c:	bf00      	nop
 8001f5e:	3714      	adds	r7, #20
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	e000ed00 	.word	0xe000ed00

08001f6c <__NVIC_GetPriorityGrouping>:
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f70:	4b04      	ldr	r3, [pc, #16]	@ (8001f84 <__NVIC_GetPriorityGrouping+0x18>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	0a1b      	lsrs	r3, r3, #8
 8001f76:	f003 0307 	and.w	r3, r3, #7
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr
 8001f84:	e000ed00 	.word	0xe000ed00

08001f88 <__NVIC_EnableIRQ>:
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	4603      	mov	r3, r0
 8001f90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	db0b      	blt.n	8001fb2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f9a:	79fb      	ldrb	r3, [r7, #7]
 8001f9c:	f003 021f 	and.w	r2, r3, #31
 8001fa0:	4907      	ldr	r1, [pc, #28]	@ (8001fc0 <__NVIC_EnableIRQ+0x38>)
 8001fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa6:	095b      	lsrs	r3, r3, #5
 8001fa8:	2001      	movs	r0, #1
 8001faa:	fa00 f202 	lsl.w	r2, r0, r2
 8001fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001fb2:	bf00      	nop
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	e000e100 	.word	0xe000e100

08001fc4 <__NVIC_SetPriority>:
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	4603      	mov	r3, r0
 8001fcc:	6039      	str	r1, [r7, #0]
 8001fce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	db0a      	blt.n	8001fee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	b2da      	uxtb	r2, r3
 8001fdc:	490c      	ldr	r1, [pc, #48]	@ (8002010 <__NVIC_SetPriority+0x4c>)
 8001fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe2:	0112      	lsls	r2, r2, #4
 8001fe4:	b2d2      	uxtb	r2, r2
 8001fe6:	440b      	add	r3, r1
 8001fe8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001fec:	e00a      	b.n	8002004 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	b2da      	uxtb	r2, r3
 8001ff2:	4908      	ldr	r1, [pc, #32]	@ (8002014 <__NVIC_SetPriority+0x50>)
 8001ff4:	79fb      	ldrb	r3, [r7, #7]
 8001ff6:	f003 030f 	and.w	r3, r3, #15
 8001ffa:	3b04      	subs	r3, #4
 8001ffc:	0112      	lsls	r2, r2, #4
 8001ffe:	b2d2      	uxtb	r2, r2
 8002000:	440b      	add	r3, r1
 8002002:	761a      	strb	r2, [r3, #24]
}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr
 8002010:	e000e100 	.word	0xe000e100
 8002014:	e000ed00 	.word	0xe000ed00

08002018 <NVIC_EncodePriority>:
{
 8002018:	b480      	push	{r7}
 800201a:	b089      	sub	sp, #36	@ 0x24
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f003 0307 	and.w	r3, r3, #7
 800202a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	f1c3 0307 	rsb	r3, r3, #7
 8002032:	2b04      	cmp	r3, #4
 8002034:	bf28      	it	cs
 8002036:	2304      	movcs	r3, #4
 8002038:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	3304      	adds	r3, #4
 800203e:	2b06      	cmp	r3, #6
 8002040:	d902      	bls.n	8002048 <NVIC_EncodePriority+0x30>
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	3b03      	subs	r3, #3
 8002046:	e000      	b.n	800204a <NVIC_EncodePriority+0x32>
 8002048:	2300      	movs	r3, #0
 800204a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800204c:	f04f 32ff 	mov.w	r2, #4294967295
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	43da      	mvns	r2, r3
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	401a      	ands	r2, r3
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002060:	f04f 31ff 	mov.w	r1, #4294967295
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	fa01 f303 	lsl.w	r3, r1, r3
 800206a:	43d9      	mvns	r1, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002070:	4313      	orrs	r3, r2
}
 8002072:	4618      	mov	r0, r3
 8002074:	3724      	adds	r7, #36	@ 0x24
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
	...

08002080 <SysTick_Config>:
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	3b01      	subs	r3, #1
 800208c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002090:	d301      	bcc.n	8002096 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002092:	2301      	movs	r3, #1
 8002094:	e00f      	b.n	80020b6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002096:	4a0a      	ldr	r2, [pc, #40]	@ (80020c0 <SysTick_Config+0x40>)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	3b01      	subs	r3, #1
 800209c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800209e:	210f      	movs	r1, #15
 80020a0:	f04f 30ff 	mov.w	r0, #4294967295
 80020a4:	f7ff ff8e 	bl	8001fc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020a8:	4b05      	ldr	r3, [pc, #20]	@ (80020c0 <SysTick_Config+0x40>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ae:	4b04      	ldr	r3, [pc, #16]	@ (80020c0 <SysTick_Config+0x40>)
 80020b0:	2207      	movs	r2, #7
 80020b2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	e000e010 	.word	0xe000e010

080020c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f7ff ff29 	bl	8001f24 <__NVIC_SetPriorityGrouping>
}
 80020d2:	bf00      	nop
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020da:	b580      	push	{r7, lr}
 80020dc:	b086      	sub	sp, #24
 80020de:	af00      	add	r7, sp, #0
 80020e0:	4603      	mov	r3, r0
 80020e2:	60b9      	str	r1, [r7, #8]
 80020e4:	607a      	str	r2, [r7, #4]
 80020e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020e8:	2300      	movs	r3, #0
 80020ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020ec:	f7ff ff3e 	bl	8001f6c <__NVIC_GetPriorityGrouping>
 80020f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	68b9      	ldr	r1, [r7, #8]
 80020f6:	6978      	ldr	r0, [r7, #20]
 80020f8:	f7ff ff8e 	bl	8002018 <NVIC_EncodePriority>
 80020fc:	4602      	mov	r2, r0
 80020fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002102:	4611      	mov	r1, r2
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff ff5d 	bl	8001fc4 <__NVIC_SetPriority>
}
 800210a:	bf00      	nop
 800210c:	3718      	adds	r7, #24
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b082      	sub	sp, #8
 8002116:	af00      	add	r7, sp, #0
 8002118:	4603      	mov	r3, r0
 800211a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800211c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff ff31 	bl	8001f88 <__NVIC_EnableIRQ>
}
 8002126:	bf00      	nop
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b082      	sub	sp, #8
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f7ff ffa2 	bl	8002080 <SysTick_Config>
 800213c:	4603      	mov	r3, r0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b084      	sub	sp, #16
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002152:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002154:	f7ff feb6 	bl	8001ec4 <HAL_GetTick>
 8002158:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b02      	cmp	r3, #2
 8002164:	d008      	beq.n	8002178 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2280      	movs	r2, #128	@ 0x80
 800216a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e052      	b.n	800221e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f022 0216 	bic.w	r2, r2, #22
 8002186:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	695a      	ldr	r2, [r3, #20]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002196:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219c:	2b00      	cmp	r3, #0
 800219e:	d103      	bne.n	80021a8 <HAL_DMA_Abort+0x62>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d007      	beq.n	80021b8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f022 0208 	bic.w	r2, r2, #8
 80021b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f022 0201 	bic.w	r2, r2, #1
 80021c6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021c8:	e013      	b.n	80021f2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021ca:	f7ff fe7b 	bl	8001ec4 <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	2b05      	cmp	r3, #5
 80021d6:	d90c      	bls.n	80021f2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2220      	movs	r2, #32
 80021dc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2203      	movs	r2, #3
 80021e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e015      	b.n	800221e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0301 	and.w	r3, r3, #1
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d1e4      	bne.n	80021ca <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002204:	223f      	movs	r2, #63	@ 0x3f
 8002206:	409a      	lsls	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002226:	b480      	push	{r7}
 8002228:	b083      	sub	sp, #12
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d004      	beq.n	8002244 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2280      	movs	r2, #128	@ 0x80
 800223e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e00c      	b.n	800225e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2205      	movs	r2, #5
 8002248:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f022 0201 	bic.w	r2, r2, #1
 800225a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
	...

0800226c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800227a:	4b23      	ldr	r3, [pc, #140]	@ (8002308 <HAL_FLASH_Program+0x9c>)
 800227c:	7e1b      	ldrb	r3, [r3, #24]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d101      	bne.n	8002286 <HAL_FLASH_Program+0x1a>
 8002282:	2302      	movs	r3, #2
 8002284:	e03b      	b.n	80022fe <HAL_FLASH_Program+0x92>
 8002286:	4b20      	ldr	r3, [pc, #128]	@ (8002308 <HAL_FLASH_Program+0x9c>)
 8002288:	2201      	movs	r2, #1
 800228a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800228c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002290:	f000 f870 	bl	8002374 <FLASH_WaitForLastOperation>
 8002294:	4603      	mov	r3, r0
 8002296:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8002298:	7dfb      	ldrb	r3, [r7, #23]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d12b      	bne.n	80022f6 <HAL_FLASH_Program+0x8a>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d105      	bne.n	80022b0 <HAL_FLASH_Program+0x44>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80022a4:	783b      	ldrb	r3, [r7, #0]
 80022a6:	4619      	mov	r1, r3
 80022a8:	68b8      	ldr	r0, [r7, #8]
 80022aa:	f000 f91b 	bl	80024e4 <FLASH_Program_Byte>
 80022ae:	e016      	b.n	80022de <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d105      	bne.n	80022c2 <HAL_FLASH_Program+0x56>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80022b6:	883b      	ldrh	r3, [r7, #0]
 80022b8:	4619      	mov	r1, r3
 80022ba:	68b8      	ldr	r0, [r7, #8]
 80022bc:	f000 f8ee 	bl	800249c <FLASH_Program_HalfWord>
 80022c0:	e00d      	b.n	80022de <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d105      	bne.n	80022d4 <HAL_FLASH_Program+0x68>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	4619      	mov	r1, r3
 80022cc:	68b8      	ldr	r0, [r7, #8]
 80022ce:	f000 f8c3 	bl	8002458 <FLASH_Program_Word>
 80022d2:	e004      	b.n	80022de <HAL_FLASH_Program+0x72>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80022d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80022d8:	68b8      	ldr	r0, [r7, #8]
 80022da:	f000 f88b 	bl	80023f4 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80022de:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80022e2:	f000 f847 	bl	8002374 <FLASH_WaitForLastOperation>
 80022e6:	4603      	mov	r3, r0
 80022e8:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 80022ea:	4b08      	ldr	r3, [pc, #32]	@ (800230c <HAL_FLASH_Program+0xa0>)
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	4a07      	ldr	r2, [pc, #28]	@ (800230c <HAL_FLASH_Program+0xa0>)
 80022f0:	f023 0301 	bic.w	r3, r3, #1
 80022f4:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80022f6:	4b04      	ldr	r3, [pc, #16]	@ (8002308 <HAL_FLASH_Program+0x9c>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	761a      	strb	r2, [r3, #24]

  return status;
 80022fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3718      	adds	r7, #24
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	20000328 	.word	0x20000328
 800230c:	40023c00 	.word	0x40023c00

08002310 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002316:	2300      	movs	r3, #0
 8002318:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800231a:	4b0b      	ldr	r3, [pc, #44]	@ (8002348 <HAL_FLASH_Unlock+0x38>)
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	2b00      	cmp	r3, #0
 8002320:	da0b      	bge.n	800233a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002322:	4b09      	ldr	r3, [pc, #36]	@ (8002348 <HAL_FLASH_Unlock+0x38>)
 8002324:	4a09      	ldr	r2, [pc, #36]	@ (800234c <HAL_FLASH_Unlock+0x3c>)
 8002326:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002328:	4b07      	ldr	r3, [pc, #28]	@ (8002348 <HAL_FLASH_Unlock+0x38>)
 800232a:	4a09      	ldr	r2, [pc, #36]	@ (8002350 <HAL_FLASH_Unlock+0x40>)
 800232c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800232e:	4b06      	ldr	r3, [pc, #24]	@ (8002348 <HAL_FLASH_Unlock+0x38>)
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	2b00      	cmp	r3, #0
 8002334:	da01      	bge.n	800233a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800233a:	79fb      	ldrb	r3, [r7, #7]
}
 800233c:	4618      	mov	r0, r3
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	40023c00 	.word	0x40023c00
 800234c:	45670123 	.word	0x45670123
 8002350:	cdef89ab 	.word	0xcdef89ab

08002354 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8002358:	4b05      	ldr	r3, [pc, #20]	@ (8002370 <HAL_FLASH_Lock+0x1c>)
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	4a04      	ldr	r2, [pc, #16]	@ (8002370 <HAL_FLASH_Lock+0x1c>)
 800235e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002362:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr
 8002370:	40023c00 	.word	0x40023c00

08002374 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800237c:	2300      	movs	r3, #0
 800237e:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002380:	4b1a      	ldr	r3, [pc, #104]	@ (80023ec <FLASH_WaitForLastOperation+0x78>)
 8002382:	2200      	movs	r2, #0
 8002384:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8002386:	f7ff fd9d 	bl	8001ec4 <HAL_GetTick>
 800238a:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 800238c:	e010      	b.n	80023b0 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002394:	d00c      	beq.n	80023b0 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d007      	beq.n	80023ac <FLASH_WaitForLastOperation+0x38>
 800239c:	f7ff fd92 	bl	8001ec4 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d201      	bcs.n	80023b0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e019      	b.n	80023e4 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 80023b0:	4b0f      	ldr	r3, [pc, #60]	@ (80023f0 <FLASH_WaitForLastOperation+0x7c>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d1e8      	bne.n	800238e <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80023bc:	4b0c      	ldr	r3, [pc, #48]	@ (80023f0 <FLASH_WaitForLastOperation+0x7c>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	f003 0301 	and.w	r3, r3, #1
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d002      	beq.n	80023ce <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80023c8:	4b09      	ldr	r3, [pc, #36]	@ (80023f0 <FLASH_WaitForLastOperation+0x7c>)
 80023ca:	2201      	movs	r2, #1
 80023cc:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80023ce:	4b08      	ldr	r3, [pc, #32]	@ (80023f0 <FLASH_WaitForLastOperation+0x7c>)
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d003      	beq.n	80023e2 <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80023da:	f000 f8a5 	bl	8002528 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e000      	b.n	80023e4 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80023e2:	2300      	movs	r3, #0

}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3710      	adds	r7, #16
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	20000328 	.word	0x20000328
 80023f0:	40023c00 	.word	0x40023c00

080023f4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002400:	4b14      	ldr	r3, [pc, #80]	@ (8002454 <FLASH_Program_DoubleWord+0x60>)
 8002402:	691b      	ldr	r3, [r3, #16]
 8002404:	4a13      	ldr	r2, [pc, #76]	@ (8002454 <FLASH_Program_DoubleWord+0x60>)
 8002406:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800240a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800240c:	4b11      	ldr	r3, [pc, #68]	@ (8002454 <FLASH_Program_DoubleWord+0x60>)
 800240e:	691b      	ldr	r3, [r3, #16]
 8002410:	4a10      	ldr	r2, [pc, #64]	@ (8002454 <FLASH_Program_DoubleWord+0x60>)
 8002412:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8002416:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002418:	4b0e      	ldr	r3, [pc, #56]	@ (8002454 <FLASH_Program_DoubleWord+0x60>)
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	4a0d      	ldr	r2, [pc, #52]	@ (8002454 <FLASH_Program_DoubleWord+0x60>)
 800241e:	f043 0301 	orr.w	r3, r3, #1
 8002422:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	683a      	ldr	r2, [r7, #0]
 8002428:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800242a:	f3bf 8f6f 	isb	sy
}
 800242e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8002430:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002434:	f04f 0200 	mov.w	r2, #0
 8002438:	f04f 0300 	mov.w	r3, #0
 800243c:	000a      	movs	r2, r1
 800243e:	2300      	movs	r3, #0
 8002440:	68f9      	ldr	r1, [r7, #12]
 8002442:	3104      	adds	r1, #4
 8002444:	4613      	mov	r3, r2
 8002446:	600b      	str	r3, [r1, #0]
}
 8002448:	bf00      	nop
 800244a:	3714      	adds	r7, #20
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr
 8002454:	40023c00 	.word	0x40023c00

08002458 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002462:	4b0d      	ldr	r3, [pc, #52]	@ (8002498 <FLASH_Program_Word+0x40>)
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	4a0c      	ldr	r2, [pc, #48]	@ (8002498 <FLASH_Program_Word+0x40>)
 8002468:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800246c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800246e:	4b0a      	ldr	r3, [pc, #40]	@ (8002498 <FLASH_Program_Word+0x40>)
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	4a09      	ldr	r2, [pc, #36]	@ (8002498 <FLASH_Program_Word+0x40>)
 8002474:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002478:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800247a:	4b07      	ldr	r3, [pc, #28]	@ (8002498 <FLASH_Program_Word+0x40>)
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	4a06      	ldr	r2, [pc, #24]	@ (8002498 <FLASH_Program_Word+0x40>)
 8002480:	f043 0301 	orr.w	r3, r3, #1
 8002484:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	601a      	str	r2, [r3, #0]
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	40023c00 	.word	0x40023c00

0800249c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	460b      	mov	r3, r1
 80024a6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80024a8:	4b0d      	ldr	r3, [pc, #52]	@ (80024e0 <FLASH_Program_HalfWord+0x44>)
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	4a0c      	ldr	r2, [pc, #48]	@ (80024e0 <FLASH_Program_HalfWord+0x44>)
 80024ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80024b4:	4b0a      	ldr	r3, [pc, #40]	@ (80024e0 <FLASH_Program_HalfWord+0x44>)
 80024b6:	691b      	ldr	r3, [r3, #16]
 80024b8:	4a09      	ldr	r2, [pc, #36]	@ (80024e0 <FLASH_Program_HalfWord+0x44>)
 80024ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80024c0:	4b07      	ldr	r3, [pc, #28]	@ (80024e0 <FLASH_Program_HalfWord+0x44>)
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	4a06      	ldr	r2, [pc, #24]	@ (80024e0 <FLASH_Program_HalfWord+0x44>)
 80024c6:	f043 0301 	orr.w	r3, r3, #1
 80024ca:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	887a      	ldrh	r2, [r7, #2]
 80024d0:	801a      	strh	r2, [r3, #0]
}
 80024d2:	bf00      	nop
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	40023c00 	.word	0x40023c00

080024e4 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	460b      	mov	r3, r1
 80024ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80024f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002524 <FLASH_Program_Byte+0x40>)
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	4a0b      	ldr	r2, [pc, #44]	@ (8002524 <FLASH_Program_Byte+0x40>)
 80024f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024fa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80024fc:	4b09      	ldr	r3, [pc, #36]	@ (8002524 <FLASH_Program_Byte+0x40>)
 80024fe:	4a09      	ldr	r2, [pc, #36]	@ (8002524 <FLASH_Program_Byte+0x40>)
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002504:	4b07      	ldr	r3, [pc, #28]	@ (8002524 <FLASH_Program_Byte+0x40>)
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	4a06      	ldr	r2, [pc, #24]	@ (8002524 <FLASH_Program_Byte+0x40>)
 800250a:	f043 0301 	orr.w	r3, r3, #1
 800250e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	78fa      	ldrb	r2, [r7, #3]
 8002514:	701a      	strb	r2, [r3, #0]
}
 8002516:	bf00      	nop
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	40023c00 	.word	0x40023c00

08002528 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800252c:	4b2f      	ldr	r3, [pc, #188]	@ (80025ec <FLASH_SetErrorCode+0xc4>)
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	f003 0310 	and.w	r3, r3, #16
 8002534:	2b00      	cmp	r3, #0
 8002536:	d008      	beq.n	800254a <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002538:	4b2d      	ldr	r3, [pc, #180]	@ (80025f0 <FLASH_SetErrorCode+0xc8>)
 800253a:	69db      	ldr	r3, [r3, #28]
 800253c:	f043 0310 	orr.w	r3, r3, #16
 8002540:	4a2b      	ldr	r2, [pc, #172]	@ (80025f0 <FLASH_SetErrorCode+0xc8>)
 8002542:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002544:	4b29      	ldr	r3, [pc, #164]	@ (80025ec <FLASH_SetErrorCode+0xc4>)
 8002546:	2210      	movs	r2, #16
 8002548:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800254a:	4b28      	ldr	r3, [pc, #160]	@ (80025ec <FLASH_SetErrorCode+0xc4>)
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	f003 0320 	and.w	r3, r3, #32
 8002552:	2b00      	cmp	r3, #0
 8002554:	d008      	beq.n	8002568 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002556:	4b26      	ldr	r3, [pc, #152]	@ (80025f0 <FLASH_SetErrorCode+0xc8>)
 8002558:	69db      	ldr	r3, [r3, #28]
 800255a:	f043 0308 	orr.w	r3, r3, #8
 800255e:	4a24      	ldr	r2, [pc, #144]	@ (80025f0 <FLASH_SetErrorCode+0xc8>)
 8002560:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8002562:	4b22      	ldr	r3, [pc, #136]	@ (80025ec <FLASH_SetErrorCode+0xc4>)
 8002564:	2220      	movs	r2, #32
 8002566:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002568:	4b20      	ldr	r3, [pc, #128]	@ (80025ec <FLASH_SetErrorCode+0xc4>)
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002570:	2b00      	cmp	r3, #0
 8002572:	d008      	beq.n	8002586 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002574:	4b1e      	ldr	r3, [pc, #120]	@ (80025f0 <FLASH_SetErrorCode+0xc8>)
 8002576:	69db      	ldr	r3, [r3, #28]
 8002578:	f043 0304 	orr.w	r3, r3, #4
 800257c:	4a1c      	ldr	r2, [pc, #112]	@ (80025f0 <FLASH_SetErrorCode+0xc8>)
 800257e:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002580:	4b1a      	ldr	r3, [pc, #104]	@ (80025ec <FLASH_SetErrorCode+0xc4>)
 8002582:	2240      	movs	r2, #64	@ 0x40
 8002584:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8002586:	4b19      	ldr	r3, [pc, #100]	@ (80025ec <FLASH_SetErrorCode+0xc4>)
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800258e:	2b00      	cmp	r3, #0
 8002590:	d008      	beq.n	80025a4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002592:	4b17      	ldr	r3, [pc, #92]	@ (80025f0 <FLASH_SetErrorCode+0xc8>)
 8002594:	69db      	ldr	r3, [r3, #28]
 8002596:	f043 0302 	orr.w	r3, r3, #2
 800259a:	4a15      	ldr	r2, [pc, #84]	@ (80025f0 <FLASH_SetErrorCode+0xc8>)
 800259c:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800259e:	4b13      	ldr	r3, [pc, #76]	@ (80025ec <FLASH_SetErrorCode+0xc4>)
 80025a0:	2280      	movs	r2, #128	@ 0x80
 80025a2:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80025a4:	4b11      	ldr	r3, [pc, #68]	@ (80025ec <FLASH_SetErrorCode+0xc4>)
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d009      	beq.n	80025c4 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80025b0:	4b0f      	ldr	r3, [pc, #60]	@ (80025f0 <FLASH_SetErrorCode+0xc8>)
 80025b2:	69db      	ldr	r3, [r3, #28]
 80025b4:	f043 0301 	orr.w	r3, r3, #1
 80025b8:	4a0d      	ldr	r2, [pc, #52]	@ (80025f0 <FLASH_SetErrorCode+0xc8>)
 80025ba:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80025bc:	4b0b      	ldr	r3, [pc, #44]	@ (80025ec <FLASH_SetErrorCode+0xc4>)
 80025be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80025c2:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80025c4:	4b09      	ldr	r3, [pc, #36]	@ (80025ec <FLASH_SetErrorCode+0xc4>)
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d008      	beq.n	80025e2 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80025d0:	4b07      	ldr	r3, [pc, #28]	@ (80025f0 <FLASH_SetErrorCode+0xc8>)
 80025d2:	69db      	ldr	r3, [r3, #28]
 80025d4:	f043 0320 	orr.w	r3, r3, #32
 80025d8:	4a05      	ldr	r2, [pc, #20]	@ (80025f0 <FLASH_SetErrorCode+0xc8>)
 80025da:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80025dc:	4b03      	ldr	r3, [pc, #12]	@ (80025ec <FLASH_SetErrorCode+0xc4>)
 80025de:	2202      	movs	r2, #2
 80025e0:	60da      	str	r2, [r3, #12]
  }
}
 80025e2:	bf00      	nop
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr
 80025ec:	40023c00 	.word	0x40023c00
 80025f0:	20000328 	.word	0x20000328

080025f4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t index = 0U;
 80025fe:	2300      	movs	r3, #0
 8002600:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002602:	4b31      	ldr	r3, [pc, #196]	@ (80026c8 <HAL_FLASHEx_Erase+0xd4>)
 8002604:	7e1b      	ldrb	r3, [r3, #24]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d101      	bne.n	800260e <HAL_FLASHEx_Erase+0x1a>
 800260a:	2302      	movs	r3, #2
 800260c:	e058      	b.n	80026c0 <HAL_FLASHEx_Erase+0xcc>
 800260e:	4b2e      	ldr	r3, [pc, #184]	@ (80026c8 <HAL_FLASHEx_Erase+0xd4>)
 8002610:	2201      	movs	r2, #1
 8002612:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002614:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002618:	f7ff feac 	bl	8002374 <FLASH_WaitForLastOperation>
 800261c:	4603      	mov	r3, r0
 800261e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002620:	7bfb      	ldrb	r3, [r7, #15]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d148      	bne.n	80026b8 <HAL_FLASHEx_Erase+0xc4>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	f04f 32ff 	mov.w	r2, #4294967295
 800262c:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d115      	bne.n	8002662 <HAL_FLASHEx_Erase+0x6e>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	b2da      	uxtb	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	4619      	mov	r1, r3
 8002642:	4610      	mov	r0, r2
 8002644:	f000 f844 	bl	80026d0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002648:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800264c:	f7ff fe92 	bl	8002374 <FLASH_WaitForLastOperation>
 8002650:	4603      	mov	r3, r0
 8002652:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8002654:	4b1d      	ldr	r3, [pc, #116]	@ (80026cc <HAL_FLASHEx_Erase+0xd8>)
 8002656:	691b      	ldr	r3, [r3, #16]
 8002658:	4a1c      	ldr	r2, [pc, #112]	@ (80026cc <HAL_FLASHEx_Erase+0xd8>)
 800265a:	f023 0304 	bic.w	r3, r3, #4
 800265e:	6113      	str	r3, [r2, #16]
 8002660:	e028      	b.n	80026b4 <HAL_FLASHEx_Erase+0xc0>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	60bb      	str	r3, [r7, #8]
 8002668:	e01c      	b.n	80026a4 <HAL_FLASHEx_Erase+0xb0>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	b2db      	uxtb	r3, r3
 8002670:	4619      	mov	r1, r3
 8002672:	68b8      	ldr	r0, [r7, #8]
 8002674:	f000 f850 	bl	8002718 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002678:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800267c:	f7ff fe7a 	bl	8002374 <FLASH_WaitForLastOperation>
 8002680:	4603      	mov	r3, r0
 8002682:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8002684:	4b11      	ldr	r3, [pc, #68]	@ (80026cc <HAL_FLASHEx_Erase+0xd8>)
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	4a10      	ldr	r2, [pc, #64]	@ (80026cc <HAL_FLASHEx_Erase+0xd8>)
 800268a:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 800268e:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8002690:	7bfb      	ldrb	r3, [r7, #15]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_FLASHEx_Erase+0xaa>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	68ba      	ldr	r2, [r7, #8]
 800269a:	601a      	str	r2, [r3, #0]
          break;
 800269c:	e00a      	b.n	80026b4 <HAL_FLASHEx_Erase+0xc0>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	3301      	adds	r3, #1
 80026a2:	60bb      	str	r3, [r7, #8]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	68da      	ldr	r2, [r3, #12]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	4413      	add	r3, r2
 80026ae:	68ba      	ldr	r2, [r7, #8]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d3da      	bcc.n	800266a <HAL_FLASHEx_Erase+0x76>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80026b4:	f000 f878 	bl	80027a8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80026b8:	4b03      	ldr	r3, [pc, #12]	@ (80026c8 <HAL_FLASHEx_Erase+0xd4>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	761a      	strb	r2, [r3, #24]

  return status;
 80026be:	7bfb      	ldrb	r3, [r7, #15]
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3710      	adds	r7, #16
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	20000328 	.word	0x20000328
 80026cc:	40023c00 	.word	0x40023c00

080026d0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	4603      	mov	r3, r0
 80026d8:	6039      	str	r1, [r7, #0]
 80026da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80026dc:	4b0d      	ldr	r3, [pc, #52]	@ (8002714 <FLASH_MassErase+0x44>)
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	4a0c      	ldr	r2, [pc, #48]	@ (8002714 <FLASH_MassErase+0x44>)
 80026e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026e6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80026e8:	4b0a      	ldr	r3, [pc, #40]	@ (8002714 <FLASH_MassErase+0x44>)
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	4a09      	ldr	r2, [pc, #36]	@ (8002714 <FLASH_MassErase+0x44>)
 80026ee:	f043 0304 	orr.w	r3, r3, #4
 80026f2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80026f4:	4b07      	ldr	r3, [pc, #28]	@ (8002714 <FLASH_MassErase+0x44>)
 80026f6:	691a      	ldr	r2, [r3, #16]
 80026f8:	79fb      	ldrb	r3, [r7, #7]
 80026fa:	021b      	lsls	r3, r3, #8
 80026fc:	4313      	orrs	r3, r2
 80026fe:	4a05      	ldr	r2, [pc, #20]	@ (8002714 <FLASH_MassErase+0x44>)
 8002700:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002704:	6113      	str	r3, [r2, #16]
}
 8002706:	bf00      	nop
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	40023c00 	.word	0x40023c00

08002718 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002718:	b480      	push	{r7}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	460b      	mov	r3, r1
 8002722:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002724:	2300      	movs	r3, #0
 8002726:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002728:	78fb      	ldrb	r3, [r7, #3]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d102      	bne.n	8002734 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800272e:	2300      	movs	r3, #0
 8002730:	60fb      	str	r3, [r7, #12]
 8002732:	e010      	b.n	8002756 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002734:	78fb      	ldrb	r3, [r7, #3]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d103      	bne.n	8002742 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800273a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	e009      	b.n	8002756 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002742:	78fb      	ldrb	r3, [r7, #3]
 8002744:	2b02      	cmp	r3, #2
 8002746:	d103      	bne.n	8002750 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002748:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800274c:	60fb      	str	r3, [r7, #12]
 800274e:	e002      	b.n	8002756 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002750:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002754:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002756:	4b13      	ldr	r3, [pc, #76]	@ (80027a4 <FLASH_Erase_Sector+0x8c>)
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	4a12      	ldr	r2, [pc, #72]	@ (80027a4 <FLASH_Erase_Sector+0x8c>)
 800275c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002760:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002762:	4b10      	ldr	r3, [pc, #64]	@ (80027a4 <FLASH_Erase_Sector+0x8c>)
 8002764:	691a      	ldr	r2, [r3, #16]
 8002766:	490f      	ldr	r1, [pc, #60]	@ (80027a4 <FLASH_Erase_Sector+0x8c>)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	4313      	orrs	r3, r2
 800276c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800276e:	4b0d      	ldr	r3, [pc, #52]	@ (80027a4 <FLASH_Erase_Sector+0x8c>)
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	4a0c      	ldr	r2, [pc, #48]	@ (80027a4 <FLASH_Erase_Sector+0x8c>)
 8002774:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002778:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800277a:	4b0a      	ldr	r3, [pc, #40]	@ (80027a4 <FLASH_Erase_Sector+0x8c>)
 800277c:	691a      	ldr	r2, [r3, #16]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	00db      	lsls	r3, r3, #3
 8002782:	4313      	orrs	r3, r2
 8002784:	4a07      	ldr	r2, [pc, #28]	@ (80027a4 <FLASH_Erase_Sector+0x8c>)
 8002786:	f043 0302 	orr.w	r3, r3, #2
 800278a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800278c:	4b05      	ldr	r3, [pc, #20]	@ (80027a4 <FLASH_Erase_Sector+0x8c>)
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	4a04      	ldr	r2, [pc, #16]	@ (80027a4 <FLASH_Erase_Sector+0x8c>)
 8002792:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002796:	6113      	str	r3, [r2, #16]
}
 8002798:	bf00      	nop
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr
 80027a4:	40023c00 	.word	0x40023c00

080027a8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80027ac:	4b20      	ldr	r3, [pc, #128]	@ (8002830 <FLASH_FlushCaches+0x88>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d017      	beq.n	80027e8 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80027b8:	4b1d      	ldr	r3, [pc, #116]	@ (8002830 <FLASH_FlushCaches+0x88>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a1c      	ldr	r2, [pc, #112]	@ (8002830 <FLASH_FlushCaches+0x88>)
 80027be:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80027c2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80027c4:	4b1a      	ldr	r3, [pc, #104]	@ (8002830 <FLASH_FlushCaches+0x88>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a19      	ldr	r2, [pc, #100]	@ (8002830 <FLASH_FlushCaches+0x88>)
 80027ca:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80027ce:	6013      	str	r3, [r2, #0]
 80027d0:	4b17      	ldr	r3, [pc, #92]	@ (8002830 <FLASH_FlushCaches+0x88>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a16      	ldr	r2, [pc, #88]	@ (8002830 <FLASH_FlushCaches+0x88>)
 80027d6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80027da:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027dc:	4b14      	ldr	r3, [pc, #80]	@ (8002830 <FLASH_FlushCaches+0x88>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a13      	ldr	r2, [pc, #76]	@ (8002830 <FLASH_FlushCaches+0x88>)
 80027e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80027e6:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80027e8:	4b11      	ldr	r3, [pc, #68]	@ (8002830 <FLASH_FlushCaches+0x88>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d017      	beq.n	8002824 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80027f4:	4b0e      	ldr	r3, [pc, #56]	@ (8002830 <FLASH_FlushCaches+0x88>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a0d      	ldr	r2, [pc, #52]	@ (8002830 <FLASH_FlushCaches+0x88>)
 80027fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80027fe:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002800:	4b0b      	ldr	r3, [pc, #44]	@ (8002830 <FLASH_FlushCaches+0x88>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a0a      	ldr	r2, [pc, #40]	@ (8002830 <FLASH_FlushCaches+0x88>)
 8002806:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800280a:	6013      	str	r3, [r2, #0]
 800280c:	4b08      	ldr	r3, [pc, #32]	@ (8002830 <FLASH_FlushCaches+0x88>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a07      	ldr	r2, [pc, #28]	@ (8002830 <FLASH_FlushCaches+0x88>)
 8002812:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002816:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002818:	4b05      	ldr	r3, [pc, #20]	@ (8002830 <FLASH_FlushCaches+0x88>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a04      	ldr	r2, [pc, #16]	@ (8002830 <FLASH_FlushCaches+0x88>)
 800281e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002822:	6013      	str	r3, [r2, #0]
  }
}
 8002824:	bf00      	nop
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	40023c00 	.word	0x40023c00

08002834 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002834:	b480      	push	{r7}
 8002836:	b089      	sub	sp, #36	@ 0x24
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800283e:	2300      	movs	r3, #0
 8002840:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002842:	2300      	movs	r3, #0
 8002844:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002846:	2300      	movs	r3, #0
 8002848:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800284a:	2300      	movs	r3, #0
 800284c:	61fb      	str	r3, [r7, #28]
 800284e:	e159      	b.n	8002b04 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002850:	2201      	movs	r2, #1
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	697a      	ldr	r2, [r7, #20]
 8002860:	4013      	ands	r3, r2
 8002862:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002864:	693a      	ldr	r2, [r7, #16]
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	429a      	cmp	r2, r3
 800286a:	f040 8148 	bne.w	8002afe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f003 0303 	and.w	r3, r3, #3
 8002876:	2b01      	cmp	r3, #1
 8002878:	d005      	beq.n	8002886 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002882:	2b02      	cmp	r3, #2
 8002884:	d130      	bne.n	80028e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	2203      	movs	r2, #3
 8002892:	fa02 f303 	lsl.w	r3, r2, r3
 8002896:	43db      	mvns	r3, r3
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	4013      	ands	r3, r2
 800289c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	68da      	ldr	r2, [r3, #12]
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	fa02 f303 	lsl.w	r3, r2, r3
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028bc:	2201      	movs	r2, #1
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	43db      	mvns	r3, r3
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	4013      	ands	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	091b      	lsrs	r3, r3, #4
 80028d2:	f003 0201 	and.w	r2, r3, #1
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	4313      	orrs	r3, r2
 80028e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f003 0303 	and.w	r3, r3, #3
 80028f0:	2b03      	cmp	r3, #3
 80028f2:	d017      	beq.n	8002924 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	2203      	movs	r2, #3
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	43db      	mvns	r3, r3
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	4013      	ands	r3, r2
 800290a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	689a      	ldr	r2, [r3, #8]
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	4313      	orrs	r3, r2
 800291c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f003 0303 	and.w	r3, r3, #3
 800292c:	2b02      	cmp	r3, #2
 800292e:	d123      	bne.n	8002978 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	08da      	lsrs	r2, r3, #3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	3208      	adds	r2, #8
 8002938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800293c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	f003 0307 	and.w	r3, r3, #7
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	220f      	movs	r2, #15
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	43db      	mvns	r3, r3
 800294e:	69ba      	ldr	r2, [r7, #24]
 8002950:	4013      	ands	r3, r2
 8002952:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	691a      	ldr	r2, [r3, #16]
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	f003 0307 	and.w	r3, r3, #7
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	4313      	orrs	r3, r2
 8002968:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	08da      	lsrs	r2, r3, #3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	3208      	adds	r2, #8
 8002972:	69b9      	ldr	r1, [r7, #24]
 8002974:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	2203      	movs	r2, #3
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	43db      	mvns	r3, r3
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	4013      	ands	r3, r2
 800298e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f003 0203 	and.w	r2, r3, #3
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f000 80a2 	beq.w	8002afe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ba:	2300      	movs	r3, #0
 80029bc:	60fb      	str	r3, [r7, #12]
 80029be:	4b57      	ldr	r3, [pc, #348]	@ (8002b1c <HAL_GPIO_Init+0x2e8>)
 80029c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029c2:	4a56      	ldr	r2, [pc, #344]	@ (8002b1c <HAL_GPIO_Init+0x2e8>)
 80029c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80029ca:	4b54      	ldr	r3, [pc, #336]	@ (8002b1c <HAL_GPIO_Init+0x2e8>)
 80029cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029d2:	60fb      	str	r3, [r7, #12]
 80029d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029d6:	4a52      	ldr	r2, [pc, #328]	@ (8002b20 <HAL_GPIO_Init+0x2ec>)
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	089b      	lsrs	r3, r3, #2
 80029dc:	3302      	adds	r3, #2
 80029de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	f003 0303 	and.w	r3, r3, #3
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	220f      	movs	r2, #15
 80029ee:	fa02 f303 	lsl.w	r3, r2, r3
 80029f2:	43db      	mvns	r3, r3
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	4013      	ands	r3, r2
 80029f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a49      	ldr	r2, [pc, #292]	@ (8002b24 <HAL_GPIO_Init+0x2f0>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d019      	beq.n	8002a36 <HAL_GPIO_Init+0x202>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a48      	ldr	r2, [pc, #288]	@ (8002b28 <HAL_GPIO_Init+0x2f4>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d013      	beq.n	8002a32 <HAL_GPIO_Init+0x1fe>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a47      	ldr	r2, [pc, #284]	@ (8002b2c <HAL_GPIO_Init+0x2f8>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d00d      	beq.n	8002a2e <HAL_GPIO_Init+0x1fa>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a46      	ldr	r2, [pc, #280]	@ (8002b30 <HAL_GPIO_Init+0x2fc>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d007      	beq.n	8002a2a <HAL_GPIO_Init+0x1f6>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a45      	ldr	r2, [pc, #276]	@ (8002b34 <HAL_GPIO_Init+0x300>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d101      	bne.n	8002a26 <HAL_GPIO_Init+0x1f2>
 8002a22:	2304      	movs	r3, #4
 8002a24:	e008      	b.n	8002a38 <HAL_GPIO_Init+0x204>
 8002a26:	2307      	movs	r3, #7
 8002a28:	e006      	b.n	8002a38 <HAL_GPIO_Init+0x204>
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e004      	b.n	8002a38 <HAL_GPIO_Init+0x204>
 8002a2e:	2302      	movs	r3, #2
 8002a30:	e002      	b.n	8002a38 <HAL_GPIO_Init+0x204>
 8002a32:	2301      	movs	r3, #1
 8002a34:	e000      	b.n	8002a38 <HAL_GPIO_Init+0x204>
 8002a36:	2300      	movs	r3, #0
 8002a38:	69fa      	ldr	r2, [r7, #28]
 8002a3a:	f002 0203 	and.w	r2, r2, #3
 8002a3e:	0092      	lsls	r2, r2, #2
 8002a40:	4093      	lsls	r3, r2
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a48:	4935      	ldr	r1, [pc, #212]	@ (8002b20 <HAL_GPIO_Init+0x2ec>)
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	089b      	lsrs	r3, r3, #2
 8002a4e:	3302      	adds	r3, #2
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a56:	4b38      	ldr	r3, [pc, #224]	@ (8002b38 <HAL_GPIO_Init+0x304>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	43db      	mvns	r3, r3
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	4013      	ands	r3, r2
 8002a64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d003      	beq.n	8002a7a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a7a:	4a2f      	ldr	r2, [pc, #188]	@ (8002b38 <HAL_GPIO_Init+0x304>)
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a80:	4b2d      	ldr	r3, [pc, #180]	@ (8002b38 <HAL_GPIO_Init+0x304>)
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	43db      	mvns	r3, r3
 8002a8a:	69ba      	ldr	r2, [r7, #24]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d003      	beq.n	8002aa4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002aa4:	4a24      	ldr	r2, [pc, #144]	@ (8002b38 <HAL_GPIO_Init+0x304>)
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002aaa:	4b23      	ldr	r3, [pc, #140]	@ (8002b38 <HAL_GPIO_Init+0x304>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	43db      	mvns	r3, r3
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d003      	beq.n	8002ace <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ace:	4a1a      	ldr	r2, [pc, #104]	@ (8002b38 <HAL_GPIO_Init+0x304>)
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ad4:	4b18      	ldr	r3, [pc, #96]	@ (8002b38 <HAL_GPIO_Init+0x304>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	43db      	mvns	r3, r3
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d003      	beq.n	8002af8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002af8:	4a0f      	ldr	r2, [pc, #60]	@ (8002b38 <HAL_GPIO_Init+0x304>)
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	3301      	adds	r3, #1
 8002b02:	61fb      	str	r3, [r7, #28]
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	2b0f      	cmp	r3, #15
 8002b08:	f67f aea2 	bls.w	8002850 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b0c:	bf00      	nop
 8002b0e:	bf00      	nop
 8002b10:	3724      	adds	r7, #36	@ 0x24
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	40023800 	.word	0x40023800
 8002b20:	40013800 	.word	0x40013800
 8002b24:	40020000 	.word	0x40020000
 8002b28:	40020400 	.word	0x40020400
 8002b2c:	40020800 	.word	0x40020800
 8002b30:	40020c00 	.word	0x40020c00
 8002b34:	40021000 	.word	0x40021000
 8002b38:	40013c00 	.word	0x40013c00

08002b3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	460b      	mov	r3, r1
 8002b46:	807b      	strh	r3, [r7, #2]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b4c:	787b      	ldrb	r3, [r7, #1]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d003      	beq.n	8002b5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b52:	887a      	ldrh	r2, [r7, #2]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b58:	e003      	b.n	8002b62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b5a:	887b      	ldrh	r3, [r7, #2]
 8002b5c:	041a      	lsls	r2, r3, #16
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	619a      	str	r2, [r3, #24]
}
 8002b62:	bf00      	nop
 8002b64:	370c      	adds	r7, #12
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr

08002b6e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b085      	sub	sp, #20
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
 8002b76:	460b      	mov	r3, r1
 8002b78:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b80:	887a      	ldrh	r2, [r7, #2]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	4013      	ands	r3, r2
 8002b86:	041a      	lsls	r2, r3, #16
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	43d9      	mvns	r1, r3
 8002b8c:	887b      	ldrh	r3, [r7, #2]
 8002b8e:	400b      	ands	r3, r1
 8002b90:	431a      	orrs	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	619a      	str	r2, [r3, #24]
}
 8002b96:	bf00      	nop
 8002b98:	3714      	adds	r7, #20
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
	...

08002ba4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b086      	sub	sp, #24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d101      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e267      	b.n	8003086 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d075      	beq.n	8002cae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002bc2:	4b88      	ldr	r3, [pc, #544]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f003 030c 	and.w	r3, r3, #12
 8002bca:	2b04      	cmp	r3, #4
 8002bcc:	d00c      	beq.n	8002be8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bce:	4b85      	ldr	r3, [pc, #532]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002bd6:	2b08      	cmp	r3, #8
 8002bd8:	d112      	bne.n	8002c00 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bda:	4b82      	ldr	r3, [pc, #520]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002be2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002be6:	d10b      	bne.n	8002c00 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be8:	4b7e      	ldr	r3, [pc, #504]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d05b      	beq.n	8002cac <HAL_RCC_OscConfig+0x108>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d157      	bne.n	8002cac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e242      	b.n	8003086 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c08:	d106      	bne.n	8002c18 <HAL_RCC_OscConfig+0x74>
 8002c0a:	4b76      	ldr	r3, [pc, #472]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a75      	ldr	r2, [pc, #468]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002c10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c14:	6013      	str	r3, [r2, #0]
 8002c16:	e01d      	b.n	8002c54 <HAL_RCC_OscConfig+0xb0>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c20:	d10c      	bne.n	8002c3c <HAL_RCC_OscConfig+0x98>
 8002c22:	4b70      	ldr	r3, [pc, #448]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a6f      	ldr	r2, [pc, #444]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002c28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c2c:	6013      	str	r3, [r2, #0]
 8002c2e:	4b6d      	ldr	r3, [pc, #436]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a6c      	ldr	r2, [pc, #432]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002c34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c38:	6013      	str	r3, [r2, #0]
 8002c3a:	e00b      	b.n	8002c54 <HAL_RCC_OscConfig+0xb0>
 8002c3c:	4b69      	ldr	r3, [pc, #420]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a68      	ldr	r2, [pc, #416]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002c42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c46:	6013      	str	r3, [r2, #0]
 8002c48:	4b66      	ldr	r3, [pc, #408]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a65      	ldr	r2, [pc, #404]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002c4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d013      	beq.n	8002c84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c5c:	f7ff f932 	bl	8001ec4 <HAL_GetTick>
 8002c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c62:	e008      	b.n	8002c76 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c64:	f7ff f92e 	bl	8001ec4 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b64      	cmp	r3, #100	@ 0x64
 8002c70:	d901      	bls.n	8002c76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e207      	b.n	8003086 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c76:	4b5b      	ldr	r3, [pc, #364]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d0f0      	beq.n	8002c64 <HAL_RCC_OscConfig+0xc0>
 8002c82:	e014      	b.n	8002cae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c84:	f7ff f91e 	bl	8001ec4 <HAL_GetTick>
 8002c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c8a:	e008      	b.n	8002c9e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c8c:	f7ff f91a 	bl	8001ec4 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b64      	cmp	r3, #100	@ 0x64
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e1f3      	b.n	8003086 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c9e:	4b51      	ldr	r3, [pc, #324]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1f0      	bne.n	8002c8c <HAL_RCC_OscConfig+0xe8>
 8002caa:	e000      	b.n	8002cae <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d063      	beq.n	8002d82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002cba:	4b4a      	ldr	r3, [pc, #296]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f003 030c 	and.w	r3, r3, #12
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00b      	beq.n	8002cde <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cc6:	4b47      	ldr	r3, [pc, #284]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002cce:	2b08      	cmp	r3, #8
 8002cd0:	d11c      	bne.n	8002d0c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cd2:	4b44      	ldr	r3, [pc, #272]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d116      	bne.n	8002d0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cde:	4b41      	ldr	r3, [pc, #260]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d005      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x152>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d001      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e1c7      	b.n	8003086 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cf6:	4b3b      	ldr	r3, [pc, #236]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	00db      	lsls	r3, r3, #3
 8002d04:	4937      	ldr	r1, [pc, #220]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d0a:	e03a      	b.n	8002d82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d020      	beq.n	8002d56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d14:	4b34      	ldr	r3, [pc, #208]	@ (8002de8 <HAL_RCC_OscConfig+0x244>)
 8002d16:	2201      	movs	r2, #1
 8002d18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d1a:	f7ff f8d3 	bl	8001ec4 <HAL_GetTick>
 8002d1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d20:	e008      	b.n	8002d34 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d22:	f7ff f8cf 	bl	8001ec4 <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d901      	bls.n	8002d34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e1a8      	b.n	8003086 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d34:	4b2b      	ldr	r3, [pc, #172]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d0f0      	beq.n	8002d22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d40:	4b28      	ldr	r3, [pc, #160]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	4925      	ldr	r1, [pc, #148]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	600b      	str	r3, [r1, #0]
 8002d54:	e015      	b.n	8002d82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d56:	4b24      	ldr	r3, [pc, #144]	@ (8002de8 <HAL_RCC_OscConfig+0x244>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d5c:	f7ff f8b2 	bl	8001ec4 <HAL_GetTick>
 8002d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d62:	e008      	b.n	8002d76 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d64:	f7ff f8ae 	bl	8001ec4 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e187      	b.n	8003086 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d76:	4b1b      	ldr	r3, [pc, #108]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1f0      	bne.n	8002d64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0308 	and.w	r3, r3, #8
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d036      	beq.n	8002dfc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d016      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d96:	4b15      	ldr	r3, [pc, #84]	@ (8002dec <HAL_RCC_OscConfig+0x248>)
 8002d98:	2201      	movs	r2, #1
 8002d9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d9c:	f7ff f892 	bl	8001ec4 <HAL_GetTick>
 8002da0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002da2:	e008      	b.n	8002db6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002da4:	f7ff f88e 	bl	8001ec4 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e167      	b.n	8003086 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002db6:	4b0b      	ldr	r3, [pc, #44]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002db8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d0f0      	beq.n	8002da4 <HAL_RCC_OscConfig+0x200>
 8002dc2:	e01b      	b.n	8002dfc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dc4:	4b09      	ldr	r3, [pc, #36]	@ (8002dec <HAL_RCC_OscConfig+0x248>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dca:	f7ff f87b 	bl	8001ec4 <HAL_GetTick>
 8002dce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dd0:	e00e      	b.n	8002df0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dd2:	f7ff f877 	bl	8001ec4 <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d907      	bls.n	8002df0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e150      	b.n	8003086 <HAL_RCC_OscConfig+0x4e2>
 8002de4:	40023800 	.word	0x40023800
 8002de8:	42470000 	.word	0x42470000
 8002dec:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002df0:	4b88      	ldr	r3, [pc, #544]	@ (8003014 <HAL_RCC_OscConfig+0x470>)
 8002df2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002df4:	f003 0302 	and.w	r3, r3, #2
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1ea      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0304 	and.w	r3, r3, #4
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	f000 8097 	beq.w	8002f38 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e0e:	4b81      	ldr	r3, [pc, #516]	@ (8003014 <HAL_RCC_OscConfig+0x470>)
 8002e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d10f      	bne.n	8002e3a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	60bb      	str	r3, [r7, #8]
 8002e1e:	4b7d      	ldr	r3, [pc, #500]	@ (8003014 <HAL_RCC_OscConfig+0x470>)
 8002e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e22:	4a7c      	ldr	r2, [pc, #496]	@ (8003014 <HAL_RCC_OscConfig+0x470>)
 8002e24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e28:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e2a:	4b7a      	ldr	r3, [pc, #488]	@ (8003014 <HAL_RCC_OscConfig+0x470>)
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e32:	60bb      	str	r3, [r7, #8]
 8002e34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e36:	2301      	movs	r3, #1
 8002e38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e3a:	4b77      	ldr	r3, [pc, #476]	@ (8003018 <HAL_RCC_OscConfig+0x474>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d118      	bne.n	8002e78 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e46:	4b74      	ldr	r3, [pc, #464]	@ (8003018 <HAL_RCC_OscConfig+0x474>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a73      	ldr	r2, [pc, #460]	@ (8003018 <HAL_RCC_OscConfig+0x474>)
 8002e4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e52:	f7ff f837 	bl	8001ec4 <HAL_GetTick>
 8002e56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e58:	e008      	b.n	8002e6c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e5a:	f7ff f833 	bl	8001ec4 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d901      	bls.n	8002e6c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e10c      	b.n	8003086 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e6c:	4b6a      	ldr	r3, [pc, #424]	@ (8003018 <HAL_RCC_OscConfig+0x474>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d0f0      	beq.n	8002e5a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d106      	bne.n	8002e8e <HAL_RCC_OscConfig+0x2ea>
 8002e80:	4b64      	ldr	r3, [pc, #400]	@ (8003014 <HAL_RCC_OscConfig+0x470>)
 8002e82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e84:	4a63      	ldr	r2, [pc, #396]	@ (8003014 <HAL_RCC_OscConfig+0x470>)
 8002e86:	f043 0301 	orr.w	r3, r3, #1
 8002e8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e8c:	e01c      	b.n	8002ec8 <HAL_RCC_OscConfig+0x324>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	2b05      	cmp	r3, #5
 8002e94:	d10c      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x30c>
 8002e96:	4b5f      	ldr	r3, [pc, #380]	@ (8003014 <HAL_RCC_OscConfig+0x470>)
 8002e98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e9a:	4a5e      	ldr	r2, [pc, #376]	@ (8003014 <HAL_RCC_OscConfig+0x470>)
 8002e9c:	f043 0304 	orr.w	r3, r3, #4
 8002ea0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ea2:	4b5c      	ldr	r3, [pc, #368]	@ (8003014 <HAL_RCC_OscConfig+0x470>)
 8002ea4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ea6:	4a5b      	ldr	r2, [pc, #364]	@ (8003014 <HAL_RCC_OscConfig+0x470>)
 8002ea8:	f043 0301 	orr.w	r3, r3, #1
 8002eac:	6713      	str	r3, [r2, #112]	@ 0x70
 8002eae:	e00b      	b.n	8002ec8 <HAL_RCC_OscConfig+0x324>
 8002eb0:	4b58      	ldr	r3, [pc, #352]	@ (8003014 <HAL_RCC_OscConfig+0x470>)
 8002eb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eb4:	4a57      	ldr	r2, [pc, #348]	@ (8003014 <HAL_RCC_OscConfig+0x470>)
 8002eb6:	f023 0301 	bic.w	r3, r3, #1
 8002eba:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ebc:	4b55      	ldr	r3, [pc, #340]	@ (8003014 <HAL_RCC_OscConfig+0x470>)
 8002ebe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ec0:	4a54      	ldr	r2, [pc, #336]	@ (8003014 <HAL_RCC_OscConfig+0x470>)
 8002ec2:	f023 0304 	bic.w	r3, r3, #4
 8002ec6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d015      	beq.n	8002efc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed0:	f7fe fff8 	bl	8001ec4 <HAL_GetTick>
 8002ed4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ed6:	e00a      	b.n	8002eee <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ed8:	f7fe fff4 	bl	8001ec4 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e0cb      	b.n	8003086 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eee:	4b49      	ldr	r3, [pc, #292]	@ (8003014 <HAL_RCC_OscConfig+0x470>)
 8002ef0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d0ee      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x334>
 8002efa:	e014      	b.n	8002f26 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002efc:	f7fe ffe2 	bl	8001ec4 <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f02:	e00a      	b.n	8002f1a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f04:	f7fe ffde 	bl	8001ec4 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e0b5      	b.n	8003086 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f1a:	4b3e      	ldr	r3, [pc, #248]	@ (8003014 <HAL_RCC_OscConfig+0x470>)
 8002f1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1ee      	bne.n	8002f04 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f26:	7dfb      	ldrb	r3, [r7, #23]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d105      	bne.n	8002f38 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f2c:	4b39      	ldr	r3, [pc, #228]	@ (8003014 <HAL_RCC_OscConfig+0x470>)
 8002f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f30:	4a38      	ldr	r2, [pc, #224]	@ (8003014 <HAL_RCC_OscConfig+0x470>)
 8002f32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f36:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	f000 80a1 	beq.w	8003084 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f42:	4b34      	ldr	r3, [pc, #208]	@ (8003014 <HAL_RCC_OscConfig+0x470>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f003 030c 	and.w	r3, r3, #12
 8002f4a:	2b08      	cmp	r3, #8
 8002f4c:	d05c      	beq.n	8003008 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d141      	bne.n	8002fda <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f56:	4b31      	ldr	r3, [pc, #196]	@ (800301c <HAL_RCC_OscConfig+0x478>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f5c:	f7fe ffb2 	bl	8001ec4 <HAL_GetTick>
 8002f60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f62:	e008      	b.n	8002f76 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f64:	f7fe ffae 	bl	8001ec4 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e087      	b.n	8003086 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f76:	4b27      	ldr	r3, [pc, #156]	@ (8003014 <HAL_RCC_OscConfig+0x470>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1f0      	bne.n	8002f64 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	69da      	ldr	r2, [r3, #28]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a1b      	ldr	r3, [r3, #32]
 8002f8a:	431a      	orrs	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f90:	019b      	lsls	r3, r3, #6
 8002f92:	431a      	orrs	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f98:	085b      	lsrs	r3, r3, #1
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	041b      	lsls	r3, r3, #16
 8002f9e:	431a      	orrs	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fa4:	061b      	lsls	r3, r3, #24
 8002fa6:	491b      	ldr	r1, [pc, #108]	@ (8003014 <HAL_RCC_OscConfig+0x470>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fac:	4b1b      	ldr	r3, [pc, #108]	@ (800301c <HAL_RCC_OscConfig+0x478>)
 8002fae:	2201      	movs	r2, #1
 8002fb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb2:	f7fe ff87 	bl	8001ec4 <HAL_GetTick>
 8002fb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fb8:	e008      	b.n	8002fcc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fba:	f7fe ff83 	bl	8001ec4 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d901      	bls.n	8002fcc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e05c      	b.n	8003086 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fcc:	4b11      	ldr	r3, [pc, #68]	@ (8003014 <HAL_RCC_OscConfig+0x470>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d0f0      	beq.n	8002fba <HAL_RCC_OscConfig+0x416>
 8002fd8:	e054      	b.n	8003084 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fda:	4b10      	ldr	r3, [pc, #64]	@ (800301c <HAL_RCC_OscConfig+0x478>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe0:	f7fe ff70 	bl	8001ec4 <HAL_GetTick>
 8002fe4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fe6:	e008      	b.n	8002ffa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fe8:	f7fe ff6c 	bl	8001ec4 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e045      	b.n	8003086 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ffa:	4b06      	ldr	r3, [pc, #24]	@ (8003014 <HAL_RCC_OscConfig+0x470>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1f0      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x444>
 8003006:	e03d      	b.n	8003084 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d107      	bne.n	8003020 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e038      	b.n	8003086 <HAL_RCC_OscConfig+0x4e2>
 8003014:	40023800 	.word	0x40023800
 8003018:	40007000 	.word	0x40007000
 800301c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003020:	4b1b      	ldr	r3, [pc, #108]	@ (8003090 <HAL_RCC_OscConfig+0x4ec>)
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d028      	beq.n	8003080 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003038:	429a      	cmp	r2, r3
 800303a:	d121      	bne.n	8003080 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003046:	429a      	cmp	r2, r3
 8003048:	d11a      	bne.n	8003080 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003050:	4013      	ands	r3, r2
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003056:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003058:	4293      	cmp	r3, r2
 800305a:	d111      	bne.n	8003080 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003066:	085b      	lsrs	r3, r3, #1
 8003068:	3b01      	subs	r3, #1
 800306a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800306c:	429a      	cmp	r2, r3
 800306e:	d107      	bne.n	8003080 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800307a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800307c:	429a      	cmp	r2, r3
 800307e:	d001      	beq.n	8003084 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e000      	b.n	8003086 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3718      	adds	r7, #24
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	40023800 	.word	0x40023800

08003094 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d101      	bne.n	80030a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e0cc      	b.n	8003242 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030a8:	4b68      	ldr	r3, [pc, #416]	@ (800324c <HAL_RCC_ClockConfig+0x1b8>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0307 	and.w	r3, r3, #7
 80030b0:	683a      	ldr	r2, [r7, #0]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d90c      	bls.n	80030d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030b6:	4b65      	ldr	r3, [pc, #404]	@ (800324c <HAL_RCC_ClockConfig+0x1b8>)
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	b2d2      	uxtb	r2, r2
 80030bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030be:	4b63      	ldr	r3, [pc, #396]	@ (800324c <HAL_RCC_ClockConfig+0x1b8>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0307 	and.w	r3, r3, #7
 80030c6:	683a      	ldr	r2, [r7, #0]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d001      	beq.n	80030d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e0b8      	b.n	8003242 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d020      	beq.n	800311e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0304 	and.w	r3, r3, #4
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d005      	beq.n	80030f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030e8:	4b59      	ldr	r3, [pc, #356]	@ (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	4a58      	ldr	r2, [pc, #352]	@ (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 80030ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80030f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0308 	and.w	r3, r3, #8
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d005      	beq.n	800310c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003100:	4b53      	ldr	r3, [pc, #332]	@ (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	4a52      	ldr	r2, [pc, #328]	@ (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 8003106:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800310a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800310c:	4b50      	ldr	r3, [pc, #320]	@ (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	494d      	ldr	r1, [pc, #308]	@ (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 800311a:	4313      	orrs	r3, r2
 800311c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b00      	cmp	r3, #0
 8003128:	d044      	beq.n	80031b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d107      	bne.n	8003142 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003132:	4b47      	ldr	r3, [pc, #284]	@ (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d119      	bne.n	8003172 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e07f      	b.n	8003242 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	2b02      	cmp	r3, #2
 8003148:	d003      	beq.n	8003152 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800314e:	2b03      	cmp	r3, #3
 8003150:	d107      	bne.n	8003162 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003152:	4b3f      	ldr	r3, [pc, #252]	@ (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d109      	bne.n	8003172 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e06f      	b.n	8003242 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003162:	4b3b      	ldr	r3, [pc, #236]	@ (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e067      	b.n	8003242 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003172:	4b37      	ldr	r3, [pc, #220]	@ (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f023 0203 	bic.w	r2, r3, #3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	4934      	ldr	r1, [pc, #208]	@ (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 8003180:	4313      	orrs	r3, r2
 8003182:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003184:	f7fe fe9e 	bl	8001ec4 <HAL_GetTick>
 8003188:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800318a:	e00a      	b.n	80031a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800318c:	f7fe fe9a 	bl	8001ec4 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	f241 3288 	movw	r2, #5000	@ 0x1388
 800319a:	4293      	cmp	r3, r2
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e04f      	b.n	8003242 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031a2:	4b2b      	ldr	r3, [pc, #172]	@ (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f003 020c 	and.w	r2, r3, #12
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d1eb      	bne.n	800318c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031b4:	4b25      	ldr	r3, [pc, #148]	@ (800324c <HAL_RCC_ClockConfig+0x1b8>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0307 	and.w	r3, r3, #7
 80031bc:	683a      	ldr	r2, [r7, #0]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d20c      	bcs.n	80031dc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031c2:	4b22      	ldr	r3, [pc, #136]	@ (800324c <HAL_RCC_ClockConfig+0x1b8>)
 80031c4:	683a      	ldr	r2, [r7, #0]
 80031c6:	b2d2      	uxtb	r2, r2
 80031c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ca:	4b20      	ldr	r3, [pc, #128]	@ (800324c <HAL_RCC_ClockConfig+0x1b8>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0307 	and.w	r3, r3, #7
 80031d2:	683a      	ldr	r2, [r7, #0]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d001      	beq.n	80031dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e032      	b.n	8003242 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0304 	and.w	r3, r3, #4
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d008      	beq.n	80031fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031e8:	4b19      	ldr	r3, [pc, #100]	@ (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	4916      	ldr	r1, [pc, #88]	@ (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0308 	and.w	r3, r3, #8
 8003202:	2b00      	cmp	r3, #0
 8003204:	d009      	beq.n	800321a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003206:	4b12      	ldr	r3, [pc, #72]	@ (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	490e      	ldr	r1, [pc, #56]	@ (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 8003216:	4313      	orrs	r3, r2
 8003218:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800321a:	f000 f821 	bl	8003260 <HAL_RCC_GetSysClockFreq>
 800321e:	4602      	mov	r2, r0
 8003220:	4b0b      	ldr	r3, [pc, #44]	@ (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	091b      	lsrs	r3, r3, #4
 8003226:	f003 030f 	and.w	r3, r3, #15
 800322a:	490a      	ldr	r1, [pc, #40]	@ (8003254 <HAL_RCC_ClockConfig+0x1c0>)
 800322c:	5ccb      	ldrb	r3, [r1, r3]
 800322e:	fa22 f303 	lsr.w	r3, r2, r3
 8003232:	4a09      	ldr	r2, [pc, #36]	@ (8003258 <HAL_RCC_ClockConfig+0x1c4>)
 8003234:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003236:	4b09      	ldr	r3, [pc, #36]	@ (800325c <HAL_RCC_ClockConfig+0x1c8>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4618      	mov	r0, r3
 800323c:	f7fe fdfe 	bl	8001e3c <HAL_InitTick>

  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3710      	adds	r7, #16
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	40023c00 	.word	0x40023c00
 8003250:	40023800 	.word	0x40023800
 8003254:	08006804 	.word	0x08006804
 8003258:	2000031c 	.word	0x2000031c
 800325c:	20000320 	.word	0x20000320

08003260 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003260:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003264:	b090      	sub	sp, #64	@ 0x40
 8003266:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003268:	2300      	movs	r3, #0
 800326a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800326c:	2300      	movs	r3, #0
 800326e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003270:	2300      	movs	r3, #0
 8003272:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003274:	2300      	movs	r3, #0
 8003276:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003278:	4b59      	ldr	r3, [pc, #356]	@ (80033e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f003 030c 	and.w	r3, r3, #12
 8003280:	2b08      	cmp	r3, #8
 8003282:	d00d      	beq.n	80032a0 <HAL_RCC_GetSysClockFreq+0x40>
 8003284:	2b08      	cmp	r3, #8
 8003286:	f200 80a1 	bhi.w	80033cc <HAL_RCC_GetSysClockFreq+0x16c>
 800328a:	2b00      	cmp	r3, #0
 800328c:	d002      	beq.n	8003294 <HAL_RCC_GetSysClockFreq+0x34>
 800328e:	2b04      	cmp	r3, #4
 8003290:	d003      	beq.n	800329a <HAL_RCC_GetSysClockFreq+0x3a>
 8003292:	e09b      	b.n	80033cc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003294:	4b53      	ldr	r3, [pc, #332]	@ (80033e4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003296:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003298:	e09b      	b.n	80033d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800329a:	4b53      	ldr	r3, [pc, #332]	@ (80033e8 <HAL_RCC_GetSysClockFreq+0x188>)
 800329c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800329e:	e098      	b.n	80033d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032a0:	4b4f      	ldr	r3, [pc, #316]	@ (80033e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032a8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032aa:	4b4d      	ldr	r3, [pc, #308]	@ (80033e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d028      	beq.n	8003308 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032b6:	4b4a      	ldr	r3, [pc, #296]	@ (80033e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	099b      	lsrs	r3, r3, #6
 80032bc:	2200      	movs	r2, #0
 80032be:	623b      	str	r3, [r7, #32]
 80032c0:	627a      	str	r2, [r7, #36]	@ 0x24
 80032c2:	6a3b      	ldr	r3, [r7, #32]
 80032c4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80032c8:	2100      	movs	r1, #0
 80032ca:	4b47      	ldr	r3, [pc, #284]	@ (80033e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80032cc:	fb03 f201 	mul.w	r2, r3, r1
 80032d0:	2300      	movs	r3, #0
 80032d2:	fb00 f303 	mul.w	r3, r0, r3
 80032d6:	4413      	add	r3, r2
 80032d8:	4a43      	ldr	r2, [pc, #268]	@ (80033e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80032da:	fba0 1202 	umull	r1, r2, r0, r2
 80032de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80032e0:	460a      	mov	r2, r1
 80032e2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80032e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80032e6:	4413      	add	r3, r2
 80032e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032ec:	2200      	movs	r2, #0
 80032ee:	61bb      	str	r3, [r7, #24]
 80032f0:	61fa      	str	r2, [r7, #28]
 80032f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80032fa:	f7fc ffc1 	bl	8000280 <__aeabi_uldivmod>
 80032fe:	4602      	mov	r2, r0
 8003300:	460b      	mov	r3, r1
 8003302:	4613      	mov	r3, r2
 8003304:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003306:	e053      	b.n	80033b0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003308:	4b35      	ldr	r3, [pc, #212]	@ (80033e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	099b      	lsrs	r3, r3, #6
 800330e:	2200      	movs	r2, #0
 8003310:	613b      	str	r3, [r7, #16]
 8003312:	617a      	str	r2, [r7, #20]
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800331a:	f04f 0b00 	mov.w	fp, #0
 800331e:	4652      	mov	r2, sl
 8003320:	465b      	mov	r3, fp
 8003322:	f04f 0000 	mov.w	r0, #0
 8003326:	f04f 0100 	mov.w	r1, #0
 800332a:	0159      	lsls	r1, r3, #5
 800332c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003330:	0150      	lsls	r0, r2, #5
 8003332:	4602      	mov	r2, r0
 8003334:	460b      	mov	r3, r1
 8003336:	ebb2 080a 	subs.w	r8, r2, sl
 800333a:	eb63 090b 	sbc.w	r9, r3, fp
 800333e:	f04f 0200 	mov.w	r2, #0
 8003342:	f04f 0300 	mov.w	r3, #0
 8003346:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800334a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800334e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003352:	ebb2 0408 	subs.w	r4, r2, r8
 8003356:	eb63 0509 	sbc.w	r5, r3, r9
 800335a:	f04f 0200 	mov.w	r2, #0
 800335e:	f04f 0300 	mov.w	r3, #0
 8003362:	00eb      	lsls	r3, r5, #3
 8003364:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003368:	00e2      	lsls	r2, r4, #3
 800336a:	4614      	mov	r4, r2
 800336c:	461d      	mov	r5, r3
 800336e:	eb14 030a 	adds.w	r3, r4, sl
 8003372:	603b      	str	r3, [r7, #0]
 8003374:	eb45 030b 	adc.w	r3, r5, fp
 8003378:	607b      	str	r3, [r7, #4]
 800337a:	f04f 0200 	mov.w	r2, #0
 800337e:	f04f 0300 	mov.w	r3, #0
 8003382:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003386:	4629      	mov	r1, r5
 8003388:	028b      	lsls	r3, r1, #10
 800338a:	4621      	mov	r1, r4
 800338c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003390:	4621      	mov	r1, r4
 8003392:	028a      	lsls	r2, r1, #10
 8003394:	4610      	mov	r0, r2
 8003396:	4619      	mov	r1, r3
 8003398:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800339a:	2200      	movs	r2, #0
 800339c:	60bb      	str	r3, [r7, #8]
 800339e:	60fa      	str	r2, [r7, #12]
 80033a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033a4:	f7fc ff6c 	bl	8000280 <__aeabi_uldivmod>
 80033a8:	4602      	mov	r2, r0
 80033aa:	460b      	mov	r3, r1
 80033ac:	4613      	mov	r3, r2
 80033ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80033b0:	4b0b      	ldr	r3, [pc, #44]	@ (80033e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	0c1b      	lsrs	r3, r3, #16
 80033b6:	f003 0303 	and.w	r3, r3, #3
 80033ba:	3301      	adds	r3, #1
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80033c0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80033c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033c8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80033ca:	e002      	b.n	80033d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033cc:	4b05      	ldr	r3, [pc, #20]	@ (80033e4 <HAL_RCC_GetSysClockFreq+0x184>)
 80033ce:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80033d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3740      	adds	r7, #64	@ 0x40
 80033d8:	46bd      	mov	sp, r7
 80033da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033de:	bf00      	nop
 80033e0:	40023800 	.word	0x40023800
 80033e4:	00f42400 	.word	0x00f42400
 80033e8:	017d7840 	.word	0x017d7840

080033ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033ec:	b480      	push	{r7}
 80033ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033f0:	4b03      	ldr	r3, [pc, #12]	@ (8003400 <HAL_RCC_GetHCLKFreq+0x14>)
 80033f2:	681b      	ldr	r3, [r3, #0]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	2000031c 	.word	0x2000031c

08003404 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003408:	f7ff fff0 	bl	80033ec <HAL_RCC_GetHCLKFreq>
 800340c:	4602      	mov	r2, r0
 800340e:	4b05      	ldr	r3, [pc, #20]	@ (8003424 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	0a9b      	lsrs	r3, r3, #10
 8003414:	f003 0307 	and.w	r3, r3, #7
 8003418:	4903      	ldr	r1, [pc, #12]	@ (8003428 <HAL_RCC_GetPCLK1Freq+0x24>)
 800341a:	5ccb      	ldrb	r3, [r1, r3]
 800341c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003420:	4618      	mov	r0, r3
 8003422:	bd80      	pop	{r7, pc}
 8003424:	40023800 	.word	0x40023800
 8003428:	08006814 	.word	0x08006814

0800342c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003430:	f7ff ffdc 	bl	80033ec <HAL_RCC_GetHCLKFreq>
 8003434:	4602      	mov	r2, r0
 8003436:	4b05      	ldr	r3, [pc, #20]	@ (800344c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	0b5b      	lsrs	r3, r3, #13
 800343c:	f003 0307 	and.w	r3, r3, #7
 8003440:	4903      	ldr	r1, [pc, #12]	@ (8003450 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003442:	5ccb      	ldrb	r3, [r1, r3]
 8003444:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003448:	4618      	mov	r0, r3
 800344a:	bd80      	pop	{r7, pc}
 800344c:	40023800 	.word	0x40023800
 8003450:	08006814 	.word	0x08006814

08003454 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d101      	bne.n	8003466 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e07b      	b.n	800355e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800346a:	2b00      	cmp	r3, #0
 800346c:	d108      	bne.n	8003480 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003476:	d009      	beq.n	800348c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	61da      	str	r2, [r3, #28]
 800347e:	e005      	b.n	800348c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d106      	bne.n	80034ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f7fe faee 	bl	8001a88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2202      	movs	r2, #2
 80034b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80034d4:	431a      	orrs	r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034de:	431a      	orrs	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	f003 0302 	and.w	r3, r3, #2
 80034e8:	431a      	orrs	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	431a      	orrs	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	699b      	ldr	r3, [r3, #24]
 80034f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034fc:	431a      	orrs	r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	69db      	ldr	r3, [r3, #28]
 8003502:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003506:	431a      	orrs	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a1b      	ldr	r3, [r3, #32]
 800350c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003510:	ea42 0103 	orr.w	r1, r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003518:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	430a      	orrs	r2, r1
 8003522:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	699b      	ldr	r3, [r3, #24]
 8003528:	0c1b      	lsrs	r3, r3, #16
 800352a:	f003 0104 	and.w	r1, r3, #4
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003532:	f003 0210 	and.w	r2, r3, #16
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	430a      	orrs	r2, r1
 800353c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	69da      	ldr	r2, [r3, #28]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800354c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3708      	adds	r7, #8
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003566:	b580      	push	{r7, lr}
 8003568:	b08a      	sub	sp, #40	@ 0x28
 800356a:	af00      	add	r7, sp, #0
 800356c:	60f8      	str	r0, [r7, #12]
 800356e:	60b9      	str	r1, [r7, #8]
 8003570:	607a      	str	r2, [r7, #4]
 8003572:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003574:	2301      	movs	r3, #1
 8003576:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003578:	f7fe fca4 	bl	8001ec4 <HAL_GetTick>
 800357c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003584:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800358c:	887b      	ldrh	r3, [r7, #2]
 800358e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003590:	7ffb      	ldrb	r3, [r7, #31]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d00c      	beq.n	80035b0 <HAL_SPI_TransmitReceive+0x4a>
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800359c:	d106      	bne.n	80035ac <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d102      	bne.n	80035ac <HAL_SPI_TransmitReceive+0x46>
 80035a6:	7ffb      	ldrb	r3, [r7, #31]
 80035a8:	2b04      	cmp	r3, #4
 80035aa:	d001      	beq.n	80035b0 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80035ac:	2302      	movs	r3, #2
 80035ae:	e17f      	b.n	80038b0 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d005      	beq.n	80035c2 <HAL_SPI_TransmitReceive+0x5c>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d002      	beq.n	80035c2 <HAL_SPI_TransmitReceive+0x5c>
 80035bc:	887b      	ldrh	r3, [r7, #2]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d101      	bne.n	80035c6 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e174      	b.n	80038b0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d101      	bne.n	80035d4 <HAL_SPI_TransmitReceive+0x6e>
 80035d0:	2302      	movs	r3, #2
 80035d2:	e16d      	b.n	80038b0 <HAL_SPI_TransmitReceive+0x34a>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	2b04      	cmp	r3, #4
 80035e6:	d003      	beq.n	80035f0 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2205      	movs	r2, #5
 80035ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	887a      	ldrh	r2, [r7, #2]
 8003600:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	887a      	ldrh	r2, [r7, #2]
 8003606:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	68ba      	ldr	r2, [r7, #8]
 800360c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	887a      	ldrh	r2, [r7, #2]
 8003612:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	887a      	ldrh	r2, [r7, #2]
 8003618:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2200      	movs	r2, #0
 800361e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003630:	2b40      	cmp	r3, #64	@ 0x40
 8003632:	d007      	beq.n	8003644 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003642:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800364c:	d17e      	bne.n	800374c <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d002      	beq.n	800365c <HAL_SPI_TransmitReceive+0xf6>
 8003656:	8afb      	ldrh	r3, [r7, #22]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d16c      	bne.n	8003736 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003660:	881a      	ldrh	r2, [r3, #0]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800366c:	1c9a      	adds	r2, r3, #2
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003676:	b29b      	uxth	r3, r3
 8003678:	3b01      	subs	r3, #1
 800367a:	b29a      	uxth	r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003680:	e059      	b.n	8003736 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b02      	cmp	r3, #2
 800368e:	d11b      	bne.n	80036c8 <HAL_SPI_TransmitReceive+0x162>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003694:	b29b      	uxth	r3, r3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d016      	beq.n	80036c8 <HAL_SPI_TransmitReceive+0x162>
 800369a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800369c:	2b01      	cmp	r3, #1
 800369e:	d113      	bne.n	80036c8 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036a4:	881a      	ldrh	r2, [r3, #0]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036b0:	1c9a      	adds	r2, r3, #2
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	3b01      	subs	r3, #1
 80036be:	b29a      	uxth	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80036c4:	2300      	movs	r3, #0
 80036c6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d119      	bne.n	800370a <HAL_SPI_TransmitReceive+0x1a4>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036da:	b29b      	uxth	r3, r3
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d014      	beq.n	800370a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68da      	ldr	r2, [r3, #12]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036ea:	b292      	uxth	r2, r2
 80036ec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036f2:	1c9a      	adds	r2, r3, #2
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	3b01      	subs	r3, #1
 8003700:	b29a      	uxth	r2, r3
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003706:	2301      	movs	r3, #1
 8003708:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800370a:	f7fe fbdb 	bl	8001ec4 <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	6a3b      	ldr	r3, [r7, #32]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003716:	429a      	cmp	r2, r3
 8003718:	d80d      	bhi.n	8003736 <HAL_SPI_TransmitReceive+0x1d0>
 800371a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800371c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003720:	d009      	beq.n	8003736 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2201      	movs	r2, #1
 8003726:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e0bc      	b.n	80038b0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800373a:	b29b      	uxth	r3, r3
 800373c:	2b00      	cmp	r3, #0
 800373e:	d1a0      	bne.n	8003682 <HAL_SPI_TransmitReceive+0x11c>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003744:	b29b      	uxth	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d19b      	bne.n	8003682 <HAL_SPI_TransmitReceive+0x11c>
 800374a:	e082      	b.n	8003852 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d002      	beq.n	800375a <HAL_SPI_TransmitReceive+0x1f4>
 8003754:	8afb      	ldrh	r3, [r7, #22]
 8003756:	2b01      	cmp	r3, #1
 8003758:	d171      	bne.n	800383e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	330c      	adds	r3, #12
 8003764:	7812      	ldrb	r2, [r2, #0]
 8003766:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800376c:	1c5a      	adds	r2, r3, #1
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003776:	b29b      	uxth	r3, r3
 8003778:	3b01      	subs	r3, #1
 800377a:	b29a      	uxth	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003780:	e05d      	b.n	800383e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f003 0302 	and.w	r3, r3, #2
 800378c:	2b02      	cmp	r3, #2
 800378e:	d11c      	bne.n	80037ca <HAL_SPI_TransmitReceive+0x264>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003794:	b29b      	uxth	r3, r3
 8003796:	2b00      	cmp	r3, #0
 8003798:	d017      	beq.n	80037ca <HAL_SPI_TransmitReceive+0x264>
 800379a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800379c:	2b01      	cmp	r3, #1
 800379e:	d114      	bne.n	80037ca <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	330c      	adds	r3, #12
 80037aa:	7812      	ldrb	r2, [r2, #0]
 80037ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037b2:	1c5a      	adds	r2, r3, #1
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80037bc:	b29b      	uxth	r3, r3
 80037be:	3b01      	subs	r3, #1
 80037c0:	b29a      	uxth	r2, r3
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80037c6:	2300      	movs	r3, #0
 80037c8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f003 0301 	and.w	r3, r3, #1
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d119      	bne.n	800380c <HAL_SPI_TransmitReceive+0x2a6>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037dc:	b29b      	uxth	r3, r3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d014      	beq.n	800380c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68da      	ldr	r2, [r3, #12]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037ec:	b2d2      	uxtb	r2, r2
 80037ee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037f4:	1c5a      	adds	r2, r3, #1
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037fe:	b29b      	uxth	r3, r3
 8003800:	3b01      	subs	r3, #1
 8003802:	b29a      	uxth	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003808:	2301      	movs	r3, #1
 800380a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800380c:	f7fe fb5a 	bl	8001ec4 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	6a3b      	ldr	r3, [r7, #32]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003818:	429a      	cmp	r2, r3
 800381a:	d803      	bhi.n	8003824 <HAL_SPI_TransmitReceive+0x2be>
 800381c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800381e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003822:	d102      	bne.n	800382a <HAL_SPI_TransmitReceive+0x2c4>
 8003824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003826:	2b00      	cmp	r3, #0
 8003828:	d109      	bne.n	800383e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2201      	movs	r2, #1
 800382e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e038      	b.n	80038b0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003842:	b29b      	uxth	r3, r3
 8003844:	2b00      	cmp	r3, #0
 8003846:	d19c      	bne.n	8003782 <HAL_SPI_TransmitReceive+0x21c>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800384c:	b29b      	uxth	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d197      	bne.n	8003782 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003852:	6a3a      	ldr	r2, [r7, #32]
 8003854:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003856:	68f8      	ldr	r0, [r7, #12]
 8003858:	f000 f8b6 	bl	80039c8 <SPI_EndRxTxTransaction>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d008      	beq.n	8003874 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2220      	movs	r2, #32
 8003866:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e01d      	b.n	80038b0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d10a      	bne.n	8003892 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800387c:	2300      	movs	r3, #0
 800387e:	613b      	str	r3, [r7, #16]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	613b      	str	r3, [r7, #16]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	613b      	str	r3, [r7, #16]
 8003890:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2201      	movs	r2, #1
 8003896:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d001      	beq.n	80038ae <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e000      	b.n	80038b0 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80038ae:	2300      	movs	r3, #0
  }
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3728      	adds	r7, #40	@ 0x28
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b088      	sub	sp, #32
 80038bc:	af00      	add	r7, sp, #0
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	60b9      	str	r1, [r7, #8]
 80038c2:	603b      	str	r3, [r7, #0]
 80038c4:	4613      	mov	r3, r2
 80038c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80038c8:	f7fe fafc 	bl	8001ec4 <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038d0:	1a9b      	subs	r3, r3, r2
 80038d2:	683a      	ldr	r2, [r7, #0]
 80038d4:	4413      	add	r3, r2
 80038d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80038d8:	f7fe faf4 	bl	8001ec4 <HAL_GetTick>
 80038dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80038de:	4b39      	ldr	r3, [pc, #228]	@ (80039c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	015b      	lsls	r3, r3, #5
 80038e4:	0d1b      	lsrs	r3, r3, #20
 80038e6:	69fa      	ldr	r2, [r7, #28]
 80038e8:	fb02 f303 	mul.w	r3, r2, r3
 80038ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038ee:	e055      	b.n	800399c <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f6:	d051      	beq.n	800399c <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80038f8:	f7fe fae4 	bl	8001ec4 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	69fa      	ldr	r2, [r7, #28]
 8003904:	429a      	cmp	r2, r3
 8003906:	d902      	bls.n	800390e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d13d      	bne.n	800398a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	685a      	ldr	r2, [r3, #4]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800391c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003926:	d111      	bne.n	800394c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003930:	d004      	beq.n	800393c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800393a:	d107      	bne.n	800394c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800394a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003950:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003954:	d10f      	bne.n	8003976 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003964:	601a      	str	r2, [r3, #0]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003974:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2201      	movs	r2, #1
 800397a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e018      	b.n	80039bc <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d102      	bne.n	8003996 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8003990:	2300      	movs	r3, #0
 8003992:	61fb      	str	r3, [r7, #28]
 8003994:	e002      	b.n	800399c <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	3b01      	subs	r3, #1
 800399a:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	689a      	ldr	r2, [r3, #8]
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	4013      	ands	r3, r2
 80039a6:	68ba      	ldr	r2, [r7, #8]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	bf0c      	ite	eq
 80039ac:	2301      	moveq	r3, #1
 80039ae:	2300      	movne	r3, #0
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	461a      	mov	r2, r3
 80039b4:	79fb      	ldrb	r3, [r7, #7]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d19a      	bne.n	80038f0 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80039ba:	2300      	movs	r3, #0
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3720      	adds	r7, #32
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	2000031c 	.word	0x2000031c

080039c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b088      	sub	sp, #32
 80039cc:	af02      	add	r7, sp, #8
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	9300      	str	r3, [sp, #0]
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	2201      	movs	r2, #1
 80039dc:	2102      	movs	r1, #2
 80039de:	68f8      	ldr	r0, [r7, #12]
 80039e0:	f7ff ff6a 	bl	80038b8 <SPI_WaitFlagStateUntilTimeout>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d007      	beq.n	80039fa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039ee:	f043 0220 	orr.w	r2, r3, #32
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e032      	b.n	8003a60 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80039fa:	4b1b      	ldr	r3, [pc, #108]	@ (8003a68 <SPI_EndRxTxTransaction+0xa0>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a1b      	ldr	r2, [pc, #108]	@ (8003a6c <SPI_EndRxTxTransaction+0xa4>)
 8003a00:	fba2 2303 	umull	r2, r3, r2, r3
 8003a04:	0d5b      	lsrs	r3, r3, #21
 8003a06:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003a0a:	fb02 f303 	mul.w	r3, r2, r3
 8003a0e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a18:	d112      	bne.n	8003a40 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	9300      	str	r3, [sp, #0]
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	2200      	movs	r2, #0
 8003a22:	2180      	movs	r1, #128	@ 0x80
 8003a24:	68f8      	ldr	r0, [r7, #12]
 8003a26:	f7ff ff47 	bl	80038b8 <SPI_WaitFlagStateUntilTimeout>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d016      	beq.n	8003a5e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a34:	f043 0220 	orr.w	r2, r3, #32
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e00f      	b.n	8003a60 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d00a      	beq.n	8003a5c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a56:	2b80      	cmp	r3, #128	@ 0x80
 8003a58:	d0f2      	beq.n	8003a40 <SPI_EndRxTxTransaction+0x78>
 8003a5a:	e000      	b.n	8003a5e <SPI_EndRxTxTransaction+0x96>
        break;
 8003a5c:	bf00      	nop
  }

  return HAL_OK;
 8003a5e:	2300      	movs	r3, #0
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3718      	adds	r7, #24
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	2000031c 	.word	0x2000031c
 8003a6c:	165e9f81 	.word	0x165e9f81

08003a70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e041      	b.n	8003b06 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d106      	bne.n	8003a9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f7fe f83e 	bl	8001b18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2202      	movs	r2, #2
 8003aa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	3304      	adds	r3, #4
 8003aac:	4619      	mov	r1, r3
 8003aae:	4610      	mov	r0, r2
 8003ab0:	f000 f950 	bl	8003d54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3708      	adds	r7, #8
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
	...

08003b10 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b085      	sub	sp, #20
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d001      	beq.n	8003b28 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e03c      	b.n	8003ba2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2202      	movs	r2, #2
 8003b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a1e      	ldr	r2, [pc, #120]	@ (8003bb0 <HAL_TIM_Base_Start+0xa0>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d018      	beq.n	8003b6c <HAL_TIM_Base_Start+0x5c>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b42:	d013      	beq.n	8003b6c <HAL_TIM_Base_Start+0x5c>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a1a      	ldr	r2, [pc, #104]	@ (8003bb4 <HAL_TIM_Base_Start+0xa4>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d00e      	beq.n	8003b6c <HAL_TIM_Base_Start+0x5c>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a19      	ldr	r2, [pc, #100]	@ (8003bb8 <HAL_TIM_Base_Start+0xa8>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d009      	beq.n	8003b6c <HAL_TIM_Base_Start+0x5c>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a17      	ldr	r2, [pc, #92]	@ (8003bbc <HAL_TIM_Base_Start+0xac>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d004      	beq.n	8003b6c <HAL_TIM_Base_Start+0x5c>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a16      	ldr	r2, [pc, #88]	@ (8003bc0 <HAL_TIM_Base_Start+0xb0>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d111      	bne.n	8003b90 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f003 0307 	and.w	r3, r3, #7
 8003b76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2b06      	cmp	r3, #6
 8003b7c:	d010      	beq.n	8003ba0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f042 0201 	orr.w	r2, r2, #1
 8003b8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b8e:	e007      	b.n	8003ba0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f042 0201 	orr.w	r2, r2, #1
 8003b9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3714      	adds	r7, #20
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	40010000 	.word	0x40010000
 8003bb4:	40000400 	.word	0x40000400
 8003bb8:	40000800 	.word	0x40000800
 8003bbc:	40000c00 	.word	0x40000c00
 8003bc0:	40014000 	.word	0x40014000

08003bc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d101      	bne.n	8003be0 <HAL_TIM_ConfigClockSource+0x1c>
 8003bdc:	2302      	movs	r3, #2
 8003bde:	e0b4      	b.n	8003d4a <HAL_TIM_ConfigClockSource+0x186>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2202      	movs	r2, #2
 8003bec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003bfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68ba      	ldr	r2, [r7, #8]
 8003c0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c18:	d03e      	beq.n	8003c98 <HAL_TIM_ConfigClockSource+0xd4>
 8003c1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c1e:	f200 8087 	bhi.w	8003d30 <HAL_TIM_ConfigClockSource+0x16c>
 8003c22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c26:	f000 8086 	beq.w	8003d36 <HAL_TIM_ConfigClockSource+0x172>
 8003c2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c2e:	d87f      	bhi.n	8003d30 <HAL_TIM_ConfigClockSource+0x16c>
 8003c30:	2b70      	cmp	r3, #112	@ 0x70
 8003c32:	d01a      	beq.n	8003c6a <HAL_TIM_ConfigClockSource+0xa6>
 8003c34:	2b70      	cmp	r3, #112	@ 0x70
 8003c36:	d87b      	bhi.n	8003d30 <HAL_TIM_ConfigClockSource+0x16c>
 8003c38:	2b60      	cmp	r3, #96	@ 0x60
 8003c3a:	d050      	beq.n	8003cde <HAL_TIM_ConfigClockSource+0x11a>
 8003c3c:	2b60      	cmp	r3, #96	@ 0x60
 8003c3e:	d877      	bhi.n	8003d30 <HAL_TIM_ConfigClockSource+0x16c>
 8003c40:	2b50      	cmp	r3, #80	@ 0x50
 8003c42:	d03c      	beq.n	8003cbe <HAL_TIM_ConfigClockSource+0xfa>
 8003c44:	2b50      	cmp	r3, #80	@ 0x50
 8003c46:	d873      	bhi.n	8003d30 <HAL_TIM_ConfigClockSource+0x16c>
 8003c48:	2b40      	cmp	r3, #64	@ 0x40
 8003c4a:	d058      	beq.n	8003cfe <HAL_TIM_ConfigClockSource+0x13a>
 8003c4c:	2b40      	cmp	r3, #64	@ 0x40
 8003c4e:	d86f      	bhi.n	8003d30 <HAL_TIM_ConfigClockSource+0x16c>
 8003c50:	2b30      	cmp	r3, #48	@ 0x30
 8003c52:	d064      	beq.n	8003d1e <HAL_TIM_ConfigClockSource+0x15a>
 8003c54:	2b30      	cmp	r3, #48	@ 0x30
 8003c56:	d86b      	bhi.n	8003d30 <HAL_TIM_ConfigClockSource+0x16c>
 8003c58:	2b20      	cmp	r3, #32
 8003c5a:	d060      	beq.n	8003d1e <HAL_TIM_ConfigClockSource+0x15a>
 8003c5c:	2b20      	cmp	r3, #32
 8003c5e:	d867      	bhi.n	8003d30 <HAL_TIM_ConfigClockSource+0x16c>
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d05c      	beq.n	8003d1e <HAL_TIM_ConfigClockSource+0x15a>
 8003c64:	2b10      	cmp	r3, #16
 8003c66:	d05a      	beq.n	8003d1e <HAL_TIM_ConfigClockSource+0x15a>
 8003c68:	e062      	b.n	8003d30 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c7a:	f000 f96b 	bl	8003f54 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003c8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68ba      	ldr	r2, [r7, #8]
 8003c94:	609a      	str	r2, [r3, #8]
      break;
 8003c96:	e04f      	b.n	8003d38 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ca8:	f000 f954 	bl	8003f54 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	689a      	ldr	r2, [r3, #8]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003cba:	609a      	str	r2, [r3, #8]
      break;
 8003cbc:	e03c      	b.n	8003d38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cca:	461a      	mov	r2, r3
 8003ccc:	f000 f8c8 	bl	8003e60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2150      	movs	r1, #80	@ 0x50
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f000 f921 	bl	8003f1e <TIM_ITRx_SetConfig>
      break;
 8003cdc:	e02c      	b.n	8003d38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cea:	461a      	mov	r2, r3
 8003cec:	f000 f8e7 	bl	8003ebe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2160      	movs	r1, #96	@ 0x60
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f000 f911 	bl	8003f1e <TIM_ITRx_SetConfig>
      break;
 8003cfc:	e01c      	b.n	8003d38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	f000 f8a8 	bl	8003e60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2140      	movs	r1, #64	@ 0x40
 8003d16:	4618      	mov	r0, r3
 8003d18:	f000 f901 	bl	8003f1e <TIM_ITRx_SetConfig>
      break;
 8003d1c:	e00c      	b.n	8003d38 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4619      	mov	r1, r3
 8003d28:	4610      	mov	r0, r2
 8003d2a:	f000 f8f8 	bl	8003f1e <TIM_ITRx_SetConfig>
      break;
 8003d2e:	e003      	b.n	8003d38 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	73fb      	strb	r3, [r7, #15]
      break;
 8003d34:	e000      	b.n	8003d38 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003d36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3710      	adds	r7, #16
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
	...

08003d54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b085      	sub	sp, #20
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4a37      	ldr	r2, [pc, #220]	@ (8003e44 <TIM_Base_SetConfig+0xf0>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d00f      	beq.n	8003d8c <TIM_Base_SetConfig+0x38>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d72:	d00b      	beq.n	8003d8c <TIM_Base_SetConfig+0x38>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a34      	ldr	r2, [pc, #208]	@ (8003e48 <TIM_Base_SetConfig+0xf4>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d007      	beq.n	8003d8c <TIM_Base_SetConfig+0x38>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a33      	ldr	r2, [pc, #204]	@ (8003e4c <TIM_Base_SetConfig+0xf8>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d003      	beq.n	8003d8c <TIM_Base_SetConfig+0x38>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a32      	ldr	r2, [pc, #200]	@ (8003e50 <TIM_Base_SetConfig+0xfc>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d108      	bne.n	8003d9e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a28      	ldr	r2, [pc, #160]	@ (8003e44 <TIM_Base_SetConfig+0xf0>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d01b      	beq.n	8003dde <TIM_Base_SetConfig+0x8a>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dac:	d017      	beq.n	8003dde <TIM_Base_SetConfig+0x8a>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a25      	ldr	r2, [pc, #148]	@ (8003e48 <TIM_Base_SetConfig+0xf4>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d013      	beq.n	8003dde <TIM_Base_SetConfig+0x8a>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a24      	ldr	r2, [pc, #144]	@ (8003e4c <TIM_Base_SetConfig+0xf8>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d00f      	beq.n	8003dde <TIM_Base_SetConfig+0x8a>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a23      	ldr	r2, [pc, #140]	@ (8003e50 <TIM_Base_SetConfig+0xfc>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d00b      	beq.n	8003dde <TIM_Base_SetConfig+0x8a>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a22      	ldr	r2, [pc, #136]	@ (8003e54 <TIM_Base_SetConfig+0x100>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d007      	beq.n	8003dde <TIM_Base_SetConfig+0x8a>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a21      	ldr	r2, [pc, #132]	@ (8003e58 <TIM_Base_SetConfig+0x104>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d003      	beq.n	8003dde <TIM_Base_SetConfig+0x8a>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a20      	ldr	r2, [pc, #128]	@ (8003e5c <TIM_Base_SetConfig+0x108>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d108      	bne.n	8003df0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003de4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	695b      	ldr	r3, [r3, #20]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	689a      	ldr	r2, [r3, #8]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a0c      	ldr	r2, [pc, #48]	@ (8003e44 <TIM_Base_SetConfig+0xf0>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d103      	bne.n	8003e1e <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	691a      	ldr	r2, [r3, #16]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f043 0204 	orr.w	r2, r3, #4
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	601a      	str	r2, [r3, #0]
}
 8003e36:	bf00      	nop
 8003e38:	3714      	adds	r7, #20
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop
 8003e44:	40010000 	.word	0x40010000
 8003e48:	40000400 	.word	0x40000400
 8003e4c:	40000800 	.word	0x40000800
 8003e50:	40000c00 	.word	0x40000c00
 8003e54:	40014000 	.word	0x40014000
 8003e58:	40014400 	.word	0x40014400
 8003e5c:	40014800 	.word	0x40014800

08003e60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b087      	sub	sp, #28
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6a1b      	ldr	r3, [r3, #32]
 8003e70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6a1b      	ldr	r3, [r3, #32]
 8003e76:	f023 0201 	bic.w	r2, r3, #1
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	699b      	ldr	r3, [r3, #24]
 8003e82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	011b      	lsls	r3, r3, #4
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	f023 030a 	bic.w	r3, r3, #10
 8003e9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	693a      	ldr	r2, [r7, #16]
 8003eaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	697a      	ldr	r2, [r7, #20]
 8003eb0:	621a      	str	r2, [r3, #32]
}
 8003eb2:	bf00      	nop
 8003eb4:	371c      	adds	r7, #28
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr

08003ebe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ebe:	b480      	push	{r7}
 8003ec0:	b087      	sub	sp, #28
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	60f8      	str	r0, [r7, #12]
 8003ec6:	60b9      	str	r1, [r7, #8]
 8003ec8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6a1b      	ldr	r3, [r3, #32]
 8003ece:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6a1b      	ldr	r3, [r3, #32]
 8003ed4:	f023 0210 	bic.w	r2, r3, #16
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003ee8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	031b      	lsls	r3, r3, #12
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003efa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	011b      	lsls	r3, r3, #4
 8003f00:	697a      	ldr	r2, [r7, #20]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	693a      	ldr	r2, [r7, #16]
 8003f0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	697a      	ldr	r2, [r7, #20]
 8003f10:	621a      	str	r2, [r3, #32]
}
 8003f12:	bf00      	nop
 8003f14:	371c      	adds	r7, #28
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr

08003f1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f1e:	b480      	push	{r7}
 8003f20:	b085      	sub	sp, #20
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
 8003f26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f36:	683a      	ldr	r2, [r7, #0]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	f043 0307 	orr.w	r3, r3, #7
 8003f40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	609a      	str	r2, [r3, #8]
}
 8003f48:	bf00      	nop
 8003f4a:	3714      	adds	r7, #20
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b087      	sub	sp, #28
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	607a      	str	r2, [r7, #4]
 8003f60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	021a      	lsls	r2, r3, #8
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	431a      	orrs	r2, r3
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	697a      	ldr	r2, [r7, #20]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	697a      	ldr	r2, [r7, #20]
 8003f86:	609a      	str	r2, [r3, #8]
}
 8003f88:	bf00      	nop
 8003f8a:	371c      	adds	r7, #28
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b085      	sub	sp, #20
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d101      	bne.n	8003fac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fa8:	2302      	movs	r3, #2
 8003faa:	e050      	b.n	800404e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2202      	movs	r2, #2
 8003fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a1c      	ldr	r2, [pc, #112]	@ (800405c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d018      	beq.n	8004022 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ff8:	d013      	beq.n	8004022 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a18      	ldr	r2, [pc, #96]	@ (8004060 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d00e      	beq.n	8004022 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a16      	ldr	r2, [pc, #88]	@ (8004064 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d009      	beq.n	8004022 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a15      	ldr	r2, [pc, #84]	@ (8004068 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d004      	beq.n	8004022 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a13      	ldr	r2, [pc, #76]	@ (800406c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d10c      	bne.n	800403c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004028:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	68ba      	ldr	r2, [r7, #8]
 8004030:	4313      	orrs	r3, r2
 8004032:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68ba      	ldr	r2, [r7, #8]
 800403a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3714      	adds	r7, #20
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	40010000 	.word	0x40010000
 8004060:	40000400 	.word	0x40000400
 8004064:	40000800 	.word	0x40000800
 8004068:	40000c00 	.word	0x40000c00
 800406c:	40014000 	.word	0x40014000

08004070 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d101      	bne.n	8004082 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e04a      	b.n	8004118 <HAL_HalfDuplex_Init+0xa8>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b00      	cmp	r3, #0
 800408c:	d106      	bne.n	800409c <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f7fd fd60 	bl	8001b5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2224      	movs	r2, #36	@ 0x24
 80040a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68da      	ldr	r2, [r3, #12]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80040b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f000 fe79 	bl	8004dac <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	691a      	ldr	r2, [r3, #16]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80040c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	695a      	ldr	r2, [r3, #20]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 80040d8:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	695a      	ldr	r2, [r3, #20]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f042 0208 	orr.w	r2, r2, #8
 80040e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68da      	ldr	r2, [r3, #12]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80040f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2220      	movs	r2, #32
 8004104:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2220      	movs	r2, #32
 800410c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3708      	adds	r7, #8
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b08a      	sub	sp, #40	@ 0x28
 8004124:	af02      	add	r7, sp, #8
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	603b      	str	r3, [r7, #0]
 800412c:	4613      	mov	r3, r2
 800412e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004130:	2300      	movs	r3, #0
 8004132:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800413a:	b2db      	uxtb	r3, r3
 800413c:	2b20      	cmp	r3, #32
 800413e:	d175      	bne.n	800422c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d002      	beq.n	800414c <HAL_UART_Transmit+0x2c>
 8004146:	88fb      	ldrh	r3, [r7, #6]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d101      	bne.n	8004150 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e06e      	b.n	800422e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2200      	movs	r2, #0
 8004154:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2221      	movs	r2, #33	@ 0x21
 800415a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800415e:	f7fd feb1 	bl	8001ec4 <HAL_GetTick>
 8004162:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	88fa      	ldrh	r2, [r7, #6]
 8004168:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	88fa      	ldrh	r2, [r7, #6]
 800416e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004178:	d108      	bne.n	800418c <HAL_UART_Transmit+0x6c>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d104      	bne.n	800418c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004182:	2300      	movs	r3, #0
 8004184:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	61bb      	str	r3, [r7, #24]
 800418a:	e003      	b.n	8004194 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004190:	2300      	movs	r3, #0
 8004192:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004194:	e02e      	b.n	80041f4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	9300      	str	r3, [sp, #0]
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	2200      	movs	r2, #0
 800419e:	2180      	movs	r1, #128	@ 0x80
 80041a0:	68f8      	ldr	r0, [r7, #12]
 80041a2:	f000 fbd5 	bl	8004950 <UART_WaitOnFlagUntilTimeout>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d005      	beq.n	80041b8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2220      	movs	r2, #32
 80041b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	e03a      	b.n	800422e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d10b      	bne.n	80041d6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	881b      	ldrh	r3, [r3, #0]
 80041c2:	461a      	mov	r2, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	3302      	adds	r3, #2
 80041d2:	61bb      	str	r3, [r7, #24]
 80041d4:	e007      	b.n	80041e6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	781a      	ldrb	r2, [r3, #0]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	3301      	adds	r3, #1
 80041e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	3b01      	subs	r3, #1
 80041ee:	b29a      	uxth	r2, r3
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d1cb      	bne.n	8004196 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	9300      	str	r3, [sp, #0]
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	2200      	movs	r2, #0
 8004206:	2140      	movs	r1, #64	@ 0x40
 8004208:	68f8      	ldr	r0, [r7, #12]
 800420a:	f000 fba1 	bl	8004950 <UART_WaitOnFlagUntilTimeout>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d005      	beq.n	8004220 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2220      	movs	r2, #32
 8004218:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e006      	b.n	800422e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2220      	movs	r2, #32
 8004224:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004228:	2300      	movs	r3, #0
 800422a:	e000      	b.n	800422e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800422c:	2302      	movs	r3, #2
  }
}
 800422e:	4618      	mov	r0, r3
 8004230:	3720      	adds	r7, #32
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}

08004236 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004236:	b580      	push	{r7, lr}
 8004238:	b08c      	sub	sp, #48	@ 0x30
 800423a:	af00      	add	r7, sp, #0
 800423c:	60f8      	str	r0, [r7, #12]
 800423e:	60b9      	str	r1, [r7, #8]
 8004240:	4613      	mov	r3, r2
 8004242:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800424a:	b2db      	uxtb	r3, r3
 800424c:	2b20      	cmp	r3, #32
 800424e:	d14a      	bne.n	80042e6 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d002      	beq.n	800425c <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8004256:	88fb      	ldrh	r3, [r7, #6]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d101      	bne.n	8004260 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e043      	b.n	80042e8 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2201      	movs	r2, #1
 8004264:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2200      	movs	r2, #0
 800426a:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 800426c:	88fb      	ldrh	r3, [r7, #6]
 800426e:	461a      	mov	r2, r3
 8004270:	68b9      	ldr	r1, [r7, #8]
 8004272:	68f8      	ldr	r0, [r7, #12]
 8004274:	f000 fbc5 	bl	8004a02 <UART_Start_Receive_IT>
 8004278:	4603      	mov	r3, r0
 800427a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800427e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004282:	2b00      	cmp	r3, #0
 8004284:	d12c      	bne.n	80042e0 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800428a:	2b01      	cmp	r3, #1
 800428c:	d125      	bne.n	80042da <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800428e:	2300      	movs	r3, #0
 8004290:	613b      	str	r3, [r7, #16]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	613b      	str	r3, [r7, #16]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	613b      	str	r3, [r7, #16]
 80042a2:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	330c      	adds	r3, #12
 80042aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	e853 3f00 	ldrex	r3, [r3]
 80042b2:	617b      	str	r3, [r7, #20]
   return(result);
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	f043 0310 	orr.w	r3, r3, #16
 80042ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	330c      	adds	r3, #12
 80042c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80042c4:	627a      	str	r2, [r7, #36]	@ 0x24
 80042c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c8:	6a39      	ldr	r1, [r7, #32]
 80042ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042cc:	e841 2300 	strex	r3, r2, [r1]
 80042d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d1e5      	bne.n	80042a4 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 80042d8:	e002      	b.n	80042e0 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80042e0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80042e4:	e000      	b.n	80042e8 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 80042e6:	2302      	movs	r3, #2
  }
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3730      	adds	r7, #48	@ 0x30
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b0ba      	sub	sp, #232	@ 0xe8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004316:	2300      	movs	r3, #0
 8004318:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800431c:	2300      	movs	r3, #0
 800431e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004326:	f003 030f 	and.w	r3, r3, #15
 800432a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800432e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004332:	2b00      	cmp	r3, #0
 8004334:	d10f      	bne.n	8004356 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800433a:	f003 0320 	and.w	r3, r3, #32
 800433e:	2b00      	cmp	r3, #0
 8004340:	d009      	beq.n	8004356 <HAL_UART_IRQHandler+0x66>
 8004342:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004346:	f003 0320 	and.w	r3, r3, #32
 800434a:	2b00      	cmp	r3, #0
 800434c:	d003      	beq.n	8004356 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 fc6d 	bl	8004c2e <UART_Receive_IT>
      return;
 8004354:	e273      	b.n	800483e <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004356:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800435a:	2b00      	cmp	r3, #0
 800435c:	f000 80de 	beq.w	800451c <HAL_UART_IRQHandler+0x22c>
 8004360:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004364:	f003 0301 	and.w	r3, r3, #1
 8004368:	2b00      	cmp	r3, #0
 800436a:	d106      	bne.n	800437a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800436c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004370:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004374:	2b00      	cmp	r3, #0
 8004376:	f000 80d1 	beq.w	800451c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800437a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800437e:	f003 0301 	and.w	r3, r3, #1
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00b      	beq.n	800439e <HAL_UART_IRQHandler+0xae>
 8004386:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800438a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800438e:	2b00      	cmp	r3, #0
 8004390:	d005      	beq.n	800439e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004396:	f043 0201 	orr.w	r2, r3, #1
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800439e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043a2:	f003 0304 	and.w	r3, r3, #4
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00b      	beq.n	80043c2 <HAL_UART_IRQHandler+0xd2>
 80043aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043ae:	f003 0301 	and.w	r3, r3, #1
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d005      	beq.n	80043c2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ba:	f043 0202 	orr.w	r2, r3, #2
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80043c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00b      	beq.n	80043e6 <HAL_UART_IRQHandler+0xf6>
 80043ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043d2:	f003 0301 	and.w	r3, r3, #1
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d005      	beq.n	80043e6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043de:	f043 0204 	orr.w	r2, r3, #4
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80043e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043ea:	f003 0308 	and.w	r3, r3, #8
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d011      	beq.n	8004416 <HAL_UART_IRQHandler+0x126>
 80043f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043f6:	f003 0320 	and.w	r3, r3, #32
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d105      	bne.n	800440a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80043fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004402:	f003 0301 	and.w	r3, r3, #1
 8004406:	2b00      	cmp	r3, #0
 8004408:	d005      	beq.n	8004416 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800440e:	f043 0208 	orr.w	r2, r3, #8
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800441a:	2b00      	cmp	r3, #0
 800441c:	f000 820a 	beq.w	8004834 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004420:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004424:	f003 0320 	and.w	r3, r3, #32
 8004428:	2b00      	cmp	r3, #0
 800442a:	d008      	beq.n	800443e <HAL_UART_IRQHandler+0x14e>
 800442c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004430:	f003 0320 	and.w	r3, r3, #32
 8004434:	2b00      	cmp	r3, #0
 8004436:	d002      	beq.n	800443e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f000 fbf8 	bl	8004c2e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	695b      	ldr	r3, [r3, #20]
 8004444:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004448:	2b40      	cmp	r3, #64	@ 0x40
 800444a:	bf0c      	ite	eq
 800444c:	2301      	moveq	r3, #1
 800444e:	2300      	movne	r3, #0
 8004450:	b2db      	uxtb	r3, r3
 8004452:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800445a:	f003 0308 	and.w	r3, r3, #8
 800445e:	2b00      	cmp	r3, #0
 8004460:	d103      	bne.n	800446a <HAL_UART_IRQHandler+0x17a>
 8004462:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004466:	2b00      	cmp	r3, #0
 8004468:	d04f      	beq.n	800450a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 fb03 	bl	8004a76 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800447a:	2b40      	cmp	r3, #64	@ 0x40
 800447c:	d141      	bne.n	8004502 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	3314      	adds	r3, #20
 8004484:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004488:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800448c:	e853 3f00 	ldrex	r3, [r3]
 8004490:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004494:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004498:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800449c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	3314      	adds	r3, #20
 80044a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80044aa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80044ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80044b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80044ba:	e841 2300 	strex	r3, r2, [r1]
 80044be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80044c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d1d9      	bne.n	800447e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d013      	beq.n	80044fa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044d6:	4a8a      	ldr	r2, [pc, #552]	@ (8004700 <HAL_UART_IRQHandler+0x410>)
 80044d8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044de:	4618      	mov	r0, r3
 80044e0:	f7fd fea1 	bl	8002226 <HAL_DMA_Abort_IT>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d016      	beq.n	8004518 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80044f4:	4610      	mov	r0, r2
 80044f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044f8:	e00e      	b.n	8004518 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 f9b6 	bl	800486c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004500:	e00a      	b.n	8004518 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 f9b2 	bl	800486c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004508:	e006      	b.n	8004518 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 f9ae 	bl	800486c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004516:	e18d      	b.n	8004834 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004518:	bf00      	nop
    return;
 800451a:	e18b      	b.n	8004834 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004520:	2b01      	cmp	r3, #1
 8004522:	f040 8167 	bne.w	80047f4 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800452a:	f003 0310 	and.w	r3, r3, #16
 800452e:	2b00      	cmp	r3, #0
 8004530:	f000 8160 	beq.w	80047f4 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8004534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004538:	f003 0310 	and.w	r3, r3, #16
 800453c:	2b00      	cmp	r3, #0
 800453e:	f000 8159 	beq.w	80047f4 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004542:	2300      	movs	r3, #0
 8004544:	60bb      	str	r3, [r7, #8]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	60bb      	str	r3, [r7, #8]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	60bb      	str	r3, [r7, #8]
 8004556:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004562:	2b40      	cmp	r3, #64	@ 0x40
 8004564:	f040 80ce 	bne.w	8004704 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004574:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004578:	2b00      	cmp	r3, #0
 800457a:	f000 80a9 	beq.w	80046d0 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004582:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004586:	429a      	cmp	r2, r3
 8004588:	f080 80a2 	bcs.w	80046d0 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004592:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004598:	69db      	ldr	r3, [r3, #28]
 800459a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800459e:	f000 8088 	beq.w	80046b2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	330c      	adds	r3, #12
 80045a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80045b0:	e853 3f00 	ldrex	r3, [r3]
 80045b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80045b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80045bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	330c      	adds	r3, #12
 80045ca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80045ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80045d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80045da:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80045de:	e841 2300 	strex	r3, r2, [r1]
 80045e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80045e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d1d9      	bne.n	80045a2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	3314      	adds	r3, #20
 80045f4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80045f8:	e853 3f00 	ldrex	r3, [r3]
 80045fc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80045fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004600:	f023 0301 	bic.w	r3, r3, #1
 8004604:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	3314      	adds	r3, #20
 800460e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004612:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004616:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004618:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800461a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800461e:	e841 2300 	strex	r3, r2, [r1]
 8004622:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004624:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004626:	2b00      	cmp	r3, #0
 8004628:	d1e1      	bne.n	80045ee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	3314      	adds	r3, #20
 8004630:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004632:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004634:	e853 3f00 	ldrex	r3, [r3]
 8004638:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800463a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800463c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004640:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	3314      	adds	r3, #20
 800464a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800464e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004650:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004652:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004654:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004656:	e841 2300 	strex	r3, r2, [r1]
 800465a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800465c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800465e:	2b00      	cmp	r3, #0
 8004660:	d1e3      	bne.n	800462a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2220      	movs	r2, #32
 8004666:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	330c      	adds	r3, #12
 8004676:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004678:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800467a:	e853 3f00 	ldrex	r3, [r3]
 800467e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004680:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004682:	f023 0310 	bic.w	r3, r3, #16
 8004686:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	330c      	adds	r3, #12
 8004690:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004694:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004696:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004698:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800469a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800469c:	e841 2300 	strex	r3, r2, [r1]
 80046a0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80046a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d1e3      	bne.n	8004670 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7fd fd4a 	bl	8002146 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2202      	movs	r2, #2
 80046b6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	4619      	mov	r1, r3
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f7fd f993 	bl	80019f4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80046ce:	e0b3      	b.n	8004838 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80046d4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80046d8:	429a      	cmp	r2, r3
 80046da:	f040 80ad 	bne.w	8004838 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046e2:	69db      	ldr	r3, [r3, #28]
 80046e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046e8:	f040 80a6 	bne.w	8004838 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2202      	movs	r2, #2
 80046f0:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80046f6:	4619      	mov	r1, r3
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f7fd f97b 	bl	80019f4 <HAL_UARTEx_RxEventCallback>
      return;
 80046fe:	e09b      	b.n	8004838 <HAL_UART_IRQHandler+0x548>
 8004700:	08004b3d 	.word	0x08004b3d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800470c:	b29b      	uxth	r3, r3
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004718:	b29b      	uxth	r3, r3
 800471a:	2b00      	cmp	r3, #0
 800471c:	f000 808e 	beq.w	800483c <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8004720:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004724:	2b00      	cmp	r3, #0
 8004726:	f000 8089 	beq.w	800483c <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	330c      	adds	r3, #12
 8004730:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004734:	e853 3f00 	ldrex	r3, [r3]
 8004738:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800473a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800473c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004740:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	330c      	adds	r3, #12
 800474a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800474e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004750:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004752:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004754:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004756:	e841 2300 	strex	r3, r2, [r1]
 800475a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800475c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800475e:	2b00      	cmp	r3, #0
 8004760:	d1e3      	bne.n	800472a <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	3314      	adds	r3, #20
 8004768:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800476a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800476c:	e853 3f00 	ldrex	r3, [r3]
 8004770:	623b      	str	r3, [r7, #32]
   return(result);
 8004772:	6a3b      	ldr	r3, [r7, #32]
 8004774:	f023 0301 	bic.w	r3, r3, #1
 8004778:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	3314      	adds	r3, #20
 8004782:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004786:	633a      	str	r2, [r7, #48]	@ 0x30
 8004788:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800478a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800478c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800478e:	e841 2300 	strex	r3, r2, [r1]
 8004792:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004796:	2b00      	cmp	r3, #0
 8004798:	d1e3      	bne.n	8004762 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2220      	movs	r2, #32
 800479e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	330c      	adds	r3, #12
 80047ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	e853 3f00 	ldrex	r3, [r3]
 80047b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f023 0310 	bic.w	r3, r3, #16
 80047be:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	330c      	adds	r3, #12
 80047c8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80047cc:	61fa      	str	r2, [r7, #28]
 80047ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d0:	69b9      	ldr	r1, [r7, #24]
 80047d2:	69fa      	ldr	r2, [r7, #28]
 80047d4:	e841 2300 	strex	r3, r2, [r1]
 80047d8:	617b      	str	r3, [r7, #20]
   return(result);
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d1e3      	bne.n	80047a8 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2202      	movs	r2, #2
 80047e4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80047e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80047ea:	4619      	mov	r1, r3
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f7fd f901 	bl	80019f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80047f2:	e023      	b.n	800483c <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80047f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d009      	beq.n	8004814 <HAL_UART_IRQHandler+0x524>
 8004800:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004804:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004808:	2b00      	cmp	r3, #0
 800480a:	d003      	beq.n	8004814 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f000 f9a6 	bl	8004b5e <UART_Transmit_IT>
    return;
 8004812:	e014      	b.n	800483e <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004814:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004818:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800481c:	2b00      	cmp	r3, #0
 800481e:	d00e      	beq.n	800483e <HAL_UART_IRQHandler+0x54e>
 8004820:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004824:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004828:	2b00      	cmp	r3, #0
 800482a:	d008      	beq.n	800483e <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f000 f9e6 	bl	8004bfe <UART_EndTransmit_IT>
    return;
 8004832:	e004      	b.n	800483e <HAL_UART_IRQHandler+0x54e>
    return;
 8004834:	bf00      	nop
 8004836:	e002      	b.n	800483e <HAL_UART_IRQHandler+0x54e>
      return;
 8004838:	bf00      	nop
 800483a:	e000      	b.n	800483e <HAL_UART_IRQHandler+0x54e>
      return;
 800483c:	bf00      	nop
  }
}
 800483e:	37e8      	adds	r7, #232	@ 0xe8
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}

08004844 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800484c:	bf00      	nop
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004860:	bf00      	nop
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004874:	bf00      	nop
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8004880:	b480      	push	{r7}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8004888:	2300      	movs	r3, #0
 800488a:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004892:	2b01      	cmp	r3, #1
 8004894:	d101      	bne.n	800489a <HAL_HalfDuplex_EnableTransmitter+0x1a>
 8004896:	2302      	movs	r3, #2
 8004898:	e020      	b.n	80048dc <HAL_HalfDuplex_EnableTransmitter+0x5c>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2201      	movs	r2, #1
 800489e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  huart->gState = HAL_UART_STATE_BUSY;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2224      	movs	r2, #36	@ 0x24
 80048a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f023 030c 	bic.w	r3, r3, #12
 80048b8:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f043 0308 	orr.w	r3, r3, #8
 80048c0:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2220      	movs	r2, #32
 80048ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3714      	adds	r7, #20
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <HAL_HalfDuplex_EnableReceiver>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b085      	sub	sp, #20
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80048f0:	2300      	movs	r3, #0
 80048f2:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d101      	bne.n	8004902 <HAL_HalfDuplex_EnableReceiver+0x1a>
 80048fe:	2302      	movs	r3, #2
 8004900:	e020      	b.n	8004944 <HAL_HalfDuplex_EnableReceiver+0x5c>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2201      	movs	r2, #1
 8004906:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  huart->gState = HAL_UART_STATE_BUSY;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2224      	movs	r2, #36	@ 0x24
 800490e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f023 030c 	bic.w	r3, r3, #12
 8004920:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_RE;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f043 0304 	orr.w	r3, r3, #4
 8004928:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68fa      	ldr	r2, [r7, #12]
 8004930:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2220      	movs	r2, #32
 8004936:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004942:	2300      	movs	r3, #0
}
 8004944:	4618      	mov	r0, r3
 8004946:	3714      	adds	r7, #20
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b086      	sub	sp, #24
 8004954:	af00      	add	r7, sp, #0
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	603b      	str	r3, [r7, #0]
 800495c:	4613      	mov	r3, r2
 800495e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004960:	e03b      	b.n	80049da <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004962:	6a3b      	ldr	r3, [r7, #32]
 8004964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004968:	d037      	beq.n	80049da <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800496a:	f7fd faab 	bl	8001ec4 <HAL_GetTick>
 800496e:	4602      	mov	r2, r0
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	1ad3      	subs	r3, r2, r3
 8004974:	6a3a      	ldr	r2, [r7, #32]
 8004976:	429a      	cmp	r2, r3
 8004978:	d302      	bcc.n	8004980 <UART_WaitOnFlagUntilTimeout+0x30>
 800497a:	6a3b      	ldr	r3, [r7, #32]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d101      	bne.n	8004984 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004980:	2303      	movs	r3, #3
 8004982:	e03a      	b.n	80049fa <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	f003 0304 	and.w	r3, r3, #4
 800498e:	2b00      	cmp	r3, #0
 8004990:	d023      	beq.n	80049da <UART_WaitOnFlagUntilTimeout+0x8a>
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	2b80      	cmp	r3, #128	@ 0x80
 8004996:	d020      	beq.n	80049da <UART_WaitOnFlagUntilTimeout+0x8a>
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	2b40      	cmp	r3, #64	@ 0x40
 800499c:	d01d      	beq.n	80049da <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0308 	and.w	r3, r3, #8
 80049a8:	2b08      	cmp	r3, #8
 80049aa:	d116      	bne.n	80049da <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80049ac:	2300      	movs	r3, #0
 80049ae:	617b      	str	r3, [r7, #20]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	617b      	str	r3, [r7, #20]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	617b      	str	r3, [r7, #20]
 80049c0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049c2:	68f8      	ldr	r0, [r7, #12]
 80049c4:	f000 f857 	bl	8004a76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2208      	movs	r2, #8
 80049cc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e00f      	b.n	80049fa <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	4013      	ands	r3, r2
 80049e4:	68ba      	ldr	r2, [r7, #8]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	bf0c      	ite	eq
 80049ea:	2301      	moveq	r3, #1
 80049ec:	2300      	movne	r3, #0
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	461a      	mov	r2, r3
 80049f2:	79fb      	ldrb	r3, [r7, #7]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d0b4      	beq.n	8004962 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3718      	adds	r7, #24
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}

08004a02 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a02:	b480      	push	{r7}
 8004a04:	b085      	sub	sp, #20
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	60f8      	str	r0, [r7, #12]
 8004a0a:	60b9      	str	r1, [r7, #8]
 8004a0c:	4613      	mov	r3, r2
 8004a0e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	68ba      	ldr	r2, [r7, #8]
 8004a14:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	88fa      	ldrh	r2, [r7, #6]
 8004a1a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	88fa      	ldrh	r2, [r7, #6]
 8004a20:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2222      	movs	r2, #34	@ 0x22
 8004a2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d007      	beq.n	8004a48 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	68da      	ldr	r2, [r3, #12]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a46:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	695a      	ldr	r2, [r3, #20]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f042 0201 	orr.w	r2, r2, #1
 8004a56:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	68da      	ldr	r2, [r3, #12]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f042 0220 	orr.w	r2, r2, #32
 8004a66:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3714      	adds	r7, #20
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr

08004a76 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a76:	b480      	push	{r7}
 8004a78:	b095      	sub	sp, #84	@ 0x54
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	330c      	adds	r3, #12
 8004a84:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a88:	e853 3f00 	ldrex	r3, [r3]
 8004a8c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	330c      	adds	r3, #12
 8004a9c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004a9e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004aa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004aa4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004aa6:	e841 2300 	strex	r3, r2, [r1]
 8004aaa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d1e5      	bne.n	8004a7e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	3314      	adds	r3, #20
 8004ab8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aba:	6a3b      	ldr	r3, [r7, #32]
 8004abc:	e853 3f00 	ldrex	r3, [r3]
 8004ac0:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	f023 0301 	bic.w	r3, r3, #1
 8004ac8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	3314      	adds	r3, #20
 8004ad0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ad2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ad8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ada:	e841 2300 	strex	r3, r2, [r1]
 8004ade:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d1e5      	bne.n	8004ab2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d119      	bne.n	8004b22 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	330c      	adds	r3, #12
 8004af4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	e853 3f00 	ldrex	r3, [r3]
 8004afc:	60bb      	str	r3, [r7, #8]
   return(result);
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	f023 0310 	bic.w	r3, r3, #16
 8004b04:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	330c      	adds	r3, #12
 8004b0c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b0e:	61ba      	str	r2, [r7, #24]
 8004b10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b12:	6979      	ldr	r1, [r7, #20]
 8004b14:	69ba      	ldr	r2, [r7, #24]
 8004b16:	e841 2300 	strex	r3, r2, [r1]
 8004b1a:	613b      	str	r3, [r7, #16]
   return(result);
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d1e5      	bne.n	8004aee <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2220      	movs	r2, #32
 8004b26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004b30:	bf00      	nop
 8004b32:	3754      	adds	r7, #84	@ 0x54
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b48:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b50:	68f8      	ldr	r0, [r7, #12]
 8004b52:	f7ff fe8b 	bl	800486c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b56:	bf00      	nop
 8004b58:	3710      	adds	r7, #16
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}

08004b5e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004b5e:	b480      	push	{r7}
 8004b60:	b085      	sub	sp, #20
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	2b21      	cmp	r3, #33	@ 0x21
 8004b70:	d13e      	bne.n	8004bf0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b7a:	d114      	bne.n	8004ba6 <UART_Transmit_IT+0x48>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d110      	bne.n	8004ba6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a1b      	ldr	r3, [r3, #32]
 8004b88:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	881b      	ldrh	r3, [r3, #0]
 8004b8e:	461a      	mov	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b98:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a1b      	ldr	r3, [r3, #32]
 8004b9e:	1c9a      	adds	r2, r3, #2
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	621a      	str	r2, [r3, #32]
 8004ba4:	e008      	b.n	8004bb8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a1b      	ldr	r3, [r3, #32]
 8004baa:	1c59      	adds	r1, r3, #1
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	6211      	str	r1, [r2, #32]
 8004bb0:	781a      	ldrb	r2, [r3, #0]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d10f      	bne.n	8004bec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	68da      	ldr	r2, [r3, #12]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004bda:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68da      	ldr	r2, [r3, #12]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004bea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004bec:	2300      	movs	r3, #0
 8004bee:	e000      	b.n	8004bf2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004bf0:	2302      	movs	r3, #2
  }
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3714      	adds	r7, #20
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr

08004bfe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004bfe:	b580      	push	{r7, lr}
 8004c00:	b082      	sub	sp, #8
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68da      	ldr	r2, [r3, #12]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c14:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2220      	movs	r2, #32
 8004c1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f7ff fe10 	bl	8004844 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3708      	adds	r7, #8
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}

08004c2e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004c2e:	b580      	push	{r7, lr}
 8004c30:	b08c      	sub	sp, #48	@ 0x30
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8004c36:	2300      	movs	r3, #0
 8004c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	2b22      	cmp	r3, #34	@ 0x22
 8004c48:	f040 80aa 	bne.w	8004da0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c54:	d115      	bne.n	8004c82 <UART_Receive_IT+0x54>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d111      	bne.n	8004c82 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c62:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c70:	b29a      	uxth	r2, r3
 8004c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c74:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c7a:	1c9a      	adds	r2, r3, #2
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004c80:	e024      	b.n	8004ccc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c86:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c90:	d007      	beq.n	8004ca2 <UART_Receive_IT+0x74>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d10a      	bne.n	8004cb0 <UART_Receive_IT+0x82>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d106      	bne.n	8004cb0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	b2da      	uxtb	r2, r3
 8004caa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cac:	701a      	strb	r2, [r3, #0]
 8004cae:	e008      	b.n	8004cc2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cbc:	b2da      	uxtb	r2, r3
 8004cbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cc0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc6:	1c5a      	adds	r2, r3, #1
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	3b01      	subs	r3, #1
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	4619      	mov	r1, r3
 8004cda:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d15d      	bne.n	8004d9c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	68da      	ldr	r2, [r3, #12]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f022 0220 	bic.w	r2, r2, #32
 8004cee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68da      	ldr	r2, [r3, #12]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004cfe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	695a      	ldr	r2, [r3, #20]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f022 0201 	bic.w	r2, r2, #1
 8004d0e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2220      	movs	r2, #32
 8004d14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d135      	bne.n	8004d92 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	330c      	adds	r3, #12
 8004d32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	e853 3f00 	ldrex	r3, [r3]
 8004d3a:	613b      	str	r3, [r7, #16]
   return(result);
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	f023 0310 	bic.w	r3, r3, #16
 8004d42:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	330c      	adds	r3, #12
 8004d4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d4c:	623a      	str	r2, [r7, #32]
 8004d4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d50:	69f9      	ldr	r1, [r7, #28]
 8004d52:	6a3a      	ldr	r2, [r7, #32]
 8004d54:	e841 2300 	strex	r3, r2, [r1]
 8004d58:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d1e5      	bne.n	8004d2c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0310 	and.w	r3, r3, #16
 8004d6a:	2b10      	cmp	r3, #16
 8004d6c:	d10a      	bne.n	8004d84 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d6e:	2300      	movs	r3, #0
 8004d70:	60fb      	str	r3, [r7, #12]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	60fb      	str	r3, [r7, #12]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	60fb      	str	r3, [r7, #12]
 8004d82:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004d88:	4619      	mov	r1, r3
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f7fc fe32 	bl	80019f4 <HAL_UARTEx_RxEventCallback>
 8004d90:	e002      	b.n	8004d98 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f7ff fd60 	bl	8004858 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	e002      	b.n	8004da2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	e000      	b.n	8004da2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004da0:	2302      	movs	r3, #2
  }
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3730      	adds	r7, #48	@ 0x30
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
	...

08004dac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004db0:	b0c0      	sub	sp, #256	@ 0x100
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dc8:	68d9      	ldr	r1, [r3, #12]
 8004dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	ea40 0301 	orr.w	r3, r0, r1
 8004dd4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dda:	689a      	ldr	r2, [r3, #8]
 8004ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	431a      	orrs	r2, r3
 8004de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	431a      	orrs	r2, r3
 8004dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004df0:	69db      	ldr	r3, [r3, #28]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004e04:	f021 010c 	bic.w	r1, r1, #12
 8004e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004e12:	430b      	orrs	r3, r1
 8004e14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	695b      	ldr	r3, [r3, #20]
 8004e1e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e26:	6999      	ldr	r1, [r3, #24]
 8004e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	ea40 0301 	orr.w	r3, r0, r1
 8004e32:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	4b8f      	ldr	r3, [pc, #572]	@ (8005078 <UART_SetConfig+0x2cc>)
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d005      	beq.n	8004e4c <UART_SetConfig+0xa0>
 8004e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	4b8d      	ldr	r3, [pc, #564]	@ (800507c <UART_SetConfig+0x2d0>)
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d104      	bne.n	8004e56 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e4c:	f7fe faee 	bl	800342c <HAL_RCC_GetPCLK2Freq>
 8004e50:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004e54:	e003      	b.n	8004e5e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e56:	f7fe fad5 	bl	8003404 <HAL_RCC_GetPCLK1Freq>
 8004e5a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e62:	69db      	ldr	r3, [r3, #28]
 8004e64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e68:	f040 810c 	bne.w	8005084 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e70:	2200      	movs	r2, #0
 8004e72:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004e76:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004e7a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004e7e:	4622      	mov	r2, r4
 8004e80:	462b      	mov	r3, r5
 8004e82:	1891      	adds	r1, r2, r2
 8004e84:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004e86:	415b      	adcs	r3, r3
 8004e88:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004e8e:	4621      	mov	r1, r4
 8004e90:	eb12 0801 	adds.w	r8, r2, r1
 8004e94:	4629      	mov	r1, r5
 8004e96:	eb43 0901 	adc.w	r9, r3, r1
 8004e9a:	f04f 0200 	mov.w	r2, #0
 8004e9e:	f04f 0300 	mov.w	r3, #0
 8004ea2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ea6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004eaa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004eae:	4690      	mov	r8, r2
 8004eb0:	4699      	mov	r9, r3
 8004eb2:	4623      	mov	r3, r4
 8004eb4:	eb18 0303 	adds.w	r3, r8, r3
 8004eb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004ebc:	462b      	mov	r3, r5
 8004ebe:	eb49 0303 	adc.w	r3, r9, r3
 8004ec2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004ed2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004ed6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004eda:	460b      	mov	r3, r1
 8004edc:	18db      	adds	r3, r3, r3
 8004ede:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	eb42 0303 	adc.w	r3, r2, r3
 8004ee6:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ee8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004eec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004ef0:	f7fb f9c6 	bl	8000280 <__aeabi_uldivmod>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	460b      	mov	r3, r1
 8004ef8:	4b61      	ldr	r3, [pc, #388]	@ (8005080 <UART_SetConfig+0x2d4>)
 8004efa:	fba3 2302 	umull	r2, r3, r3, r2
 8004efe:	095b      	lsrs	r3, r3, #5
 8004f00:	011c      	lsls	r4, r3, #4
 8004f02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f06:	2200      	movs	r2, #0
 8004f08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f0c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004f10:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004f14:	4642      	mov	r2, r8
 8004f16:	464b      	mov	r3, r9
 8004f18:	1891      	adds	r1, r2, r2
 8004f1a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004f1c:	415b      	adcs	r3, r3
 8004f1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004f24:	4641      	mov	r1, r8
 8004f26:	eb12 0a01 	adds.w	sl, r2, r1
 8004f2a:	4649      	mov	r1, r9
 8004f2c:	eb43 0b01 	adc.w	fp, r3, r1
 8004f30:	f04f 0200 	mov.w	r2, #0
 8004f34:	f04f 0300 	mov.w	r3, #0
 8004f38:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004f3c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004f40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f44:	4692      	mov	sl, r2
 8004f46:	469b      	mov	fp, r3
 8004f48:	4643      	mov	r3, r8
 8004f4a:	eb1a 0303 	adds.w	r3, sl, r3
 8004f4e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004f52:	464b      	mov	r3, r9
 8004f54:	eb4b 0303 	adc.w	r3, fp, r3
 8004f58:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f68:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004f6c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004f70:	460b      	mov	r3, r1
 8004f72:	18db      	adds	r3, r3, r3
 8004f74:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f76:	4613      	mov	r3, r2
 8004f78:	eb42 0303 	adc.w	r3, r2, r3
 8004f7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004f82:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004f86:	f7fb f97b 	bl	8000280 <__aeabi_uldivmod>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	460b      	mov	r3, r1
 8004f8e:	4611      	mov	r1, r2
 8004f90:	4b3b      	ldr	r3, [pc, #236]	@ (8005080 <UART_SetConfig+0x2d4>)
 8004f92:	fba3 2301 	umull	r2, r3, r3, r1
 8004f96:	095b      	lsrs	r3, r3, #5
 8004f98:	2264      	movs	r2, #100	@ 0x64
 8004f9a:	fb02 f303 	mul.w	r3, r2, r3
 8004f9e:	1acb      	subs	r3, r1, r3
 8004fa0:	00db      	lsls	r3, r3, #3
 8004fa2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004fa6:	4b36      	ldr	r3, [pc, #216]	@ (8005080 <UART_SetConfig+0x2d4>)
 8004fa8:	fba3 2302 	umull	r2, r3, r3, r2
 8004fac:	095b      	lsrs	r3, r3, #5
 8004fae:	005b      	lsls	r3, r3, #1
 8004fb0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004fb4:	441c      	add	r4, r3
 8004fb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004fc0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004fc4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004fc8:	4642      	mov	r2, r8
 8004fca:	464b      	mov	r3, r9
 8004fcc:	1891      	adds	r1, r2, r2
 8004fce:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004fd0:	415b      	adcs	r3, r3
 8004fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004fd4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004fd8:	4641      	mov	r1, r8
 8004fda:	1851      	adds	r1, r2, r1
 8004fdc:	6339      	str	r1, [r7, #48]	@ 0x30
 8004fde:	4649      	mov	r1, r9
 8004fe0:	414b      	adcs	r3, r1
 8004fe2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fe4:	f04f 0200 	mov.w	r2, #0
 8004fe8:	f04f 0300 	mov.w	r3, #0
 8004fec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004ff0:	4659      	mov	r1, fp
 8004ff2:	00cb      	lsls	r3, r1, #3
 8004ff4:	4651      	mov	r1, sl
 8004ff6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ffa:	4651      	mov	r1, sl
 8004ffc:	00ca      	lsls	r2, r1, #3
 8004ffe:	4610      	mov	r0, r2
 8005000:	4619      	mov	r1, r3
 8005002:	4603      	mov	r3, r0
 8005004:	4642      	mov	r2, r8
 8005006:	189b      	adds	r3, r3, r2
 8005008:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800500c:	464b      	mov	r3, r9
 800500e:	460a      	mov	r2, r1
 8005010:	eb42 0303 	adc.w	r3, r2, r3
 8005014:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005024:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005028:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800502c:	460b      	mov	r3, r1
 800502e:	18db      	adds	r3, r3, r3
 8005030:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005032:	4613      	mov	r3, r2
 8005034:	eb42 0303 	adc.w	r3, r2, r3
 8005038:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800503a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800503e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005042:	f7fb f91d 	bl	8000280 <__aeabi_uldivmod>
 8005046:	4602      	mov	r2, r0
 8005048:	460b      	mov	r3, r1
 800504a:	4b0d      	ldr	r3, [pc, #52]	@ (8005080 <UART_SetConfig+0x2d4>)
 800504c:	fba3 1302 	umull	r1, r3, r3, r2
 8005050:	095b      	lsrs	r3, r3, #5
 8005052:	2164      	movs	r1, #100	@ 0x64
 8005054:	fb01 f303 	mul.w	r3, r1, r3
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	00db      	lsls	r3, r3, #3
 800505c:	3332      	adds	r3, #50	@ 0x32
 800505e:	4a08      	ldr	r2, [pc, #32]	@ (8005080 <UART_SetConfig+0x2d4>)
 8005060:	fba2 2303 	umull	r2, r3, r2, r3
 8005064:	095b      	lsrs	r3, r3, #5
 8005066:	f003 0207 	and.w	r2, r3, #7
 800506a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4422      	add	r2, r4
 8005072:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005074:	e106      	b.n	8005284 <UART_SetConfig+0x4d8>
 8005076:	bf00      	nop
 8005078:	40011000 	.word	0x40011000
 800507c:	40011400 	.word	0x40011400
 8005080:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005084:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005088:	2200      	movs	r2, #0
 800508a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800508e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005092:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005096:	4642      	mov	r2, r8
 8005098:	464b      	mov	r3, r9
 800509a:	1891      	adds	r1, r2, r2
 800509c:	6239      	str	r1, [r7, #32]
 800509e:	415b      	adcs	r3, r3
 80050a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80050a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80050a6:	4641      	mov	r1, r8
 80050a8:	1854      	adds	r4, r2, r1
 80050aa:	4649      	mov	r1, r9
 80050ac:	eb43 0501 	adc.w	r5, r3, r1
 80050b0:	f04f 0200 	mov.w	r2, #0
 80050b4:	f04f 0300 	mov.w	r3, #0
 80050b8:	00eb      	lsls	r3, r5, #3
 80050ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050be:	00e2      	lsls	r2, r4, #3
 80050c0:	4614      	mov	r4, r2
 80050c2:	461d      	mov	r5, r3
 80050c4:	4643      	mov	r3, r8
 80050c6:	18e3      	adds	r3, r4, r3
 80050c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80050cc:	464b      	mov	r3, r9
 80050ce:	eb45 0303 	adc.w	r3, r5, r3
 80050d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80050d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80050e2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80050e6:	f04f 0200 	mov.w	r2, #0
 80050ea:	f04f 0300 	mov.w	r3, #0
 80050ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80050f2:	4629      	mov	r1, r5
 80050f4:	008b      	lsls	r3, r1, #2
 80050f6:	4621      	mov	r1, r4
 80050f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050fc:	4621      	mov	r1, r4
 80050fe:	008a      	lsls	r2, r1, #2
 8005100:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005104:	f7fb f8bc 	bl	8000280 <__aeabi_uldivmod>
 8005108:	4602      	mov	r2, r0
 800510a:	460b      	mov	r3, r1
 800510c:	4b60      	ldr	r3, [pc, #384]	@ (8005290 <UART_SetConfig+0x4e4>)
 800510e:	fba3 2302 	umull	r2, r3, r3, r2
 8005112:	095b      	lsrs	r3, r3, #5
 8005114:	011c      	lsls	r4, r3, #4
 8005116:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800511a:	2200      	movs	r2, #0
 800511c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005120:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005124:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005128:	4642      	mov	r2, r8
 800512a:	464b      	mov	r3, r9
 800512c:	1891      	adds	r1, r2, r2
 800512e:	61b9      	str	r1, [r7, #24]
 8005130:	415b      	adcs	r3, r3
 8005132:	61fb      	str	r3, [r7, #28]
 8005134:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005138:	4641      	mov	r1, r8
 800513a:	1851      	adds	r1, r2, r1
 800513c:	6139      	str	r1, [r7, #16]
 800513e:	4649      	mov	r1, r9
 8005140:	414b      	adcs	r3, r1
 8005142:	617b      	str	r3, [r7, #20]
 8005144:	f04f 0200 	mov.w	r2, #0
 8005148:	f04f 0300 	mov.w	r3, #0
 800514c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005150:	4659      	mov	r1, fp
 8005152:	00cb      	lsls	r3, r1, #3
 8005154:	4651      	mov	r1, sl
 8005156:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800515a:	4651      	mov	r1, sl
 800515c:	00ca      	lsls	r2, r1, #3
 800515e:	4610      	mov	r0, r2
 8005160:	4619      	mov	r1, r3
 8005162:	4603      	mov	r3, r0
 8005164:	4642      	mov	r2, r8
 8005166:	189b      	adds	r3, r3, r2
 8005168:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800516c:	464b      	mov	r3, r9
 800516e:	460a      	mov	r2, r1
 8005170:	eb42 0303 	adc.w	r3, r2, r3
 8005174:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005182:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005184:	f04f 0200 	mov.w	r2, #0
 8005188:	f04f 0300 	mov.w	r3, #0
 800518c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005190:	4649      	mov	r1, r9
 8005192:	008b      	lsls	r3, r1, #2
 8005194:	4641      	mov	r1, r8
 8005196:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800519a:	4641      	mov	r1, r8
 800519c:	008a      	lsls	r2, r1, #2
 800519e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80051a2:	f7fb f86d 	bl	8000280 <__aeabi_uldivmod>
 80051a6:	4602      	mov	r2, r0
 80051a8:	460b      	mov	r3, r1
 80051aa:	4611      	mov	r1, r2
 80051ac:	4b38      	ldr	r3, [pc, #224]	@ (8005290 <UART_SetConfig+0x4e4>)
 80051ae:	fba3 2301 	umull	r2, r3, r3, r1
 80051b2:	095b      	lsrs	r3, r3, #5
 80051b4:	2264      	movs	r2, #100	@ 0x64
 80051b6:	fb02 f303 	mul.w	r3, r2, r3
 80051ba:	1acb      	subs	r3, r1, r3
 80051bc:	011b      	lsls	r3, r3, #4
 80051be:	3332      	adds	r3, #50	@ 0x32
 80051c0:	4a33      	ldr	r2, [pc, #204]	@ (8005290 <UART_SetConfig+0x4e4>)
 80051c2:	fba2 2303 	umull	r2, r3, r2, r3
 80051c6:	095b      	lsrs	r3, r3, #5
 80051c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80051cc:	441c      	add	r4, r3
 80051ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051d2:	2200      	movs	r2, #0
 80051d4:	673b      	str	r3, [r7, #112]	@ 0x70
 80051d6:	677a      	str	r2, [r7, #116]	@ 0x74
 80051d8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80051dc:	4642      	mov	r2, r8
 80051de:	464b      	mov	r3, r9
 80051e0:	1891      	adds	r1, r2, r2
 80051e2:	60b9      	str	r1, [r7, #8]
 80051e4:	415b      	adcs	r3, r3
 80051e6:	60fb      	str	r3, [r7, #12]
 80051e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051ec:	4641      	mov	r1, r8
 80051ee:	1851      	adds	r1, r2, r1
 80051f0:	6039      	str	r1, [r7, #0]
 80051f2:	4649      	mov	r1, r9
 80051f4:	414b      	adcs	r3, r1
 80051f6:	607b      	str	r3, [r7, #4]
 80051f8:	f04f 0200 	mov.w	r2, #0
 80051fc:	f04f 0300 	mov.w	r3, #0
 8005200:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005204:	4659      	mov	r1, fp
 8005206:	00cb      	lsls	r3, r1, #3
 8005208:	4651      	mov	r1, sl
 800520a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800520e:	4651      	mov	r1, sl
 8005210:	00ca      	lsls	r2, r1, #3
 8005212:	4610      	mov	r0, r2
 8005214:	4619      	mov	r1, r3
 8005216:	4603      	mov	r3, r0
 8005218:	4642      	mov	r2, r8
 800521a:	189b      	adds	r3, r3, r2
 800521c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800521e:	464b      	mov	r3, r9
 8005220:	460a      	mov	r2, r1
 8005222:	eb42 0303 	adc.w	r3, r2, r3
 8005226:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	663b      	str	r3, [r7, #96]	@ 0x60
 8005232:	667a      	str	r2, [r7, #100]	@ 0x64
 8005234:	f04f 0200 	mov.w	r2, #0
 8005238:	f04f 0300 	mov.w	r3, #0
 800523c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005240:	4649      	mov	r1, r9
 8005242:	008b      	lsls	r3, r1, #2
 8005244:	4641      	mov	r1, r8
 8005246:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800524a:	4641      	mov	r1, r8
 800524c:	008a      	lsls	r2, r1, #2
 800524e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005252:	f7fb f815 	bl	8000280 <__aeabi_uldivmod>
 8005256:	4602      	mov	r2, r0
 8005258:	460b      	mov	r3, r1
 800525a:	4b0d      	ldr	r3, [pc, #52]	@ (8005290 <UART_SetConfig+0x4e4>)
 800525c:	fba3 1302 	umull	r1, r3, r3, r2
 8005260:	095b      	lsrs	r3, r3, #5
 8005262:	2164      	movs	r1, #100	@ 0x64
 8005264:	fb01 f303 	mul.w	r3, r1, r3
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	011b      	lsls	r3, r3, #4
 800526c:	3332      	adds	r3, #50	@ 0x32
 800526e:	4a08      	ldr	r2, [pc, #32]	@ (8005290 <UART_SetConfig+0x4e4>)
 8005270:	fba2 2303 	umull	r2, r3, r2, r3
 8005274:	095b      	lsrs	r3, r3, #5
 8005276:	f003 020f 	and.w	r2, r3, #15
 800527a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4422      	add	r2, r4
 8005282:	609a      	str	r2, [r3, #8]
}
 8005284:	bf00      	nop
 8005286:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800528a:	46bd      	mov	sp, r7
 800528c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005290:	51eb851f 	.word	0x51eb851f

08005294 <std>:
 8005294:	2300      	movs	r3, #0
 8005296:	b510      	push	{r4, lr}
 8005298:	4604      	mov	r4, r0
 800529a:	e9c0 3300 	strd	r3, r3, [r0]
 800529e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80052a2:	6083      	str	r3, [r0, #8]
 80052a4:	8181      	strh	r1, [r0, #12]
 80052a6:	6643      	str	r3, [r0, #100]	@ 0x64
 80052a8:	81c2      	strh	r2, [r0, #14]
 80052aa:	6183      	str	r3, [r0, #24]
 80052ac:	4619      	mov	r1, r3
 80052ae:	2208      	movs	r2, #8
 80052b0:	305c      	adds	r0, #92	@ 0x5c
 80052b2:	f000 fac5 	bl	8005840 <memset>
 80052b6:	4b0d      	ldr	r3, [pc, #52]	@ (80052ec <std+0x58>)
 80052b8:	6263      	str	r3, [r4, #36]	@ 0x24
 80052ba:	4b0d      	ldr	r3, [pc, #52]	@ (80052f0 <std+0x5c>)
 80052bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80052be:	4b0d      	ldr	r3, [pc, #52]	@ (80052f4 <std+0x60>)
 80052c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80052c2:	4b0d      	ldr	r3, [pc, #52]	@ (80052f8 <std+0x64>)
 80052c4:	6323      	str	r3, [r4, #48]	@ 0x30
 80052c6:	4b0d      	ldr	r3, [pc, #52]	@ (80052fc <std+0x68>)
 80052c8:	6224      	str	r4, [r4, #32]
 80052ca:	429c      	cmp	r4, r3
 80052cc:	d006      	beq.n	80052dc <std+0x48>
 80052ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80052d2:	4294      	cmp	r4, r2
 80052d4:	d002      	beq.n	80052dc <std+0x48>
 80052d6:	33d0      	adds	r3, #208	@ 0xd0
 80052d8:	429c      	cmp	r4, r3
 80052da:	d105      	bne.n	80052e8 <std+0x54>
 80052dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80052e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052e4:	f000 bb24 	b.w	8005930 <__retarget_lock_init_recursive>
 80052e8:	bd10      	pop	{r4, pc}
 80052ea:	bf00      	nop
 80052ec:	08005671 	.word	0x08005671
 80052f0:	08005693 	.word	0x08005693
 80052f4:	080056cb 	.word	0x080056cb
 80052f8:	080056ef 	.word	0x080056ef
 80052fc:	200004e4 	.word	0x200004e4

08005300 <stdio_exit_handler>:
 8005300:	4a02      	ldr	r2, [pc, #8]	@ (800530c <stdio_exit_handler+0xc>)
 8005302:	4903      	ldr	r1, [pc, #12]	@ (8005310 <stdio_exit_handler+0x10>)
 8005304:	4803      	ldr	r0, [pc, #12]	@ (8005314 <stdio_exit_handler+0x14>)
 8005306:	f000 b869 	b.w	80053dc <_fwalk_sglue>
 800530a:	bf00      	nop
 800530c:	20000348 	.word	0x20000348
 8005310:	080061dd 	.word	0x080061dd
 8005314:	20000358 	.word	0x20000358

08005318 <cleanup_stdio>:
 8005318:	6841      	ldr	r1, [r0, #4]
 800531a:	4b0c      	ldr	r3, [pc, #48]	@ (800534c <cleanup_stdio+0x34>)
 800531c:	4299      	cmp	r1, r3
 800531e:	b510      	push	{r4, lr}
 8005320:	4604      	mov	r4, r0
 8005322:	d001      	beq.n	8005328 <cleanup_stdio+0x10>
 8005324:	f000 ff5a 	bl	80061dc <_fflush_r>
 8005328:	68a1      	ldr	r1, [r4, #8]
 800532a:	4b09      	ldr	r3, [pc, #36]	@ (8005350 <cleanup_stdio+0x38>)
 800532c:	4299      	cmp	r1, r3
 800532e:	d002      	beq.n	8005336 <cleanup_stdio+0x1e>
 8005330:	4620      	mov	r0, r4
 8005332:	f000 ff53 	bl	80061dc <_fflush_r>
 8005336:	68e1      	ldr	r1, [r4, #12]
 8005338:	4b06      	ldr	r3, [pc, #24]	@ (8005354 <cleanup_stdio+0x3c>)
 800533a:	4299      	cmp	r1, r3
 800533c:	d004      	beq.n	8005348 <cleanup_stdio+0x30>
 800533e:	4620      	mov	r0, r4
 8005340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005344:	f000 bf4a 	b.w	80061dc <_fflush_r>
 8005348:	bd10      	pop	{r4, pc}
 800534a:	bf00      	nop
 800534c:	200004e4 	.word	0x200004e4
 8005350:	2000054c 	.word	0x2000054c
 8005354:	200005b4 	.word	0x200005b4

08005358 <global_stdio_init.part.0>:
 8005358:	b510      	push	{r4, lr}
 800535a:	4b0b      	ldr	r3, [pc, #44]	@ (8005388 <global_stdio_init.part.0+0x30>)
 800535c:	4c0b      	ldr	r4, [pc, #44]	@ (800538c <global_stdio_init.part.0+0x34>)
 800535e:	4a0c      	ldr	r2, [pc, #48]	@ (8005390 <global_stdio_init.part.0+0x38>)
 8005360:	601a      	str	r2, [r3, #0]
 8005362:	4620      	mov	r0, r4
 8005364:	2200      	movs	r2, #0
 8005366:	2104      	movs	r1, #4
 8005368:	f7ff ff94 	bl	8005294 <std>
 800536c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005370:	2201      	movs	r2, #1
 8005372:	2109      	movs	r1, #9
 8005374:	f7ff ff8e 	bl	8005294 <std>
 8005378:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800537c:	2202      	movs	r2, #2
 800537e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005382:	2112      	movs	r1, #18
 8005384:	f7ff bf86 	b.w	8005294 <std>
 8005388:	2000061c 	.word	0x2000061c
 800538c:	200004e4 	.word	0x200004e4
 8005390:	08005301 	.word	0x08005301

08005394 <__sfp_lock_acquire>:
 8005394:	4801      	ldr	r0, [pc, #4]	@ (800539c <__sfp_lock_acquire+0x8>)
 8005396:	f000 bacc 	b.w	8005932 <__retarget_lock_acquire_recursive>
 800539a:	bf00      	nop
 800539c:	20000625 	.word	0x20000625

080053a0 <__sfp_lock_release>:
 80053a0:	4801      	ldr	r0, [pc, #4]	@ (80053a8 <__sfp_lock_release+0x8>)
 80053a2:	f000 bac7 	b.w	8005934 <__retarget_lock_release_recursive>
 80053a6:	bf00      	nop
 80053a8:	20000625 	.word	0x20000625

080053ac <__sinit>:
 80053ac:	b510      	push	{r4, lr}
 80053ae:	4604      	mov	r4, r0
 80053b0:	f7ff fff0 	bl	8005394 <__sfp_lock_acquire>
 80053b4:	6a23      	ldr	r3, [r4, #32]
 80053b6:	b11b      	cbz	r3, 80053c0 <__sinit+0x14>
 80053b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053bc:	f7ff bff0 	b.w	80053a0 <__sfp_lock_release>
 80053c0:	4b04      	ldr	r3, [pc, #16]	@ (80053d4 <__sinit+0x28>)
 80053c2:	6223      	str	r3, [r4, #32]
 80053c4:	4b04      	ldr	r3, [pc, #16]	@ (80053d8 <__sinit+0x2c>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d1f5      	bne.n	80053b8 <__sinit+0xc>
 80053cc:	f7ff ffc4 	bl	8005358 <global_stdio_init.part.0>
 80053d0:	e7f2      	b.n	80053b8 <__sinit+0xc>
 80053d2:	bf00      	nop
 80053d4:	08005319 	.word	0x08005319
 80053d8:	2000061c 	.word	0x2000061c

080053dc <_fwalk_sglue>:
 80053dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053e0:	4607      	mov	r7, r0
 80053e2:	4688      	mov	r8, r1
 80053e4:	4614      	mov	r4, r2
 80053e6:	2600      	movs	r6, #0
 80053e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80053ec:	f1b9 0901 	subs.w	r9, r9, #1
 80053f0:	d505      	bpl.n	80053fe <_fwalk_sglue+0x22>
 80053f2:	6824      	ldr	r4, [r4, #0]
 80053f4:	2c00      	cmp	r4, #0
 80053f6:	d1f7      	bne.n	80053e8 <_fwalk_sglue+0xc>
 80053f8:	4630      	mov	r0, r6
 80053fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053fe:	89ab      	ldrh	r3, [r5, #12]
 8005400:	2b01      	cmp	r3, #1
 8005402:	d907      	bls.n	8005414 <_fwalk_sglue+0x38>
 8005404:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005408:	3301      	adds	r3, #1
 800540a:	d003      	beq.n	8005414 <_fwalk_sglue+0x38>
 800540c:	4629      	mov	r1, r5
 800540e:	4638      	mov	r0, r7
 8005410:	47c0      	blx	r8
 8005412:	4306      	orrs	r6, r0
 8005414:	3568      	adds	r5, #104	@ 0x68
 8005416:	e7e9      	b.n	80053ec <_fwalk_sglue+0x10>

08005418 <iprintf>:
 8005418:	b40f      	push	{r0, r1, r2, r3}
 800541a:	b507      	push	{r0, r1, r2, lr}
 800541c:	4906      	ldr	r1, [pc, #24]	@ (8005438 <iprintf+0x20>)
 800541e:	ab04      	add	r3, sp, #16
 8005420:	6808      	ldr	r0, [r1, #0]
 8005422:	f853 2b04 	ldr.w	r2, [r3], #4
 8005426:	6881      	ldr	r1, [r0, #8]
 8005428:	9301      	str	r3, [sp, #4]
 800542a:	f000 fbaf 	bl	8005b8c <_vfiprintf_r>
 800542e:	b003      	add	sp, #12
 8005430:	f85d eb04 	ldr.w	lr, [sp], #4
 8005434:	b004      	add	sp, #16
 8005436:	4770      	bx	lr
 8005438:	20000354 	.word	0x20000354

0800543c <putchar>:
 800543c:	4b02      	ldr	r3, [pc, #8]	@ (8005448 <putchar+0xc>)
 800543e:	4601      	mov	r1, r0
 8005440:	6818      	ldr	r0, [r3, #0]
 8005442:	6882      	ldr	r2, [r0, #8]
 8005444:	f000 bf54 	b.w	80062f0 <_putc_r>
 8005448:	20000354 	.word	0x20000354

0800544c <_puts_r>:
 800544c:	6a03      	ldr	r3, [r0, #32]
 800544e:	b570      	push	{r4, r5, r6, lr}
 8005450:	6884      	ldr	r4, [r0, #8]
 8005452:	4605      	mov	r5, r0
 8005454:	460e      	mov	r6, r1
 8005456:	b90b      	cbnz	r3, 800545c <_puts_r+0x10>
 8005458:	f7ff ffa8 	bl	80053ac <__sinit>
 800545c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800545e:	07db      	lsls	r3, r3, #31
 8005460:	d405      	bmi.n	800546e <_puts_r+0x22>
 8005462:	89a3      	ldrh	r3, [r4, #12]
 8005464:	0598      	lsls	r0, r3, #22
 8005466:	d402      	bmi.n	800546e <_puts_r+0x22>
 8005468:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800546a:	f000 fa62 	bl	8005932 <__retarget_lock_acquire_recursive>
 800546e:	89a3      	ldrh	r3, [r4, #12]
 8005470:	0719      	lsls	r1, r3, #28
 8005472:	d502      	bpl.n	800547a <_puts_r+0x2e>
 8005474:	6923      	ldr	r3, [r4, #16]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d135      	bne.n	80054e6 <_puts_r+0x9a>
 800547a:	4621      	mov	r1, r4
 800547c:	4628      	mov	r0, r5
 800547e:	f000 f979 	bl	8005774 <__swsetup_r>
 8005482:	b380      	cbz	r0, 80054e6 <_puts_r+0x9a>
 8005484:	f04f 35ff 	mov.w	r5, #4294967295
 8005488:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800548a:	07da      	lsls	r2, r3, #31
 800548c:	d405      	bmi.n	800549a <_puts_r+0x4e>
 800548e:	89a3      	ldrh	r3, [r4, #12]
 8005490:	059b      	lsls	r3, r3, #22
 8005492:	d402      	bmi.n	800549a <_puts_r+0x4e>
 8005494:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005496:	f000 fa4d 	bl	8005934 <__retarget_lock_release_recursive>
 800549a:	4628      	mov	r0, r5
 800549c:	bd70      	pop	{r4, r5, r6, pc}
 800549e:	2b00      	cmp	r3, #0
 80054a0:	da04      	bge.n	80054ac <_puts_r+0x60>
 80054a2:	69a2      	ldr	r2, [r4, #24]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	dc17      	bgt.n	80054d8 <_puts_r+0x8c>
 80054a8:	290a      	cmp	r1, #10
 80054aa:	d015      	beq.n	80054d8 <_puts_r+0x8c>
 80054ac:	6823      	ldr	r3, [r4, #0]
 80054ae:	1c5a      	adds	r2, r3, #1
 80054b0:	6022      	str	r2, [r4, #0]
 80054b2:	7019      	strb	r1, [r3, #0]
 80054b4:	68a3      	ldr	r3, [r4, #8]
 80054b6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80054ba:	3b01      	subs	r3, #1
 80054bc:	60a3      	str	r3, [r4, #8]
 80054be:	2900      	cmp	r1, #0
 80054c0:	d1ed      	bne.n	800549e <_puts_r+0x52>
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	da11      	bge.n	80054ea <_puts_r+0x9e>
 80054c6:	4622      	mov	r2, r4
 80054c8:	210a      	movs	r1, #10
 80054ca:	4628      	mov	r0, r5
 80054cc:	f000 f913 	bl	80056f6 <__swbuf_r>
 80054d0:	3001      	adds	r0, #1
 80054d2:	d0d7      	beq.n	8005484 <_puts_r+0x38>
 80054d4:	250a      	movs	r5, #10
 80054d6:	e7d7      	b.n	8005488 <_puts_r+0x3c>
 80054d8:	4622      	mov	r2, r4
 80054da:	4628      	mov	r0, r5
 80054dc:	f000 f90b 	bl	80056f6 <__swbuf_r>
 80054e0:	3001      	adds	r0, #1
 80054e2:	d1e7      	bne.n	80054b4 <_puts_r+0x68>
 80054e4:	e7ce      	b.n	8005484 <_puts_r+0x38>
 80054e6:	3e01      	subs	r6, #1
 80054e8:	e7e4      	b.n	80054b4 <_puts_r+0x68>
 80054ea:	6823      	ldr	r3, [r4, #0]
 80054ec:	1c5a      	adds	r2, r3, #1
 80054ee:	6022      	str	r2, [r4, #0]
 80054f0:	220a      	movs	r2, #10
 80054f2:	701a      	strb	r2, [r3, #0]
 80054f4:	e7ee      	b.n	80054d4 <_puts_r+0x88>
	...

080054f8 <puts>:
 80054f8:	4b02      	ldr	r3, [pc, #8]	@ (8005504 <puts+0xc>)
 80054fa:	4601      	mov	r1, r0
 80054fc:	6818      	ldr	r0, [r3, #0]
 80054fe:	f7ff bfa5 	b.w	800544c <_puts_r>
 8005502:	bf00      	nop
 8005504:	20000354 	.word	0x20000354

08005508 <setvbuf>:
 8005508:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800550c:	461d      	mov	r5, r3
 800550e:	4b57      	ldr	r3, [pc, #348]	@ (800566c <setvbuf+0x164>)
 8005510:	681f      	ldr	r7, [r3, #0]
 8005512:	4604      	mov	r4, r0
 8005514:	460e      	mov	r6, r1
 8005516:	4690      	mov	r8, r2
 8005518:	b127      	cbz	r7, 8005524 <setvbuf+0x1c>
 800551a:	6a3b      	ldr	r3, [r7, #32]
 800551c:	b913      	cbnz	r3, 8005524 <setvbuf+0x1c>
 800551e:	4638      	mov	r0, r7
 8005520:	f7ff ff44 	bl	80053ac <__sinit>
 8005524:	f1b8 0f02 	cmp.w	r8, #2
 8005528:	d006      	beq.n	8005538 <setvbuf+0x30>
 800552a:	f1b8 0f01 	cmp.w	r8, #1
 800552e:	f200 809a 	bhi.w	8005666 <setvbuf+0x15e>
 8005532:	2d00      	cmp	r5, #0
 8005534:	f2c0 8097 	blt.w	8005666 <setvbuf+0x15e>
 8005538:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800553a:	07d9      	lsls	r1, r3, #31
 800553c:	d405      	bmi.n	800554a <setvbuf+0x42>
 800553e:	89a3      	ldrh	r3, [r4, #12]
 8005540:	059a      	lsls	r2, r3, #22
 8005542:	d402      	bmi.n	800554a <setvbuf+0x42>
 8005544:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005546:	f000 f9f4 	bl	8005932 <__retarget_lock_acquire_recursive>
 800554a:	4621      	mov	r1, r4
 800554c:	4638      	mov	r0, r7
 800554e:	f000 fe45 	bl	80061dc <_fflush_r>
 8005552:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005554:	b141      	cbz	r1, 8005568 <setvbuf+0x60>
 8005556:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800555a:	4299      	cmp	r1, r3
 800555c:	d002      	beq.n	8005564 <setvbuf+0x5c>
 800555e:	4638      	mov	r0, r7
 8005560:	f000 f9ea 	bl	8005938 <_free_r>
 8005564:	2300      	movs	r3, #0
 8005566:	6363      	str	r3, [r4, #52]	@ 0x34
 8005568:	2300      	movs	r3, #0
 800556a:	61a3      	str	r3, [r4, #24]
 800556c:	6063      	str	r3, [r4, #4]
 800556e:	89a3      	ldrh	r3, [r4, #12]
 8005570:	061b      	lsls	r3, r3, #24
 8005572:	d503      	bpl.n	800557c <setvbuf+0x74>
 8005574:	6921      	ldr	r1, [r4, #16]
 8005576:	4638      	mov	r0, r7
 8005578:	f000 f9de 	bl	8005938 <_free_r>
 800557c:	89a3      	ldrh	r3, [r4, #12]
 800557e:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8005582:	f023 0303 	bic.w	r3, r3, #3
 8005586:	f1b8 0f02 	cmp.w	r8, #2
 800558a:	81a3      	strh	r3, [r4, #12]
 800558c:	d061      	beq.n	8005652 <setvbuf+0x14a>
 800558e:	ab01      	add	r3, sp, #4
 8005590:	466a      	mov	r2, sp
 8005592:	4621      	mov	r1, r4
 8005594:	4638      	mov	r0, r7
 8005596:	f000 fe49 	bl	800622c <__swhatbuf_r>
 800559a:	89a3      	ldrh	r3, [r4, #12]
 800559c:	4318      	orrs	r0, r3
 800559e:	81a0      	strh	r0, [r4, #12]
 80055a0:	bb2d      	cbnz	r5, 80055ee <setvbuf+0xe6>
 80055a2:	9d00      	ldr	r5, [sp, #0]
 80055a4:	4628      	mov	r0, r5
 80055a6:	f000 fa11 	bl	80059cc <malloc>
 80055aa:	4606      	mov	r6, r0
 80055ac:	2800      	cmp	r0, #0
 80055ae:	d152      	bne.n	8005656 <setvbuf+0x14e>
 80055b0:	f8dd 9000 	ldr.w	r9, [sp]
 80055b4:	45a9      	cmp	r9, r5
 80055b6:	d140      	bne.n	800563a <setvbuf+0x132>
 80055b8:	f04f 35ff 	mov.w	r5, #4294967295
 80055bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055c0:	f043 0202 	orr.w	r2, r3, #2
 80055c4:	81a2      	strh	r2, [r4, #12]
 80055c6:	2200      	movs	r2, #0
 80055c8:	60a2      	str	r2, [r4, #8]
 80055ca:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 80055ce:	6022      	str	r2, [r4, #0]
 80055d0:	6122      	str	r2, [r4, #16]
 80055d2:	2201      	movs	r2, #1
 80055d4:	6162      	str	r2, [r4, #20]
 80055d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80055d8:	07d6      	lsls	r6, r2, #31
 80055da:	d404      	bmi.n	80055e6 <setvbuf+0xde>
 80055dc:	0598      	lsls	r0, r3, #22
 80055de:	d402      	bmi.n	80055e6 <setvbuf+0xde>
 80055e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80055e2:	f000 f9a7 	bl	8005934 <__retarget_lock_release_recursive>
 80055e6:	4628      	mov	r0, r5
 80055e8:	b003      	add	sp, #12
 80055ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80055ee:	2e00      	cmp	r6, #0
 80055f0:	d0d8      	beq.n	80055a4 <setvbuf+0x9c>
 80055f2:	6a3b      	ldr	r3, [r7, #32]
 80055f4:	b913      	cbnz	r3, 80055fc <setvbuf+0xf4>
 80055f6:	4638      	mov	r0, r7
 80055f8:	f7ff fed8 	bl	80053ac <__sinit>
 80055fc:	f1b8 0f01 	cmp.w	r8, #1
 8005600:	bf08      	it	eq
 8005602:	89a3      	ldrheq	r3, [r4, #12]
 8005604:	6026      	str	r6, [r4, #0]
 8005606:	bf04      	itt	eq
 8005608:	f043 0301 	orreq.w	r3, r3, #1
 800560c:	81a3      	strheq	r3, [r4, #12]
 800560e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005612:	f013 0208 	ands.w	r2, r3, #8
 8005616:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800561a:	d01e      	beq.n	800565a <setvbuf+0x152>
 800561c:	07d9      	lsls	r1, r3, #31
 800561e:	bf41      	itttt	mi
 8005620:	2200      	movmi	r2, #0
 8005622:	426d      	negmi	r5, r5
 8005624:	60a2      	strmi	r2, [r4, #8]
 8005626:	61a5      	strmi	r5, [r4, #24]
 8005628:	bf58      	it	pl
 800562a:	60a5      	strpl	r5, [r4, #8]
 800562c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800562e:	07d2      	lsls	r2, r2, #31
 8005630:	d401      	bmi.n	8005636 <setvbuf+0x12e>
 8005632:	059b      	lsls	r3, r3, #22
 8005634:	d513      	bpl.n	800565e <setvbuf+0x156>
 8005636:	2500      	movs	r5, #0
 8005638:	e7d5      	b.n	80055e6 <setvbuf+0xde>
 800563a:	4648      	mov	r0, r9
 800563c:	f000 f9c6 	bl	80059cc <malloc>
 8005640:	4606      	mov	r6, r0
 8005642:	2800      	cmp	r0, #0
 8005644:	d0b8      	beq.n	80055b8 <setvbuf+0xb0>
 8005646:	89a3      	ldrh	r3, [r4, #12]
 8005648:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800564c:	81a3      	strh	r3, [r4, #12]
 800564e:	464d      	mov	r5, r9
 8005650:	e7cf      	b.n	80055f2 <setvbuf+0xea>
 8005652:	2500      	movs	r5, #0
 8005654:	e7b2      	b.n	80055bc <setvbuf+0xb4>
 8005656:	46a9      	mov	r9, r5
 8005658:	e7f5      	b.n	8005646 <setvbuf+0x13e>
 800565a:	60a2      	str	r2, [r4, #8]
 800565c:	e7e6      	b.n	800562c <setvbuf+0x124>
 800565e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005660:	f000 f968 	bl	8005934 <__retarget_lock_release_recursive>
 8005664:	e7e7      	b.n	8005636 <setvbuf+0x12e>
 8005666:	f04f 35ff 	mov.w	r5, #4294967295
 800566a:	e7bc      	b.n	80055e6 <setvbuf+0xde>
 800566c:	20000354 	.word	0x20000354

08005670 <__sread>:
 8005670:	b510      	push	{r4, lr}
 8005672:	460c      	mov	r4, r1
 8005674:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005678:	f000 f90c 	bl	8005894 <_read_r>
 800567c:	2800      	cmp	r0, #0
 800567e:	bfab      	itete	ge
 8005680:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005682:	89a3      	ldrhlt	r3, [r4, #12]
 8005684:	181b      	addge	r3, r3, r0
 8005686:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800568a:	bfac      	ite	ge
 800568c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800568e:	81a3      	strhlt	r3, [r4, #12]
 8005690:	bd10      	pop	{r4, pc}

08005692 <__swrite>:
 8005692:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005696:	461f      	mov	r7, r3
 8005698:	898b      	ldrh	r3, [r1, #12]
 800569a:	05db      	lsls	r3, r3, #23
 800569c:	4605      	mov	r5, r0
 800569e:	460c      	mov	r4, r1
 80056a0:	4616      	mov	r6, r2
 80056a2:	d505      	bpl.n	80056b0 <__swrite+0x1e>
 80056a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056a8:	2302      	movs	r3, #2
 80056aa:	2200      	movs	r2, #0
 80056ac:	f000 f8e0 	bl	8005870 <_lseek_r>
 80056b0:	89a3      	ldrh	r3, [r4, #12]
 80056b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80056ba:	81a3      	strh	r3, [r4, #12]
 80056bc:	4632      	mov	r2, r6
 80056be:	463b      	mov	r3, r7
 80056c0:	4628      	mov	r0, r5
 80056c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056c6:	f000 b8f7 	b.w	80058b8 <_write_r>

080056ca <__sseek>:
 80056ca:	b510      	push	{r4, lr}
 80056cc:	460c      	mov	r4, r1
 80056ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056d2:	f000 f8cd 	bl	8005870 <_lseek_r>
 80056d6:	1c43      	adds	r3, r0, #1
 80056d8:	89a3      	ldrh	r3, [r4, #12]
 80056da:	bf15      	itete	ne
 80056dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80056de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80056e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80056e6:	81a3      	strheq	r3, [r4, #12]
 80056e8:	bf18      	it	ne
 80056ea:	81a3      	strhne	r3, [r4, #12]
 80056ec:	bd10      	pop	{r4, pc}

080056ee <__sclose>:
 80056ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056f2:	f000 b8ad 	b.w	8005850 <_close_r>

080056f6 <__swbuf_r>:
 80056f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056f8:	460e      	mov	r6, r1
 80056fa:	4614      	mov	r4, r2
 80056fc:	4605      	mov	r5, r0
 80056fe:	b118      	cbz	r0, 8005708 <__swbuf_r+0x12>
 8005700:	6a03      	ldr	r3, [r0, #32]
 8005702:	b90b      	cbnz	r3, 8005708 <__swbuf_r+0x12>
 8005704:	f7ff fe52 	bl	80053ac <__sinit>
 8005708:	69a3      	ldr	r3, [r4, #24]
 800570a:	60a3      	str	r3, [r4, #8]
 800570c:	89a3      	ldrh	r3, [r4, #12]
 800570e:	071a      	lsls	r2, r3, #28
 8005710:	d501      	bpl.n	8005716 <__swbuf_r+0x20>
 8005712:	6923      	ldr	r3, [r4, #16]
 8005714:	b943      	cbnz	r3, 8005728 <__swbuf_r+0x32>
 8005716:	4621      	mov	r1, r4
 8005718:	4628      	mov	r0, r5
 800571a:	f000 f82b 	bl	8005774 <__swsetup_r>
 800571e:	b118      	cbz	r0, 8005728 <__swbuf_r+0x32>
 8005720:	f04f 37ff 	mov.w	r7, #4294967295
 8005724:	4638      	mov	r0, r7
 8005726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005728:	6823      	ldr	r3, [r4, #0]
 800572a:	6922      	ldr	r2, [r4, #16]
 800572c:	1a98      	subs	r0, r3, r2
 800572e:	6963      	ldr	r3, [r4, #20]
 8005730:	b2f6      	uxtb	r6, r6
 8005732:	4283      	cmp	r3, r0
 8005734:	4637      	mov	r7, r6
 8005736:	dc05      	bgt.n	8005744 <__swbuf_r+0x4e>
 8005738:	4621      	mov	r1, r4
 800573a:	4628      	mov	r0, r5
 800573c:	f000 fd4e 	bl	80061dc <_fflush_r>
 8005740:	2800      	cmp	r0, #0
 8005742:	d1ed      	bne.n	8005720 <__swbuf_r+0x2a>
 8005744:	68a3      	ldr	r3, [r4, #8]
 8005746:	3b01      	subs	r3, #1
 8005748:	60a3      	str	r3, [r4, #8]
 800574a:	6823      	ldr	r3, [r4, #0]
 800574c:	1c5a      	adds	r2, r3, #1
 800574e:	6022      	str	r2, [r4, #0]
 8005750:	701e      	strb	r6, [r3, #0]
 8005752:	6962      	ldr	r2, [r4, #20]
 8005754:	1c43      	adds	r3, r0, #1
 8005756:	429a      	cmp	r2, r3
 8005758:	d004      	beq.n	8005764 <__swbuf_r+0x6e>
 800575a:	89a3      	ldrh	r3, [r4, #12]
 800575c:	07db      	lsls	r3, r3, #31
 800575e:	d5e1      	bpl.n	8005724 <__swbuf_r+0x2e>
 8005760:	2e0a      	cmp	r6, #10
 8005762:	d1df      	bne.n	8005724 <__swbuf_r+0x2e>
 8005764:	4621      	mov	r1, r4
 8005766:	4628      	mov	r0, r5
 8005768:	f000 fd38 	bl	80061dc <_fflush_r>
 800576c:	2800      	cmp	r0, #0
 800576e:	d0d9      	beq.n	8005724 <__swbuf_r+0x2e>
 8005770:	e7d6      	b.n	8005720 <__swbuf_r+0x2a>
	...

08005774 <__swsetup_r>:
 8005774:	b538      	push	{r3, r4, r5, lr}
 8005776:	4b29      	ldr	r3, [pc, #164]	@ (800581c <__swsetup_r+0xa8>)
 8005778:	4605      	mov	r5, r0
 800577a:	6818      	ldr	r0, [r3, #0]
 800577c:	460c      	mov	r4, r1
 800577e:	b118      	cbz	r0, 8005788 <__swsetup_r+0x14>
 8005780:	6a03      	ldr	r3, [r0, #32]
 8005782:	b90b      	cbnz	r3, 8005788 <__swsetup_r+0x14>
 8005784:	f7ff fe12 	bl	80053ac <__sinit>
 8005788:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800578c:	0719      	lsls	r1, r3, #28
 800578e:	d422      	bmi.n	80057d6 <__swsetup_r+0x62>
 8005790:	06da      	lsls	r2, r3, #27
 8005792:	d407      	bmi.n	80057a4 <__swsetup_r+0x30>
 8005794:	2209      	movs	r2, #9
 8005796:	602a      	str	r2, [r5, #0]
 8005798:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800579c:	81a3      	strh	r3, [r4, #12]
 800579e:	f04f 30ff 	mov.w	r0, #4294967295
 80057a2:	e033      	b.n	800580c <__swsetup_r+0x98>
 80057a4:	0758      	lsls	r0, r3, #29
 80057a6:	d512      	bpl.n	80057ce <__swsetup_r+0x5a>
 80057a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80057aa:	b141      	cbz	r1, 80057be <__swsetup_r+0x4a>
 80057ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80057b0:	4299      	cmp	r1, r3
 80057b2:	d002      	beq.n	80057ba <__swsetup_r+0x46>
 80057b4:	4628      	mov	r0, r5
 80057b6:	f000 f8bf 	bl	8005938 <_free_r>
 80057ba:	2300      	movs	r3, #0
 80057bc:	6363      	str	r3, [r4, #52]	@ 0x34
 80057be:	89a3      	ldrh	r3, [r4, #12]
 80057c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80057c4:	81a3      	strh	r3, [r4, #12]
 80057c6:	2300      	movs	r3, #0
 80057c8:	6063      	str	r3, [r4, #4]
 80057ca:	6923      	ldr	r3, [r4, #16]
 80057cc:	6023      	str	r3, [r4, #0]
 80057ce:	89a3      	ldrh	r3, [r4, #12]
 80057d0:	f043 0308 	orr.w	r3, r3, #8
 80057d4:	81a3      	strh	r3, [r4, #12]
 80057d6:	6923      	ldr	r3, [r4, #16]
 80057d8:	b94b      	cbnz	r3, 80057ee <__swsetup_r+0x7a>
 80057da:	89a3      	ldrh	r3, [r4, #12]
 80057dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80057e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057e4:	d003      	beq.n	80057ee <__swsetup_r+0x7a>
 80057e6:	4621      	mov	r1, r4
 80057e8:	4628      	mov	r0, r5
 80057ea:	f000 fd45 	bl	8006278 <__smakebuf_r>
 80057ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057f2:	f013 0201 	ands.w	r2, r3, #1
 80057f6:	d00a      	beq.n	800580e <__swsetup_r+0x9a>
 80057f8:	2200      	movs	r2, #0
 80057fa:	60a2      	str	r2, [r4, #8]
 80057fc:	6962      	ldr	r2, [r4, #20]
 80057fe:	4252      	negs	r2, r2
 8005800:	61a2      	str	r2, [r4, #24]
 8005802:	6922      	ldr	r2, [r4, #16]
 8005804:	b942      	cbnz	r2, 8005818 <__swsetup_r+0xa4>
 8005806:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800580a:	d1c5      	bne.n	8005798 <__swsetup_r+0x24>
 800580c:	bd38      	pop	{r3, r4, r5, pc}
 800580e:	0799      	lsls	r1, r3, #30
 8005810:	bf58      	it	pl
 8005812:	6962      	ldrpl	r2, [r4, #20]
 8005814:	60a2      	str	r2, [r4, #8]
 8005816:	e7f4      	b.n	8005802 <__swsetup_r+0x8e>
 8005818:	2000      	movs	r0, #0
 800581a:	e7f7      	b.n	800580c <__swsetup_r+0x98>
 800581c:	20000354 	.word	0x20000354

08005820 <memcmp>:
 8005820:	b510      	push	{r4, lr}
 8005822:	3901      	subs	r1, #1
 8005824:	4402      	add	r2, r0
 8005826:	4290      	cmp	r0, r2
 8005828:	d101      	bne.n	800582e <memcmp+0xe>
 800582a:	2000      	movs	r0, #0
 800582c:	e005      	b.n	800583a <memcmp+0x1a>
 800582e:	7803      	ldrb	r3, [r0, #0]
 8005830:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005834:	42a3      	cmp	r3, r4
 8005836:	d001      	beq.n	800583c <memcmp+0x1c>
 8005838:	1b18      	subs	r0, r3, r4
 800583a:	bd10      	pop	{r4, pc}
 800583c:	3001      	adds	r0, #1
 800583e:	e7f2      	b.n	8005826 <memcmp+0x6>

08005840 <memset>:
 8005840:	4402      	add	r2, r0
 8005842:	4603      	mov	r3, r0
 8005844:	4293      	cmp	r3, r2
 8005846:	d100      	bne.n	800584a <memset+0xa>
 8005848:	4770      	bx	lr
 800584a:	f803 1b01 	strb.w	r1, [r3], #1
 800584e:	e7f9      	b.n	8005844 <memset+0x4>

08005850 <_close_r>:
 8005850:	b538      	push	{r3, r4, r5, lr}
 8005852:	4d06      	ldr	r5, [pc, #24]	@ (800586c <_close_r+0x1c>)
 8005854:	2300      	movs	r3, #0
 8005856:	4604      	mov	r4, r0
 8005858:	4608      	mov	r0, r1
 800585a:	602b      	str	r3, [r5, #0]
 800585c:	f7fc fa25 	bl	8001caa <_close>
 8005860:	1c43      	adds	r3, r0, #1
 8005862:	d102      	bne.n	800586a <_close_r+0x1a>
 8005864:	682b      	ldr	r3, [r5, #0]
 8005866:	b103      	cbz	r3, 800586a <_close_r+0x1a>
 8005868:	6023      	str	r3, [r4, #0]
 800586a:	bd38      	pop	{r3, r4, r5, pc}
 800586c:	20000620 	.word	0x20000620

08005870 <_lseek_r>:
 8005870:	b538      	push	{r3, r4, r5, lr}
 8005872:	4d07      	ldr	r5, [pc, #28]	@ (8005890 <_lseek_r+0x20>)
 8005874:	4604      	mov	r4, r0
 8005876:	4608      	mov	r0, r1
 8005878:	4611      	mov	r1, r2
 800587a:	2200      	movs	r2, #0
 800587c:	602a      	str	r2, [r5, #0]
 800587e:	461a      	mov	r2, r3
 8005880:	f7fc fa3a 	bl	8001cf8 <_lseek>
 8005884:	1c43      	adds	r3, r0, #1
 8005886:	d102      	bne.n	800588e <_lseek_r+0x1e>
 8005888:	682b      	ldr	r3, [r5, #0]
 800588a:	b103      	cbz	r3, 800588e <_lseek_r+0x1e>
 800588c:	6023      	str	r3, [r4, #0]
 800588e:	bd38      	pop	{r3, r4, r5, pc}
 8005890:	20000620 	.word	0x20000620

08005894 <_read_r>:
 8005894:	b538      	push	{r3, r4, r5, lr}
 8005896:	4d07      	ldr	r5, [pc, #28]	@ (80058b4 <_read_r+0x20>)
 8005898:	4604      	mov	r4, r0
 800589a:	4608      	mov	r0, r1
 800589c:	4611      	mov	r1, r2
 800589e:	2200      	movs	r2, #0
 80058a0:	602a      	str	r2, [r5, #0]
 80058a2:	461a      	mov	r2, r3
 80058a4:	f7fc f9e4 	bl	8001c70 <_read>
 80058a8:	1c43      	adds	r3, r0, #1
 80058aa:	d102      	bne.n	80058b2 <_read_r+0x1e>
 80058ac:	682b      	ldr	r3, [r5, #0]
 80058ae:	b103      	cbz	r3, 80058b2 <_read_r+0x1e>
 80058b0:	6023      	str	r3, [r4, #0]
 80058b2:	bd38      	pop	{r3, r4, r5, pc}
 80058b4:	20000620 	.word	0x20000620

080058b8 <_write_r>:
 80058b8:	b538      	push	{r3, r4, r5, lr}
 80058ba:	4d07      	ldr	r5, [pc, #28]	@ (80058d8 <_write_r+0x20>)
 80058bc:	4604      	mov	r4, r0
 80058be:	4608      	mov	r0, r1
 80058c0:	4611      	mov	r1, r2
 80058c2:	2200      	movs	r2, #0
 80058c4:	602a      	str	r2, [r5, #0]
 80058c6:	461a      	mov	r2, r3
 80058c8:	f7fa feb2 	bl	8000630 <_write>
 80058cc:	1c43      	adds	r3, r0, #1
 80058ce:	d102      	bne.n	80058d6 <_write_r+0x1e>
 80058d0:	682b      	ldr	r3, [r5, #0]
 80058d2:	b103      	cbz	r3, 80058d6 <_write_r+0x1e>
 80058d4:	6023      	str	r3, [r4, #0]
 80058d6:	bd38      	pop	{r3, r4, r5, pc}
 80058d8:	20000620 	.word	0x20000620

080058dc <__errno>:
 80058dc:	4b01      	ldr	r3, [pc, #4]	@ (80058e4 <__errno+0x8>)
 80058de:	6818      	ldr	r0, [r3, #0]
 80058e0:	4770      	bx	lr
 80058e2:	bf00      	nop
 80058e4:	20000354 	.word	0x20000354

080058e8 <__libc_init_array>:
 80058e8:	b570      	push	{r4, r5, r6, lr}
 80058ea:	4d0d      	ldr	r5, [pc, #52]	@ (8005920 <__libc_init_array+0x38>)
 80058ec:	4c0d      	ldr	r4, [pc, #52]	@ (8005924 <__libc_init_array+0x3c>)
 80058ee:	1b64      	subs	r4, r4, r5
 80058f0:	10a4      	asrs	r4, r4, #2
 80058f2:	2600      	movs	r6, #0
 80058f4:	42a6      	cmp	r6, r4
 80058f6:	d109      	bne.n	800590c <__libc_init_array+0x24>
 80058f8:	4d0b      	ldr	r5, [pc, #44]	@ (8005928 <__libc_init_array+0x40>)
 80058fa:	4c0c      	ldr	r4, [pc, #48]	@ (800592c <__libc_init_array+0x44>)
 80058fc:	f000 fd5e 	bl	80063bc <_init>
 8005900:	1b64      	subs	r4, r4, r5
 8005902:	10a4      	asrs	r4, r4, #2
 8005904:	2600      	movs	r6, #0
 8005906:	42a6      	cmp	r6, r4
 8005908:	d105      	bne.n	8005916 <__libc_init_array+0x2e>
 800590a:	bd70      	pop	{r4, r5, r6, pc}
 800590c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005910:	4798      	blx	r3
 8005912:	3601      	adds	r6, #1
 8005914:	e7ee      	b.n	80058f4 <__libc_init_array+0xc>
 8005916:	f855 3b04 	ldr.w	r3, [r5], #4
 800591a:	4798      	blx	r3
 800591c:	3601      	adds	r6, #1
 800591e:	e7f2      	b.n	8005906 <__libc_init_array+0x1e>
 8005920:	08006858 	.word	0x08006858
 8005924:	08006858 	.word	0x08006858
 8005928:	08006858 	.word	0x08006858
 800592c:	0800685c 	.word	0x0800685c

08005930 <__retarget_lock_init_recursive>:
 8005930:	4770      	bx	lr

08005932 <__retarget_lock_acquire_recursive>:
 8005932:	4770      	bx	lr

08005934 <__retarget_lock_release_recursive>:
 8005934:	4770      	bx	lr
	...

08005938 <_free_r>:
 8005938:	b538      	push	{r3, r4, r5, lr}
 800593a:	4605      	mov	r5, r0
 800593c:	2900      	cmp	r1, #0
 800593e:	d041      	beq.n	80059c4 <_free_r+0x8c>
 8005940:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005944:	1f0c      	subs	r4, r1, #4
 8005946:	2b00      	cmp	r3, #0
 8005948:	bfb8      	it	lt
 800594a:	18e4      	addlt	r4, r4, r3
 800594c:	f000 f8e8 	bl	8005b20 <__malloc_lock>
 8005950:	4a1d      	ldr	r2, [pc, #116]	@ (80059c8 <_free_r+0x90>)
 8005952:	6813      	ldr	r3, [r2, #0]
 8005954:	b933      	cbnz	r3, 8005964 <_free_r+0x2c>
 8005956:	6063      	str	r3, [r4, #4]
 8005958:	6014      	str	r4, [r2, #0]
 800595a:	4628      	mov	r0, r5
 800595c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005960:	f000 b8e4 	b.w	8005b2c <__malloc_unlock>
 8005964:	42a3      	cmp	r3, r4
 8005966:	d908      	bls.n	800597a <_free_r+0x42>
 8005968:	6820      	ldr	r0, [r4, #0]
 800596a:	1821      	adds	r1, r4, r0
 800596c:	428b      	cmp	r3, r1
 800596e:	bf01      	itttt	eq
 8005970:	6819      	ldreq	r1, [r3, #0]
 8005972:	685b      	ldreq	r3, [r3, #4]
 8005974:	1809      	addeq	r1, r1, r0
 8005976:	6021      	streq	r1, [r4, #0]
 8005978:	e7ed      	b.n	8005956 <_free_r+0x1e>
 800597a:	461a      	mov	r2, r3
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	b10b      	cbz	r3, 8005984 <_free_r+0x4c>
 8005980:	42a3      	cmp	r3, r4
 8005982:	d9fa      	bls.n	800597a <_free_r+0x42>
 8005984:	6811      	ldr	r1, [r2, #0]
 8005986:	1850      	adds	r0, r2, r1
 8005988:	42a0      	cmp	r0, r4
 800598a:	d10b      	bne.n	80059a4 <_free_r+0x6c>
 800598c:	6820      	ldr	r0, [r4, #0]
 800598e:	4401      	add	r1, r0
 8005990:	1850      	adds	r0, r2, r1
 8005992:	4283      	cmp	r3, r0
 8005994:	6011      	str	r1, [r2, #0]
 8005996:	d1e0      	bne.n	800595a <_free_r+0x22>
 8005998:	6818      	ldr	r0, [r3, #0]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	6053      	str	r3, [r2, #4]
 800599e:	4408      	add	r0, r1
 80059a0:	6010      	str	r0, [r2, #0]
 80059a2:	e7da      	b.n	800595a <_free_r+0x22>
 80059a4:	d902      	bls.n	80059ac <_free_r+0x74>
 80059a6:	230c      	movs	r3, #12
 80059a8:	602b      	str	r3, [r5, #0]
 80059aa:	e7d6      	b.n	800595a <_free_r+0x22>
 80059ac:	6820      	ldr	r0, [r4, #0]
 80059ae:	1821      	adds	r1, r4, r0
 80059b0:	428b      	cmp	r3, r1
 80059b2:	bf04      	itt	eq
 80059b4:	6819      	ldreq	r1, [r3, #0]
 80059b6:	685b      	ldreq	r3, [r3, #4]
 80059b8:	6063      	str	r3, [r4, #4]
 80059ba:	bf04      	itt	eq
 80059bc:	1809      	addeq	r1, r1, r0
 80059be:	6021      	streq	r1, [r4, #0]
 80059c0:	6054      	str	r4, [r2, #4]
 80059c2:	e7ca      	b.n	800595a <_free_r+0x22>
 80059c4:	bd38      	pop	{r3, r4, r5, pc}
 80059c6:	bf00      	nop
 80059c8:	2000062c 	.word	0x2000062c

080059cc <malloc>:
 80059cc:	4b02      	ldr	r3, [pc, #8]	@ (80059d8 <malloc+0xc>)
 80059ce:	4601      	mov	r1, r0
 80059d0:	6818      	ldr	r0, [r3, #0]
 80059d2:	f000 b825 	b.w	8005a20 <_malloc_r>
 80059d6:	bf00      	nop
 80059d8:	20000354 	.word	0x20000354

080059dc <sbrk_aligned>:
 80059dc:	b570      	push	{r4, r5, r6, lr}
 80059de:	4e0f      	ldr	r6, [pc, #60]	@ (8005a1c <sbrk_aligned+0x40>)
 80059e0:	460c      	mov	r4, r1
 80059e2:	6831      	ldr	r1, [r6, #0]
 80059e4:	4605      	mov	r5, r0
 80059e6:	b911      	cbnz	r1, 80059ee <sbrk_aligned+0x12>
 80059e8:	f000 fcd8 	bl	800639c <_sbrk_r>
 80059ec:	6030      	str	r0, [r6, #0]
 80059ee:	4621      	mov	r1, r4
 80059f0:	4628      	mov	r0, r5
 80059f2:	f000 fcd3 	bl	800639c <_sbrk_r>
 80059f6:	1c43      	adds	r3, r0, #1
 80059f8:	d103      	bne.n	8005a02 <sbrk_aligned+0x26>
 80059fa:	f04f 34ff 	mov.w	r4, #4294967295
 80059fe:	4620      	mov	r0, r4
 8005a00:	bd70      	pop	{r4, r5, r6, pc}
 8005a02:	1cc4      	adds	r4, r0, #3
 8005a04:	f024 0403 	bic.w	r4, r4, #3
 8005a08:	42a0      	cmp	r0, r4
 8005a0a:	d0f8      	beq.n	80059fe <sbrk_aligned+0x22>
 8005a0c:	1a21      	subs	r1, r4, r0
 8005a0e:	4628      	mov	r0, r5
 8005a10:	f000 fcc4 	bl	800639c <_sbrk_r>
 8005a14:	3001      	adds	r0, #1
 8005a16:	d1f2      	bne.n	80059fe <sbrk_aligned+0x22>
 8005a18:	e7ef      	b.n	80059fa <sbrk_aligned+0x1e>
 8005a1a:	bf00      	nop
 8005a1c:	20000628 	.word	0x20000628

08005a20 <_malloc_r>:
 8005a20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a24:	1ccd      	adds	r5, r1, #3
 8005a26:	f025 0503 	bic.w	r5, r5, #3
 8005a2a:	3508      	adds	r5, #8
 8005a2c:	2d0c      	cmp	r5, #12
 8005a2e:	bf38      	it	cc
 8005a30:	250c      	movcc	r5, #12
 8005a32:	2d00      	cmp	r5, #0
 8005a34:	4606      	mov	r6, r0
 8005a36:	db01      	blt.n	8005a3c <_malloc_r+0x1c>
 8005a38:	42a9      	cmp	r1, r5
 8005a3a:	d904      	bls.n	8005a46 <_malloc_r+0x26>
 8005a3c:	230c      	movs	r3, #12
 8005a3e:	6033      	str	r3, [r6, #0]
 8005a40:	2000      	movs	r0, #0
 8005a42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005b1c <_malloc_r+0xfc>
 8005a4a:	f000 f869 	bl	8005b20 <__malloc_lock>
 8005a4e:	f8d8 3000 	ldr.w	r3, [r8]
 8005a52:	461c      	mov	r4, r3
 8005a54:	bb44      	cbnz	r4, 8005aa8 <_malloc_r+0x88>
 8005a56:	4629      	mov	r1, r5
 8005a58:	4630      	mov	r0, r6
 8005a5a:	f7ff ffbf 	bl	80059dc <sbrk_aligned>
 8005a5e:	1c43      	adds	r3, r0, #1
 8005a60:	4604      	mov	r4, r0
 8005a62:	d158      	bne.n	8005b16 <_malloc_r+0xf6>
 8005a64:	f8d8 4000 	ldr.w	r4, [r8]
 8005a68:	4627      	mov	r7, r4
 8005a6a:	2f00      	cmp	r7, #0
 8005a6c:	d143      	bne.n	8005af6 <_malloc_r+0xd6>
 8005a6e:	2c00      	cmp	r4, #0
 8005a70:	d04b      	beq.n	8005b0a <_malloc_r+0xea>
 8005a72:	6823      	ldr	r3, [r4, #0]
 8005a74:	4639      	mov	r1, r7
 8005a76:	4630      	mov	r0, r6
 8005a78:	eb04 0903 	add.w	r9, r4, r3
 8005a7c:	f000 fc8e 	bl	800639c <_sbrk_r>
 8005a80:	4581      	cmp	r9, r0
 8005a82:	d142      	bne.n	8005b0a <_malloc_r+0xea>
 8005a84:	6821      	ldr	r1, [r4, #0]
 8005a86:	1a6d      	subs	r5, r5, r1
 8005a88:	4629      	mov	r1, r5
 8005a8a:	4630      	mov	r0, r6
 8005a8c:	f7ff ffa6 	bl	80059dc <sbrk_aligned>
 8005a90:	3001      	adds	r0, #1
 8005a92:	d03a      	beq.n	8005b0a <_malloc_r+0xea>
 8005a94:	6823      	ldr	r3, [r4, #0]
 8005a96:	442b      	add	r3, r5
 8005a98:	6023      	str	r3, [r4, #0]
 8005a9a:	f8d8 3000 	ldr.w	r3, [r8]
 8005a9e:	685a      	ldr	r2, [r3, #4]
 8005aa0:	bb62      	cbnz	r2, 8005afc <_malloc_r+0xdc>
 8005aa2:	f8c8 7000 	str.w	r7, [r8]
 8005aa6:	e00f      	b.n	8005ac8 <_malloc_r+0xa8>
 8005aa8:	6822      	ldr	r2, [r4, #0]
 8005aaa:	1b52      	subs	r2, r2, r5
 8005aac:	d420      	bmi.n	8005af0 <_malloc_r+0xd0>
 8005aae:	2a0b      	cmp	r2, #11
 8005ab0:	d917      	bls.n	8005ae2 <_malloc_r+0xc2>
 8005ab2:	1961      	adds	r1, r4, r5
 8005ab4:	42a3      	cmp	r3, r4
 8005ab6:	6025      	str	r5, [r4, #0]
 8005ab8:	bf18      	it	ne
 8005aba:	6059      	strne	r1, [r3, #4]
 8005abc:	6863      	ldr	r3, [r4, #4]
 8005abe:	bf08      	it	eq
 8005ac0:	f8c8 1000 	streq.w	r1, [r8]
 8005ac4:	5162      	str	r2, [r4, r5]
 8005ac6:	604b      	str	r3, [r1, #4]
 8005ac8:	4630      	mov	r0, r6
 8005aca:	f000 f82f 	bl	8005b2c <__malloc_unlock>
 8005ace:	f104 000b 	add.w	r0, r4, #11
 8005ad2:	1d23      	adds	r3, r4, #4
 8005ad4:	f020 0007 	bic.w	r0, r0, #7
 8005ad8:	1ac2      	subs	r2, r0, r3
 8005ada:	bf1c      	itt	ne
 8005adc:	1a1b      	subne	r3, r3, r0
 8005ade:	50a3      	strne	r3, [r4, r2]
 8005ae0:	e7af      	b.n	8005a42 <_malloc_r+0x22>
 8005ae2:	6862      	ldr	r2, [r4, #4]
 8005ae4:	42a3      	cmp	r3, r4
 8005ae6:	bf0c      	ite	eq
 8005ae8:	f8c8 2000 	streq.w	r2, [r8]
 8005aec:	605a      	strne	r2, [r3, #4]
 8005aee:	e7eb      	b.n	8005ac8 <_malloc_r+0xa8>
 8005af0:	4623      	mov	r3, r4
 8005af2:	6864      	ldr	r4, [r4, #4]
 8005af4:	e7ae      	b.n	8005a54 <_malloc_r+0x34>
 8005af6:	463c      	mov	r4, r7
 8005af8:	687f      	ldr	r7, [r7, #4]
 8005afa:	e7b6      	b.n	8005a6a <_malloc_r+0x4a>
 8005afc:	461a      	mov	r2, r3
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	42a3      	cmp	r3, r4
 8005b02:	d1fb      	bne.n	8005afc <_malloc_r+0xdc>
 8005b04:	2300      	movs	r3, #0
 8005b06:	6053      	str	r3, [r2, #4]
 8005b08:	e7de      	b.n	8005ac8 <_malloc_r+0xa8>
 8005b0a:	230c      	movs	r3, #12
 8005b0c:	6033      	str	r3, [r6, #0]
 8005b0e:	4630      	mov	r0, r6
 8005b10:	f000 f80c 	bl	8005b2c <__malloc_unlock>
 8005b14:	e794      	b.n	8005a40 <_malloc_r+0x20>
 8005b16:	6005      	str	r5, [r0, #0]
 8005b18:	e7d6      	b.n	8005ac8 <_malloc_r+0xa8>
 8005b1a:	bf00      	nop
 8005b1c:	2000062c 	.word	0x2000062c

08005b20 <__malloc_lock>:
 8005b20:	4801      	ldr	r0, [pc, #4]	@ (8005b28 <__malloc_lock+0x8>)
 8005b22:	f7ff bf06 	b.w	8005932 <__retarget_lock_acquire_recursive>
 8005b26:	bf00      	nop
 8005b28:	20000624 	.word	0x20000624

08005b2c <__malloc_unlock>:
 8005b2c:	4801      	ldr	r0, [pc, #4]	@ (8005b34 <__malloc_unlock+0x8>)
 8005b2e:	f7ff bf01 	b.w	8005934 <__retarget_lock_release_recursive>
 8005b32:	bf00      	nop
 8005b34:	20000624 	.word	0x20000624

08005b38 <__sfputc_r>:
 8005b38:	6893      	ldr	r3, [r2, #8]
 8005b3a:	3b01      	subs	r3, #1
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	b410      	push	{r4}
 8005b40:	6093      	str	r3, [r2, #8]
 8005b42:	da08      	bge.n	8005b56 <__sfputc_r+0x1e>
 8005b44:	6994      	ldr	r4, [r2, #24]
 8005b46:	42a3      	cmp	r3, r4
 8005b48:	db01      	blt.n	8005b4e <__sfputc_r+0x16>
 8005b4a:	290a      	cmp	r1, #10
 8005b4c:	d103      	bne.n	8005b56 <__sfputc_r+0x1e>
 8005b4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b52:	f7ff bdd0 	b.w	80056f6 <__swbuf_r>
 8005b56:	6813      	ldr	r3, [r2, #0]
 8005b58:	1c58      	adds	r0, r3, #1
 8005b5a:	6010      	str	r0, [r2, #0]
 8005b5c:	7019      	strb	r1, [r3, #0]
 8005b5e:	4608      	mov	r0, r1
 8005b60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b64:	4770      	bx	lr

08005b66 <__sfputs_r>:
 8005b66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b68:	4606      	mov	r6, r0
 8005b6a:	460f      	mov	r7, r1
 8005b6c:	4614      	mov	r4, r2
 8005b6e:	18d5      	adds	r5, r2, r3
 8005b70:	42ac      	cmp	r4, r5
 8005b72:	d101      	bne.n	8005b78 <__sfputs_r+0x12>
 8005b74:	2000      	movs	r0, #0
 8005b76:	e007      	b.n	8005b88 <__sfputs_r+0x22>
 8005b78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b7c:	463a      	mov	r2, r7
 8005b7e:	4630      	mov	r0, r6
 8005b80:	f7ff ffda 	bl	8005b38 <__sfputc_r>
 8005b84:	1c43      	adds	r3, r0, #1
 8005b86:	d1f3      	bne.n	8005b70 <__sfputs_r+0xa>
 8005b88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005b8c <_vfiprintf_r>:
 8005b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b90:	460d      	mov	r5, r1
 8005b92:	b09d      	sub	sp, #116	@ 0x74
 8005b94:	4614      	mov	r4, r2
 8005b96:	4698      	mov	r8, r3
 8005b98:	4606      	mov	r6, r0
 8005b9a:	b118      	cbz	r0, 8005ba4 <_vfiprintf_r+0x18>
 8005b9c:	6a03      	ldr	r3, [r0, #32]
 8005b9e:	b90b      	cbnz	r3, 8005ba4 <_vfiprintf_r+0x18>
 8005ba0:	f7ff fc04 	bl	80053ac <__sinit>
 8005ba4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005ba6:	07d9      	lsls	r1, r3, #31
 8005ba8:	d405      	bmi.n	8005bb6 <_vfiprintf_r+0x2a>
 8005baa:	89ab      	ldrh	r3, [r5, #12]
 8005bac:	059a      	lsls	r2, r3, #22
 8005bae:	d402      	bmi.n	8005bb6 <_vfiprintf_r+0x2a>
 8005bb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005bb2:	f7ff febe 	bl	8005932 <__retarget_lock_acquire_recursive>
 8005bb6:	89ab      	ldrh	r3, [r5, #12]
 8005bb8:	071b      	lsls	r3, r3, #28
 8005bba:	d501      	bpl.n	8005bc0 <_vfiprintf_r+0x34>
 8005bbc:	692b      	ldr	r3, [r5, #16]
 8005bbe:	b99b      	cbnz	r3, 8005be8 <_vfiprintf_r+0x5c>
 8005bc0:	4629      	mov	r1, r5
 8005bc2:	4630      	mov	r0, r6
 8005bc4:	f7ff fdd6 	bl	8005774 <__swsetup_r>
 8005bc8:	b170      	cbz	r0, 8005be8 <_vfiprintf_r+0x5c>
 8005bca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005bcc:	07dc      	lsls	r4, r3, #31
 8005bce:	d504      	bpl.n	8005bda <_vfiprintf_r+0x4e>
 8005bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8005bd4:	b01d      	add	sp, #116	@ 0x74
 8005bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bda:	89ab      	ldrh	r3, [r5, #12]
 8005bdc:	0598      	lsls	r0, r3, #22
 8005bde:	d4f7      	bmi.n	8005bd0 <_vfiprintf_r+0x44>
 8005be0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005be2:	f7ff fea7 	bl	8005934 <__retarget_lock_release_recursive>
 8005be6:	e7f3      	b.n	8005bd0 <_vfiprintf_r+0x44>
 8005be8:	2300      	movs	r3, #0
 8005bea:	9309      	str	r3, [sp, #36]	@ 0x24
 8005bec:	2320      	movs	r3, #32
 8005bee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005bf2:	f8cd 800c 	str.w	r8, [sp, #12]
 8005bf6:	2330      	movs	r3, #48	@ 0x30
 8005bf8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005da8 <_vfiprintf_r+0x21c>
 8005bfc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005c00:	f04f 0901 	mov.w	r9, #1
 8005c04:	4623      	mov	r3, r4
 8005c06:	469a      	mov	sl, r3
 8005c08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c0c:	b10a      	cbz	r2, 8005c12 <_vfiprintf_r+0x86>
 8005c0e:	2a25      	cmp	r2, #37	@ 0x25
 8005c10:	d1f9      	bne.n	8005c06 <_vfiprintf_r+0x7a>
 8005c12:	ebba 0b04 	subs.w	fp, sl, r4
 8005c16:	d00b      	beq.n	8005c30 <_vfiprintf_r+0xa4>
 8005c18:	465b      	mov	r3, fp
 8005c1a:	4622      	mov	r2, r4
 8005c1c:	4629      	mov	r1, r5
 8005c1e:	4630      	mov	r0, r6
 8005c20:	f7ff ffa1 	bl	8005b66 <__sfputs_r>
 8005c24:	3001      	adds	r0, #1
 8005c26:	f000 80a7 	beq.w	8005d78 <_vfiprintf_r+0x1ec>
 8005c2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005c2c:	445a      	add	r2, fp
 8005c2e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005c30:	f89a 3000 	ldrb.w	r3, [sl]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	f000 809f 	beq.w	8005d78 <_vfiprintf_r+0x1ec>
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8005c40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c44:	f10a 0a01 	add.w	sl, sl, #1
 8005c48:	9304      	str	r3, [sp, #16]
 8005c4a:	9307      	str	r3, [sp, #28]
 8005c4c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005c50:	931a      	str	r3, [sp, #104]	@ 0x68
 8005c52:	4654      	mov	r4, sl
 8005c54:	2205      	movs	r2, #5
 8005c56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c5a:	4853      	ldr	r0, [pc, #332]	@ (8005da8 <_vfiprintf_r+0x21c>)
 8005c5c:	f7fa fac0 	bl	80001e0 <memchr>
 8005c60:	9a04      	ldr	r2, [sp, #16]
 8005c62:	b9d8      	cbnz	r0, 8005c9c <_vfiprintf_r+0x110>
 8005c64:	06d1      	lsls	r1, r2, #27
 8005c66:	bf44      	itt	mi
 8005c68:	2320      	movmi	r3, #32
 8005c6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c6e:	0713      	lsls	r3, r2, #28
 8005c70:	bf44      	itt	mi
 8005c72:	232b      	movmi	r3, #43	@ 0x2b
 8005c74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c78:	f89a 3000 	ldrb.w	r3, [sl]
 8005c7c:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c7e:	d015      	beq.n	8005cac <_vfiprintf_r+0x120>
 8005c80:	9a07      	ldr	r2, [sp, #28]
 8005c82:	4654      	mov	r4, sl
 8005c84:	2000      	movs	r0, #0
 8005c86:	f04f 0c0a 	mov.w	ip, #10
 8005c8a:	4621      	mov	r1, r4
 8005c8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c90:	3b30      	subs	r3, #48	@ 0x30
 8005c92:	2b09      	cmp	r3, #9
 8005c94:	d94b      	bls.n	8005d2e <_vfiprintf_r+0x1a2>
 8005c96:	b1b0      	cbz	r0, 8005cc6 <_vfiprintf_r+0x13a>
 8005c98:	9207      	str	r2, [sp, #28]
 8005c9a:	e014      	b.n	8005cc6 <_vfiprintf_r+0x13a>
 8005c9c:	eba0 0308 	sub.w	r3, r0, r8
 8005ca0:	fa09 f303 	lsl.w	r3, r9, r3
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	9304      	str	r3, [sp, #16]
 8005ca8:	46a2      	mov	sl, r4
 8005caa:	e7d2      	b.n	8005c52 <_vfiprintf_r+0xc6>
 8005cac:	9b03      	ldr	r3, [sp, #12]
 8005cae:	1d19      	adds	r1, r3, #4
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	9103      	str	r1, [sp, #12]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	bfbb      	ittet	lt
 8005cb8:	425b      	neglt	r3, r3
 8005cba:	f042 0202 	orrlt.w	r2, r2, #2
 8005cbe:	9307      	strge	r3, [sp, #28]
 8005cc0:	9307      	strlt	r3, [sp, #28]
 8005cc2:	bfb8      	it	lt
 8005cc4:	9204      	strlt	r2, [sp, #16]
 8005cc6:	7823      	ldrb	r3, [r4, #0]
 8005cc8:	2b2e      	cmp	r3, #46	@ 0x2e
 8005cca:	d10a      	bne.n	8005ce2 <_vfiprintf_r+0x156>
 8005ccc:	7863      	ldrb	r3, [r4, #1]
 8005cce:	2b2a      	cmp	r3, #42	@ 0x2a
 8005cd0:	d132      	bne.n	8005d38 <_vfiprintf_r+0x1ac>
 8005cd2:	9b03      	ldr	r3, [sp, #12]
 8005cd4:	1d1a      	adds	r2, r3, #4
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	9203      	str	r2, [sp, #12]
 8005cda:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005cde:	3402      	adds	r4, #2
 8005ce0:	9305      	str	r3, [sp, #20]
 8005ce2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005db8 <_vfiprintf_r+0x22c>
 8005ce6:	7821      	ldrb	r1, [r4, #0]
 8005ce8:	2203      	movs	r2, #3
 8005cea:	4650      	mov	r0, sl
 8005cec:	f7fa fa78 	bl	80001e0 <memchr>
 8005cf0:	b138      	cbz	r0, 8005d02 <_vfiprintf_r+0x176>
 8005cf2:	9b04      	ldr	r3, [sp, #16]
 8005cf4:	eba0 000a 	sub.w	r0, r0, sl
 8005cf8:	2240      	movs	r2, #64	@ 0x40
 8005cfa:	4082      	lsls	r2, r0
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	3401      	adds	r4, #1
 8005d00:	9304      	str	r3, [sp, #16]
 8005d02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d06:	4829      	ldr	r0, [pc, #164]	@ (8005dac <_vfiprintf_r+0x220>)
 8005d08:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005d0c:	2206      	movs	r2, #6
 8005d0e:	f7fa fa67 	bl	80001e0 <memchr>
 8005d12:	2800      	cmp	r0, #0
 8005d14:	d03f      	beq.n	8005d96 <_vfiprintf_r+0x20a>
 8005d16:	4b26      	ldr	r3, [pc, #152]	@ (8005db0 <_vfiprintf_r+0x224>)
 8005d18:	bb1b      	cbnz	r3, 8005d62 <_vfiprintf_r+0x1d6>
 8005d1a:	9b03      	ldr	r3, [sp, #12]
 8005d1c:	3307      	adds	r3, #7
 8005d1e:	f023 0307 	bic.w	r3, r3, #7
 8005d22:	3308      	adds	r3, #8
 8005d24:	9303      	str	r3, [sp, #12]
 8005d26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d28:	443b      	add	r3, r7
 8005d2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d2c:	e76a      	b.n	8005c04 <_vfiprintf_r+0x78>
 8005d2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d32:	460c      	mov	r4, r1
 8005d34:	2001      	movs	r0, #1
 8005d36:	e7a8      	b.n	8005c8a <_vfiprintf_r+0xfe>
 8005d38:	2300      	movs	r3, #0
 8005d3a:	3401      	adds	r4, #1
 8005d3c:	9305      	str	r3, [sp, #20]
 8005d3e:	4619      	mov	r1, r3
 8005d40:	f04f 0c0a 	mov.w	ip, #10
 8005d44:	4620      	mov	r0, r4
 8005d46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d4a:	3a30      	subs	r2, #48	@ 0x30
 8005d4c:	2a09      	cmp	r2, #9
 8005d4e:	d903      	bls.n	8005d58 <_vfiprintf_r+0x1cc>
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d0c6      	beq.n	8005ce2 <_vfiprintf_r+0x156>
 8005d54:	9105      	str	r1, [sp, #20]
 8005d56:	e7c4      	b.n	8005ce2 <_vfiprintf_r+0x156>
 8005d58:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d5c:	4604      	mov	r4, r0
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e7f0      	b.n	8005d44 <_vfiprintf_r+0x1b8>
 8005d62:	ab03      	add	r3, sp, #12
 8005d64:	9300      	str	r3, [sp, #0]
 8005d66:	462a      	mov	r2, r5
 8005d68:	4b12      	ldr	r3, [pc, #72]	@ (8005db4 <_vfiprintf_r+0x228>)
 8005d6a:	a904      	add	r1, sp, #16
 8005d6c:	4630      	mov	r0, r6
 8005d6e:	f3af 8000 	nop.w
 8005d72:	4607      	mov	r7, r0
 8005d74:	1c78      	adds	r0, r7, #1
 8005d76:	d1d6      	bne.n	8005d26 <_vfiprintf_r+0x19a>
 8005d78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005d7a:	07d9      	lsls	r1, r3, #31
 8005d7c:	d405      	bmi.n	8005d8a <_vfiprintf_r+0x1fe>
 8005d7e:	89ab      	ldrh	r3, [r5, #12]
 8005d80:	059a      	lsls	r2, r3, #22
 8005d82:	d402      	bmi.n	8005d8a <_vfiprintf_r+0x1fe>
 8005d84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005d86:	f7ff fdd5 	bl	8005934 <__retarget_lock_release_recursive>
 8005d8a:	89ab      	ldrh	r3, [r5, #12]
 8005d8c:	065b      	lsls	r3, r3, #25
 8005d8e:	f53f af1f 	bmi.w	8005bd0 <_vfiprintf_r+0x44>
 8005d92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005d94:	e71e      	b.n	8005bd4 <_vfiprintf_r+0x48>
 8005d96:	ab03      	add	r3, sp, #12
 8005d98:	9300      	str	r3, [sp, #0]
 8005d9a:	462a      	mov	r2, r5
 8005d9c:	4b05      	ldr	r3, [pc, #20]	@ (8005db4 <_vfiprintf_r+0x228>)
 8005d9e:	a904      	add	r1, sp, #16
 8005da0:	4630      	mov	r0, r6
 8005da2:	f000 f879 	bl	8005e98 <_printf_i>
 8005da6:	e7e4      	b.n	8005d72 <_vfiprintf_r+0x1e6>
 8005da8:	0800681c 	.word	0x0800681c
 8005dac:	08006826 	.word	0x08006826
 8005db0:	00000000 	.word	0x00000000
 8005db4:	08005b67 	.word	0x08005b67
 8005db8:	08006822 	.word	0x08006822

08005dbc <_printf_common>:
 8005dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dc0:	4616      	mov	r6, r2
 8005dc2:	4698      	mov	r8, r3
 8005dc4:	688a      	ldr	r2, [r1, #8]
 8005dc6:	690b      	ldr	r3, [r1, #16]
 8005dc8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	bfb8      	it	lt
 8005dd0:	4613      	movlt	r3, r2
 8005dd2:	6033      	str	r3, [r6, #0]
 8005dd4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005dd8:	4607      	mov	r7, r0
 8005dda:	460c      	mov	r4, r1
 8005ddc:	b10a      	cbz	r2, 8005de2 <_printf_common+0x26>
 8005dde:	3301      	adds	r3, #1
 8005de0:	6033      	str	r3, [r6, #0]
 8005de2:	6823      	ldr	r3, [r4, #0]
 8005de4:	0699      	lsls	r1, r3, #26
 8005de6:	bf42      	ittt	mi
 8005de8:	6833      	ldrmi	r3, [r6, #0]
 8005dea:	3302      	addmi	r3, #2
 8005dec:	6033      	strmi	r3, [r6, #0]
 8005dee:	6825      	ldr	r5, [r4, #0]
 8005df0:	f015 0506 	ands.w	r5, r5, #6
 8005df4:	d106      	bne.n	8005e04 <_printf_common+0x48>
 8005df6:	f104 0a19 	add.w	sl, r4, #25
 8005dfa:	68e3      	ldr	r3, [r4, #12]
 8005dfc:	6832      	ldr	r2, [r6, #0]
 8005dfe:	1a9b      	subs	r3, r3, r2
 8005e00:	42ab      	cmp	r3, r5
 8005e02:	dc26      	bgt.n	8005e52 <_printf_common+0x96>
 8005e04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005e08:	6822      	ldr	r2, [r4, #0]
 8005e0a:	3b00      	subs	r3, #0
 8005e0c:	bf18      	it	ne
 8005e0e:	2301      	movne	r3, #1
 8005e10:	0692      	lsls	r2, r2, #26
 8005e12:	d42b      	bmi.n	8005e6c <_printf_common+0xb0>
 8005e14:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005e18:	4641      	mov	r1, r8
 8005e1a:	4638      	mov	r0, r7
 8005e1c:	47c8      	blx	r9
 8005e1e:	3001      	adds	r0, #1
 8005e20:	d01e      	beq.n	8005e60 <_printf_common+0xa4>
 8005e22:	6823      	ldr	r3, [r4, #0]
 8005e24:	6922      	ldr	r2, [r4, #16]
 8005e26:	f003 0306 	and.w	r3, r3, #6
 8005e2a:	2b04      	cmp	r3, #4
 8005e2c:	bf02      	ittt	eq
 8005e2e:	68e5      	ldreq	r5, [r4, #12]
 8005e30:	6833      	ldreq	r3, [r6, #0]
 8005e32:	1aed      	subeq	r5, r5, r3
 8005e34:	68a3      	ldr	r3, [r4, #8]
 8005e36:	bf0c      	ite	eq
 8005e38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e3c:	2500      	movne	r5, #0
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	bfc4      	itt	gt
 8005e42:	1a9b      	subgt	r3, r3, r2
 8005e44:	18ed      	addgt	r5, r5, r3
 8005e46:	2600      	movs	r6, #0
 8005e48:	341a      	adds	r4, #26
 8005e4a:	42b5      	cmp	r5, r6
 8005e4c:	d11a      	bne.n	8005e84 <_printf_common+0xc8>
 8005e4e:	2000      	movs	r0, #0
 8005e50:	e008      	b.n	8005e64 <_printf_common+0xa8>
 8005e52:	2301      	movs	r3, #1
 8005e54:	4652      	mov	r2, sl
 8005e56:	4641      	mov	r1, r8
 8005e58:	4638      	mov	r0, r7
 8005e5a:	47c8      	blx	r9
 8005e5c:	3001      	adds	r0, #1
 8005e5e:	d103      	bne.n	8005e68 <_printf_common+0xac>
 8005e60:	f04f 30ff 	mov.w	r0, #4294967295
 8005e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e68:	3501      	adds	r5, #1
 8005e6a:	e7c6      	b.n	8005dfa <_printf_common+0x3e>
 8005e6c:	18e1      	adds	r1, r4, r3
 8005e6e:	1c5a      	adds	r2, r3, #1
 8005e70:	2030      	movs	r0, #48	@ 0x30
 8005e72:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005e76:	4422      	add	r2, r4
 8005e78:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005e7c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005e80:	3302      	adds	r3, #2
 8005e82:	e7c7      	b.n	8005e14 <_printf_common+0x58>
 8005e84:	2301      	movs	r3, #1
 8005e86:	4622      	mov	r2, r4
 8005e88:	4641      	mov	r1, r8
 8005e8a:	4638      	mov	r0, r7
 8005e8c:	47c8      	blx	r9
 8005e8e:	3001      	adds	r0, #1
 8005e90:	d0e6      	beq.n	8005e60 <_printf_common+0xa4>
 8005e92:	3601      	adds	r6, #1
 8005e94:	e7d9      	b.n	8005e4a <_printf_common+0x8e>
	...

08005e98 <_printf_i>:
 8005e98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e9c:	7e0f      	ldrb	r7, [r1, #24]
 8005e9e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005ea0:	2f78      	cmp	r7, #120	@ 0x78
 8005ea2:	4691      	mov	r9, r2
 8005ea4:	4680      	mov	r8, r0
 8005ea6:	460c      	mov	r4, r1
 8005ea8:	469a      	mov	sl, r3
 8005eaa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005eae:	d807      	bhi.n	8005ec0 <_printf_i+0x28>
 8005eb0:	2f62      	cmp	r7, #98	@ 0x62
 8005eb2:	d80a      	bhi.n	8005eca <_printf_i+0x32>
 8005eb4:	2f00      	cmp	r7, #0
 8005eb6:	f000 80d1 	beq.w	800605c <_printf_i+0x1c4>
 8005eba:	2f58      	cmp	r7, #88	@ 0x58
 8005ebc:	f000 80b8 	beq.w	8006030 <_printf_i+0x198>
 8005ec0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ec4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005ec8:	e03a      	b.n	8005f40 <_printf_i+0xa8>
 8005eca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005ece:	2b15      	cmp	r3, #21
 8005ed0:	d8f6      	bhi.n	8005ec0 <_printf_i+0x28>
 8005ed2:	a101      	add	r1, pc, #4	@ (adr r1, 8005ed8 <_printf_i+0x40>)
 8005ed4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ed8:	08005f31 	.word	0x08005f31
 8005edc:	08005f45 	.word	0x08005f45
 8005ee0:	08005ec1 	.word	0x08005ec1
 8005ee4:	08005ec1 	.word	0x08005ec1
 8005ee8:	08005ec1 	.word	0x08005ec1
 8005eec:	08005ec1 	.word	0x08005ec1
 8005ef0:	08005f45 	.word	0x08005f45
 8005ef4:	08005ec1 	.word	0x08005ec1
 8005ef8:	08005ec1 	.word	0x08005ec1
 8005efc:	08005ec1 	.word	0x08005ec1
 8005f00:	08005ec1 	.word	0x08005ec1
 8005f04:	08006043 	.word	0x08006043
 8005f08:	08005f6f 	.word	0x08005f6f
 8005f0c:	08005ffd 	.word	0x08005ffd
 8005f10:	08005ec1 	.word	0x08005ec1
 8005f14:	08005ec1 	.word	0x08005ec1
 8005f18:	08006065 	.word	0x08006065
 8005f1c:	08005ec1 	.word	0x08005ec1
 8005f20:	08005f6f 	.word	0x08005f6f
 8005f24:	08005ec1 	.word	0x08005ec1
 8005f28:	08005ec1 	.word	0x08005ec1
 8005f2c:	08006005 	.word	0x08006005
 8005f30:	6833      	ldr	r3, [r6, #0]
 8005f32:	1d1a      	adds	r2, r3, #4
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	6032      	str	r2, [r6, #0]
 8005f38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f3c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005f40:	2301      	movs	r3, #1
 8005f42:	e09c      	b.n	800607e <_printf_i+0x1e6>
 8005f44:	6833      	ldr	r3, [r6, #0]
 8005f46:	6820      	ldr	r0, [r4, #0]
 8005f48:	1d19      	adds	r1, r3, #4
 8005f4a:	6031      	str	r1, [r6, #0]
 8005f4c:	0606      	lsls	r6, r0, #24
 8005f4e:	d501      	bpl.n	8005f54 <_printf_i+0xbc>
 8005f50:	681d      	ldr	r5, [r3, #0]
 8005f52:	e003      	b.n	8005f5c <_printf_i+0xc4>
 8005f54:	0645      	lsls	r5, r0, #25
 8005f56:	d5fb      	bpl.n	8005f50 <_printf_i+0xb8>
 8005f58:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005f5c:	2d00      	cmp	r5, #0
 8005f5e:	da03      	bge.n	8005f68 <_printf_i+0xd0>
 8005f60:	232d      	movs	r3, #45	@ 0x2d
 8005f62:	426d      	negs	r5, r5
 8005f64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f68:	4858      	ldr	r0, [pc, #352]	@ (80060cc <_printf_i+0x234>)
 8005f6a:	230a      	movs	r3, #10
 8005f6c:	e011      	b.n	8005f92 <_printf_i+0xfa>
 8005f6e:	6821      	ldr	r1, [r4, #0]
 8005f70:	6833      	ldr	r3, [r6, #0]
 8005f72:	0608      	lsls	r0, r1, #24
 8005f74:	f853 5b04 	ldr.w	r5, [r3], #4
 8005f78:	d402      	bmi.n	8005f80 <_printf_i+0xe8>
 8005f7a:	0649      	lsls	r1, r1, #25
 8005f7c:	bf48      	it	mi
 8005f7e:	b2ad      	uxthmi	r5, r5
 8005f80:	2f6f      	cmp	r7, #111	@ 0x6f
 8005f82:	4852      	ldr	r0, [pc, #328]	@ (80060cc <_printf_i+0x234>)
 8005f84:	6033      	str	r3, [r6, #0]
 8005f86:	bf14      	ite	ne
 8005f88:	230a      	movne	r3, #10
 8005f8a:	2308      	moveq	r3, #8
 8005f8c:	2100      	movs	r1, #0
 8005f8e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005f92:	6866      	ldr	r6, [r4, #4]
 8005f94:	60a6      	str	r6, [r4, #8]
 8005f96:	2e00      	cmp	r6, #0
 8005f98:	db05      	blt.n	8005fa6 <_printf_i+0x10e>
 8005f9a:	6821      	ldr	r1, [r4, #0]
 8005f9c:	432e      	orrs	r6, r5
 8005f9e:	f021 0104 	bic.w	r1, r1, #4
 8005fa2:	6021      	str	r1, [r4, #0]
 8005fa4:	d04b      	beq.n	800603e <_printf_i+0x1a6>
 8005fa6:	4616      	mov	r6, r2
 8005fa8:	fbb5 f1f3 	udiv	r1, r5, r3
 8005fac:	fb03 5711 	mls	r7, r3, r1, r5
 8005fb0:	5dc7      	ldrb	r7, [r0, r7]
 8005fb2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005fb6:	462f      	mov	r7, r5
 8005fb8:	42bb      	cmp	r3, r7
 8005fba:	460d      	mov	r5, r1
 8005fbc:	d9f4      	bls.n	8005fa8 <_printf_i+0x110>
 8005fbe:	2b08      	cmp	r3, #8
 8005fc0:	d10b      	bne.n	8005fda <_printf_i+0x142>
 8005fc2:	6823      	ldr	r3, [r4, #0]
 8005fc4:	07df      	lsls	r7, r3, #31
 8005fc6:	d508      	bpl.n	8005fda <_printf_i+0x142>
 8005fc8:	6923      	ldr	r3, [r4, #16]
 8005fca:	6861      	ldr	r1, [r4, #4]
 8005fcc:	4299      	cmp	r1, r3
 8005fce:	bfde      	ittt	le
 8005fd0:	2330      	movle	r3, #48	@ 0x30
 8005fd2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005fd6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005fda:	1b92      	subs	r2, r2, r6
 8005fdc:	6122      	str	r2, [r4, #16]
 8005fde:	f8cd a000 	str.w	sl, [sp]
 8005fe2:	464b      	mov	r3, r9
 8005fe4:	aa03      	add	r2, sp, #12
 8005fe6:	4621      	mov	r1, r4
 8005fe8:	4640      	mov	r0, r8
 8005fea:	f7ff fee7 	bl	8005dbc <_printf_common>
 8005fee:	3001      	adds	r0, #1
 8005ff0:	d14a      	bne.n	8006088 <_printf_i+0x1f0>
 8005ff2:	f04f 30ff 	mov.w	r0, #4294967295
 8005ff6:	b004      	add	sp, #16
 8005ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ffc:	6823      	ldr	r3, [r4, #0]
 8005ffe:	f043 0320 	orr.w	r3, r3, #32
 8006002:	6023      	str	r3, [r4, #0]
 8006004:	4832      	ldr	r0, [pc, #200]	@ (80060d0 <_printf_i+0x238>)
 8006006:	2778      	movs	r7, #120	@ 0x78
 8006008:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800600c:	6823      	ldr	r3, [r4, #0]
 800600e:	6831      	ldr	r1, [r6, #0]
 8006010:	061f      	lsls	r7, r3, #24
 8006012:	f851 5b04 	ldr.w	r5, [r1], #4
 8006016:	d402      	bmi.n	800601e <_printf_i+0x186>
 8006018:	065f      	lsls	r7, r3, #25
 800601a:	bf48      	it	mi
 800601c:	b2ad      	uxthmi	r5, r5
 800601e:	6031      	str	r1, [r6, #0]
 8006020:	07d9      	lsls	r1, r3, #31
 8006022:	bf44      	itt	mi
 8006024:	f043 0320 	orrmi.w	r3, r3, #32
 8006028:	6023      	strmi	r3, [r4, #0]
 800602a:	b11d      	cbz	r5, 8006034 <_printf_i+0x19c>
 800602c:	2310      	movs	r3, #16
 800602e:	e7ad      	b.n	8005f8c <_printf_i+0xf4>
 8006030:	4826      	ldr	r0, [pc, #152]	@ (80060cc <_printf_i+0x234>)
 8006032:	e7e9      	b.n	8006008 <_printf_i+0x170>
 8006034:	6823      	ldr	r3, [r4, #0]
 8006036:	f023 0320 	bic.w	r3, r3, #32
 800603a:	6023      	str	r3, [r4, #0]
 800603c:	e7f6      	b.n	800602c <_printf_i+0x194>
 800603e:	4616      	mov	r6, r2
 8006040:	e7bd      	b.n	8005fbe <_printf_i+0x126>
 8006042:	6833      	ldr	r3, [r6, #0]
 8006044:	6825      	ldr	r5, [r4, #0]
 8006046:	6961      	ldr	r1, [r4, #20]
 8006048:	1d18      	adds	r0, r3, #4
 800604a:	6030      	str	r0, [r6, #0]
 800604c:	062e      	lsls	r6, r5, #24
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	d501      	bpl.n	8006056 <_printf_i+0x1be>
 8006052:	6019      	str	r1, [r3, #0]
 8006054:	e002      	b.n	800605c <_printf_i+0x1c4>
 8006056:	0668      	lsls	r0, r5, #25
 8006058:	d5fb      	bpl.n	8006052 <_printf_i+0x1ba>
 800605a:	8019      	strh	r1, [r3, #0]
 800605c:	2300      	movs	r3, #0
 800605e:	6123      	str	r3, [r4, #16]
 8006060:	4616      	mov	r6, r2
 8006062:	e7bc      	b.n	8005fde <_printf_i+0x146>
 8006064:	6833      	ldr	r3, [r6, #0]
 8006066:	1d1a      	adds	r2, r3, #4
 8006068:	6032      	str	r2, [r6, #0]
 800606a:	681e      	ldr	r6, [r3, #0]
 800606c:	6862      	ldr	r2, [r4, #4]
 800606e:	2100      	movs	r1, #0
 8006070:	4630      	mov	r0, r6
 8006072:	f7fa f8b5 	bl	80001e0 <memchr>
 8006076:	b108      	cbz	r0, 800607c <_printf_i+0x1e4>
 8006078:	1b80      	subs	r0, r0, r6
 800607a:	6060      	str	r0, [r4, #4]
 800607c:	6863      	ldr	r3, [r4, #4]
 800607e:	6123      	str	r3, [r4, #16]
 8006080:	2300      	movs	r3, #0
 8006082:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006086:	e7aa      	b.n	8005fde <_printf_i+0x146>
 8006088:	6923      	ldr	r3, [r4, #16]
 800608a:	4632      	mov	r2, r6
 800608c:	4649      	mov	r1, r9
 800608e:	4640      	mov	r0, r8
 8006090:	47d0      	blx	sl
 8006092:	3001      	adds	r0, #1
 8006094:	d0ad      	beq.n	8005ff2 <_printf_i+0x15a>
 8006096:	6823      	ldr	r3, [r4, #0]
 8006098:	079b      	lsls	r3, r3, #30
 800609a:	d413      	bmi.n	80060c4 <_printf_i+0x22c>
 800609c:	68e0      	ldr	r0, [r4, #12]
 800609e:	9b03      	ldr	r3, [sp, #12]
 80060a0:	4298      	cmp	r0, r3
 80060a2:	bfb8      	it	lt
 80060a4:	4618      	movlt	r0, r3
 80060a6:	e7a6      	b.n	8005ff6 <_printf_i+0x15e>
 80060a8:	2301      	movs	r3, #1
 80060aa:	4632      	mov	r2, r6
 80060ac:	4649      	mov	r1, r9
 80060ae:	4640      	mov	r0, r8
 80060b0:	47d0      	blx	sl
 80060b2:	3001      	adds	r0, #1
 80060b4:	d09d      	beq.n	8005ff2 <_printf_i+0x15a>
 80060b6:	3501      	adds	r5, #1
 80060b8:	68e3      	ldr	r3, [r4, #12]
 80060ba:	9903      	ldr	r1, [sp, #12]
 80060bc:	1a5b      	subs	r3, r3, r1
 80060be:	42ab      	cmp	r3, r5
 80060c0:	dcf2      	bgt.n	80060a8 <_printf_i+0x210>
 80060c2:	e7eb      	b.n	800609c <_printf_i+0x204>
 80060c4:	2500      	movs	r5, #0
 80060c6:	f104 0619 	add.w	r6, r4, #25
 80060ca:	e7f5      	b.n	80060b8 <_printf_i+0x220>
 80060cc:	0800682d 	.word	0x0800682d
 80060d0:	0800683e 	.word	0x0800683e

080060d4 <__sflush_r>:
 80060d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80060d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060dc:	0716      	lsls	r6, r2, #28
 80060de:	4605      	mov	r5, r0
 80060e0:	460c      	mov	r4, r1
 80060e2:	d454      	bmi.n	800618e <__sflush_r+0xba>
 80060e4:	684b      	ldr	r3, [r1, #4]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	dc02      	bgt.n	80060f0 <__sflush_r+0x1c>
 80060ea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	dd48      	ble.n	8006182 <__sflush_r+0xae>
 80060f0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80060f2:	2e00      	cmp	r6, #0
 80060f4:	d045      	beq.n	8006182 <__sflush_r+0xae>
 80060f6:	2300      	movs	r3, #0
 80060f8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80060fc:	682f      	ldr	r7, [r5, #0]
 80060fe:	6a21      	ldr	r1, [r4, #32]
 8006100:	602b      	str	r3, [r5, #0]
 8006102:	d030      	beq.n	8006166 <__sflush_r+0x92>
 8006104:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006106:	89a3      	ldrh	r3, [r4, #12]
 8006108:	0759      	lsls	r1, r3, #29
 800610a:	d505      	bpl.n	8006118 <__sflush_r+0x44>
 800610c:	6863      	ldr	r3, [r4, #4]
 800610e:	1ad2      	subs	r2, r2, r3
 8006110:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006112:	b10b      	cbz	r3, 8006118 <__sflush_r+0x44>
 8006114:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006116:	1ad2      	subs	r2, r2, r3
 8006118:	2300      	movs	r3, #0
 800611a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800611c:	6a21      	ldr	r1, [r4, #32]
 800611e:	4628      	mov	r0, r5
 8006120:	47b0      	blx	r6
 8006122:	1c43      	adds	r3, r0, #1
 8006124:	89a3      	ldrh	r3, [r4, #12]
 8006126:	d106      	bne.n	8006136 <__sflush_r+0x62>
 8006128:	6829      	ldr	r1, [r5, #0]
 800612a:	291d      	cmp	r1, #29
 800612c:	d82b      	bhi.n	8006186 <__sflush_r+0xb2>
 800612e:	4a2a      	ldr	r2, [pc, #168]	@ (80061d8 <__sflush_r+0x104>)
 8006130:	40ca      	lsrs	r2, r1
 8006132:	07d6      	lsls	r6, r2, #31
 8006134:	d527      	bpl.n	8006186 <__sflush_r+0xb2>
 8006136:	2200      	movs	r2, #0
 8006138:	6062      	str	r2, [r4, #4]
 800613a:	04d9      	lsls	r1, r3, #19
 800613c:	6922      	ldr	r2, [r4, #16]
 800613e:	6022      	str	r2, [r4, #0]
 8006140:	d504      	bpl.n	800614c <__sflush_r+0x78>
 8006142:	1c42      	adds	r2, r0, #1
 8006144:	d101      	bne.n	800614a <__sflush_r+0x76>
 8006146:	682b      	ldr	r3, [r5, #0]
 8006148:	b903      	cbnz	r3, 800614c <__sflush_r+0x78>
 800614a:	6560      	str	r0, [r4, #84]	@ 0x54
 800614c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800614e:	602f      	str	r7, [r5, #0]
 8006150:	b1b9      	cbz	r1, 8006182 <__sflush_r+0xae>
 8006152:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006156:	4299      	cmp	r1, r3
 8006158:	d002      	beq.n	8006160 <__sflush_r+0x8c>
 800615a:	4628      	mov	r0, r5
 800615c:	f7ff fbec 	bl	8005938 <_free_r>
 8006160:	2300      	movs	r3, #0
 8006162:	6363      	str	r3, [r4, #52]	@ 0x34
 8006164:	e00d      	b.n	8006182 <__sflush_r+0xae>
 8006166:	2301      	movs	r3, #1
 8006168:	4628      	mov	r0, r5
 800616a:	47b0      	blx	r6
 800616c:	4602      	mov	r2, r0
 800616e:	1c50      	adds	r0, r2, #1
 8006170:	d1c9      	bne.n	8006106 <__sflush_r+0x32>
 8006172:	682b      	ldr	r3, [r5, #0]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d0c6      	beq.n	8006106 <__sflush_r+0x32>
 8006178:	2b1d      	cmp	r3, #29
 800617a:	d001      	beq.n	8006180 <__sflush_r+0xac>
 800617c:	2b16      	cmp	r3, #22
 800617e:	d11e      	bne.n	80061be <__sflush_r+0xea>
 8006180:	602f      	str	r7, [r5, #0]
 8006182:	2000      	movs	r0, #0
 8006184:	e022      	b.n	80061cc <__sflush_r+0xf8>
 8006186:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800618a:	b21b      	sxth	r3, r3
 800618c:	e01b      	b.n	80061c6 <__sflush_r+0xf2>
 800618e:	690f      	ldr	r7, [r1, #16]
 8006190:	2f00      	cmp	r7, #0
 8006192:	d0f6      	beq.n	8006182 <__sflush_r+0xae>
 8006194:	0793      	lsls	r3, r2, #30
 8006196:	680e      	ldr	r6, [r1, #0]
 8006198:	bf08      	it	eq
 800619a:	694b      	ldreq	r3, [r1, #20]
 800619c:	600f      	str	r7, [r1, #0]
 800619e:	bf18      	it	ne
 80061a0:	2300      	movne	r3, #0
 80061a2:	eba6 0807 	sub.w	r8, r6, r7
 80061a6:	608b      	str	r3, [r1, #8]
 80061a8:	f1b8 0f00 	cmp.w	r8, #0
 80061ac:	dde9      	ble.n	8006182 <__sflush_r+0xae>
 80061ae:	6a21      	ldr	r1, [r4, #32]
 80061b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80061b2:	4643      	mov	r3, r8
 80061b4:	463a      	mov	r2, r7
 80061b6:	4628      	mov	r0, r5
 80061b8:	47b0      	blx	r6
 80061ba:	2800      	cmp	r0, #0
 80061bc:	dc08      	bgt.n	80061d0 <__sflush_r+0xfc>
 80061be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80061c6:	81a3      	strh	r3, [r4, #12]
 80061c8:	f04f 30ff 	mov.w	r0, #4294967295
 80061cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061d0:	4407      	add	r7, r0
 80061d2:	eba8 0800 	sub.w	r8, r8, r0
 80061d6:	e7e7      	b.n	80061a8 <__sflush_r+0xd4>
 80061d8:	20400001 	.word	0x20400001

080061dc <_fflush_r>:
 80061dc:	b538      	push	{r3, r4, r5, lr}
 80061de:	690b      	ldr	r3, [r1, #16]
 80061e0:	4605      	mov	r5, r0
 80061e2:	460c      	mov	r4, r1
 80061e4:	b913      	cbnz	r3, 80061ec <_fflush_r+0x10>
 80061e6:	2500      	movs	r5, #0
 80061e8:	4628      	mov	r0, r5
 80061ea:	bd38      	pop	{r3, r4, r5, pc}
 80061ec:	b118      	cbz	r0, 80061f6 <_fflush_r+0x1a>
 80061ee:	6a03      	ldr	r3, [r0, #32]
 80061f0:	b90b      	cbnz	r3, 80061f6 <_fflush_r+0x1a>
 80061f2:	f7ff f8db 	bl	80053ac <__sinit>
 80061f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d0f3      	beq.n	80061e6 <_fflush_r+0xa>
 80061fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006200:	07d0      	lsls	r0, r2, #31
 8006202:	d404      	bmi.n	800620e <_fflush_r+0x32>
 8006204:	0599      	lsls	r1, r3, #22
 8006206:	d402      	bmi.n	800620e <_fflush_r+0x32>
 8006208:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800620a:	f7ff fb92 	bl	8005932 <__retarget_lock_acquire_recursive>
 800620e:	4628      	mov	r0, r5
 8006210:	4621      	mov	r1, r4
 8006212:	f7ff ff5f 	bl	80060d4 <__sflush_r>
 8006216:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006218:	07da      	lsls	r2, r3, #31
 800621a:	4605      	mov	r5, r0
 800621c:	d4e4      	bmi.n	80061e8 <_fflush_r+0xc>
 800621e:	89a3      	ldrh	r3, [r4, #12]
 8006220:	059b      	lsls	r3, r3, #22
 8006222:	d4e1      	bmi.n	80061e8 <_fflush_r+0xc>
 8006224:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006226:	f7ff fb85 	bl	8005934 <__retarget_lock_release_recursive>
 800622a:	e7dd      	b.n	80061e8 <_fflush_r+0xc>

0800622c <__swhatbuf_r>:
 800622c:	b570      	push	{r4, r5, r6, lr}
 800622e:	460c      	mov	r4, r1
 8006230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006234:	2900      	cmp	r1, #0
 8006236:	b096      	sub	sp, #88	@ 0x58
 8006238:	4615      	mov	r5, r2
 800623a:	461e      	mov	r6, r3
 800623c:	da0d      	bge.n	800625a <__swhatbuf_r+0x2e>
 800623e:	89a3      	ldrh	r3, [r4, #12]
 8006240:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006244:	f04f 0100 	mov.w	r1, #0
 8006248:	bf14      	ite	ne
 800624a:	2340      	movne	r3, #64	@ 0x40
 800624c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006250:	2000      	movs	r0, #0
 8006252:	6031      	str	r1, [r6, #0]
 8006254:	602b      	str	r3, [r5, #0]
 8006256:	b016      	add	sp, #88	@ 0x58
 8006258:	bd70      	pop	{r4, r5, r6, pc}
 800625a:	466a      	mov	r2, sp
 800625c:	f000 f87c 	bl	8006358 <_fstat_r>
 8006260:	2800      	cmp	r0, #0
 8006262:	dbec      	blt.n	800623e <__swhatbuf_r+0x12>
 8006264:	9901      	ldr	r1, [sp, #4]
 8006266:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800626a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800626e:	4259      	negs	r1, r3
 8006270:	4159      	adcs	r1, r3
 8006272:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006276:	e7eb      	b.n	8006250 <__swhatbuf_r+0x24>

08006278 <__smakebuf_r>:
 8006278:	898b      	ldrh	r3, [r1, #12]
 800627a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800627c:	079d      	lsls	r5, r3, #30
 800627e:	4606      	mov	r6, r0
 8006280:	460c      	mov	r4, r1
 8006282:	d507      	bpl.n	8006294 <__smakebuf_r+0x1c>
 8006284:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006288:	6023      	str	r3, [r4, #0]
 800628a:	6123      	str	r3, [r4, #16]
 800628c:	2301      	movs	r3, #1
 800628e:	6163      	str	r3, [r4, #20]
 8006290:	b003      	add	sp, #12
 8006292:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006294:	ab01      	add	r3, sp, #4
 8006296:	466a      	mov	r2, sp
 8006298:	f7ff ffc8 	bl	800622c <__swhatbuf_r>
 800629c:	9f00      	ldr	r7, [sp, #0]
 800629e:	4605      	mov	r5, r0
 80062a0:	4639      	mov	r1, r7
 80062a2:	4630      	mov	r0, r6
 80062a4:	f7ff fbbc 	bl	8005a20 <_malloc_r>
 80062a8:	b948      	cbnz	r0, 80062be <__smakebuf_r+0x46>
 80062aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062ae:	059a      	lsls	r2, r3, #22
 80062b0:	d4ee      	bmi.n	8006290 <__smakebuf_r+0x18>
 80062b2:	f023 0303 	bic.w	r3, r3, #3
 80062b6:	f043 0302 	orr.w	r3, r3, #2
 80062ba:	81a3      	strh	r3, [r4, #12]
 80062bc:	e7e2      	b.n	8006284 <__smakebuf_r+0xc>
 80062be:	89a3      	ldrh	r3, [r4, #12]
 80062c0:	6020      	str	r0, [r4, #0]
 80062c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062c6:	81a3      	strh	r3, [r4, #12]
 80062c8:	9b01      	ldr	r3, [sp, #4]
 80062ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80062ce:	b15b      	cbz	r3, 80062e8 <__smakebuf_r+0x70>
 80062d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062d4:	4630      	mov	r0, r6
 80062d6:	f000 f851 	bl	800637c <_isatty_r>
 80062da:	b128      	cbz	r0, 80062e8 <__smakebuf_r+0x70>
 80062dc:	89a3      	ldrh	r3, [r4, #12]
 80062de:	f023 0303 	bic.w	r3, r3, #3
 80062e2:	f043 0301 	orr.w	r3, r3, #1
 80062e6:	81a3      	strh	r3, [r4, #12]
 80062e8:	89a3      	ldrh	r3, [r4, #12]
 80062ea:	431d      	orrs	r5, r3
 80062ec:	81a5      	strh	r5, [r4, #12]
 80062ee:	e7cf      	b.n	8006290 <__smakebuf_r+0x18>

080062f0 <_putc_r>:
 80062f0:	b570      	push	{r4, r5, r6, lr}
 80062f2:	460d      	mov	r5, r1
 80062f4:	4614      	mov	r4, r2
 80062f6:	4606      	mov	r6, r0
 80062f8:	b118      	cbz	r0, 8006302 <_putc_r+0x12>
 80062fa:	6a03      	ldr	r3, [r0, #32]
 80062fc:	b90b      	cbnz	r3, 8006302 <_putc_r+0x12>
 80062fe:	f7ff f855 	bl	80053ac <__sinit>
 8006302:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006304:	07d8      	lsls	r0, r3, #31
 8006306:	d405      	bmi.n	8006314 <_putc_r+0x24>
 8006308:	89a3      	ldrh	r3, [r4, #12]
 800630a:	0599      	lsls	r1, r3, #22
 800630c:	d402      	bmi.n	8006314 <_putc_r+0x24>
 800630e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006310:	f7ff fb0f 	bl	8005932 <__retarget_lock_acquire_recursive>
 8006314:	68a3      	ldr	r3, [r4, #8]
 8006316:	3b01      	subs	r3, #1
 8006318:	2b00      	cmp	r3, #0
 800631a:	60a3      	str	r3, [r4, #8]
 800631c:	da05      	bge.n	800632a <_putc_r+0x3a>
 800631e:	69a2      	ldr	r2, [r4, #24]
 8006320:	4293      	cmp	r3, r2
 8006322:	db12      	blt.n	800634a <_putc_r+0x5a>
 8006324:	b2eb      	uxtb	r3, r5
 8006326:	2b0a      	cmp	r3, #10
 8006328:	d00f      	beq.n	800634a <_putc_r+0x5a>
 800632a:	6823      	ldr	r3, [r4, #0]
 800632c:	1c5a      	adds	r2, r3, #1
 800632e:	6022      	str	r2, [r4, #0]
 8006330:	701d      	strb	r5, [r3, #0]
 8006332:	b2ed      	uxtb	r5, r5
 8006334:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006336:	07da      	lsls	r2, r3, #31
 8006338:	d405      	bmi.n	8006346 <_putc_r+0x56>
 800633a:	89a3      	ldrh	r3, [r4, #12]
 800633c:	059b      	lsls	r3, r3, #22
 800633e:	d402      	bmi.n	8006346 <_putc_r+0x56>
 8006340:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006342:	f7ff faf7 	bl	8005934 <__retarget_lock_release_recursive>
 8006346:	4628      	mov	r0, r5
 8006348:	bd70      	pop	{r4, r5, r6, pc}
 800634a:	4629      	mov	r1, r5
 800634c:	4622      	mov	r2, r4
 800634e:	4630      	mov	r0, r6
 8006350:	f7ff f9d1 	bl	80056f6 <__swbuf_r>
 8006354:	4605      	mov	r5, r0
 8006356:	e7ed      	b.n	8006334 <_putc_r+0x44>

08006358 <_fstat_r>:
 8006358:	b538      	push	{r3, r4, r5, lr}
 800635a:	4d07      	ldr	r5, [pc, #28]	@ (8006378 <_fstat_r+0x20>)
 800635c:	2300      	movs	r3, #0
 800635e:	4604      	mov	r4, r0
 8006360:	4608      	mov	r0, r1
 8006362:	4611      	mov	r1, r2
 8006364:	602b      	str	r3, [r5, #0]
 8006366:	f7fb fcac 	bl	8001cc2 <_fstat>
 800636a:	1c43      	adds	r3, r0, #1
 800636c:	d102      	bne.n	8006374 <_fstat_r+0x1c>
 800636e:	682b      	ldr	r3, [r5, #0]
 8006370:	b103      	cbz	r3, 8006374 <_fstat_r+0x1c>
 8006372:	6023      	str	r3, [r4, #0]
 8006374:	bd38      	pop	{r3, r4, r5, pc}
 8006376:	bf00      	nop
 8006378:	20000620 	.word	0x20000620

0800637c <_isatty_r>:
 800637c:	b538      	push	{r3, r4, r5, lr}
 800637e:	4d06      	ldr	r5, [pc, #24]	@ (8006398 <_isatty_r+0x1c>)
 8006380:	2300      	movs	r3, #0
 8006382:	4604      	mov	r4, r0
 8006384:	4608      	mov	r0, r1
 8006386:	602b      	str	r3, [r5, #0]
 8006388:	f7fb fcab 	bl	8001ce2 <_isatty>
 800638c:	1c43      	adds	r3, r0, #1
 800638e:	d102      	bne.n	8006396 <_isatty_r+0x1a>
 8006390:	682b      	ldr	r3, [r5, #0]
 8006392:	b103      	cbz	r3, 8006396 <_isatty_r+0x1a>
 8006394:	6023      	str	r3, [r4, #0]
 8006396:	bd38      	pop	{r3, r4, r5, pc}
 8006398:	20000620 	.word	0x20000620

0800639c <_sbrk_r>:
 800639c:	b538      	push	{r3, r4, r5, lr}
 800639e:	4d06      	ldr	r5, [pc, #24]	@ (80063b8 <_sbrk_r+0x1c>)
 80063a0:	2300      	movs	r3, #0
 80063a2:	4604      	mov	r4, r0
 80063a4:	4608      	mov	r0, r1
 80063a6:	602b      	str	r3, [r5, #0]
 80063a8:	f7fb fcb4 	bl	8001d14 <_sbrk>
 80063ac:	1c43      	adds	r3, r0, #1
 80063ae:	d102      	bne.n	80063b6 <_sbrk_r+0x1a>
 80063b0:	682b      	ldr	r3, [r5, #0]
 80063b2:	b103      	cbz	r3, 80063b6 <_sbrk_r+0x1a>
 80063b4:	6023      	str	r3, [r4, #0]
 80063b6:	bd38      	pop	{r3, r4, r5, pc}
 80063b8:	20000620 	.word	0x20000620

080063bc <_init>:
 80063bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063be:	bf00      	nop
 80063c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063c2:	bc08      	pop	{r3}
 80063c4:	469e      	mov	lr, r3
 80063c6:	4770      	bx	lr

080063c8 <_fini>:
 80063c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ca:	bf00      	nop
 80063cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063ce:	bc08      	pop	{r3}
 80063d0:	469e      	mov	lr, r3
 80063d2:	4770      	bx	lr
